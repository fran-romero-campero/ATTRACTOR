{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time || hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
day.length <- (24 - start.time) + end.time
day.length
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
max.time
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 + hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
setwd("~/Dropbox/github_repos/ATTRACTOR/network")
tair10.description <- read.table(file="Athaliana_167_TAIR10.defline.txt", sep="\t")
tair10.description <- read.table(file="Athaliana_167_TAIR10.defline.txt", sep="\t",comment.char = "")
tair10.description <- read.table(file="Athaliana_167_TAIR10.defline.txt", sep="\t",quote = "")
head(tair10.description)
extract.gene.name <- fucntion(transcript.name)
{
return(substr(x = transcript.name,start = 1,stop = 9))
}
sapply(tair10.description$V1,extract.gene.name)
extract.gene.name <- fucntion(transcript.name)
{
return(substr(x = transcript.name,start = 1,stop = 9))
}
sapply(tair10.description$V1,extract.gene.name)
sapply(tair10.description$V1,extract.gene.name)
extract.gene.name <- function(transcript.name)
{
return(substr(x = transcript.name,start = 1,stop = 9))
}
sapply(tair10.description$V1,extract.gene.name)
extract.gene.name <- function(transcript.name)
{
return(substr(x = transcript.name,start = 1,stop = 10))
}
sapply(tair10.description$V1,extract.gene.name)
tair10.description <- sapply(tair10.description$V1,extract.gene.name)
head(tair10.description)
extract.gene.name <- function(transcript.name)
{
return(substr(x = transcript.name,start = 1,stop = 9))
}
tair10.description <- read.table(file="Athaliana_167_TAIR10.defline.txt", sep="\t",quote = "")
head(tair10.description)
extract.gene.name <- function(transcript.name)
{
return(substr(x = transcript.name,start = 1,stop = 9))
}
tair10.description$V1 <- sapply(tair10.description$V1,extract.gene.name)
head(tair10.description)
duplicated(tair10.description)
tair10.description <- tair10.description[!duplicated(tair10.description),]
sum(duplicated(tair10.description))
head(tair10.description)
description <- tair10.description$V3
name(description) <- tair10.description$V1
names(description) <- tair10.description$V1
description[1:3]
tair10.description <- read.table(file="Athaliana_167_TAIR10.defline.txt", sep="\t",quote = "",as.is=T)
head(tair10.description)
extract.gene.name <- function(transcript.name)
{
return(substr(x = transcript.name,start = 1,stop = 9))
}
tair10.description$V1 <- sapply(tair10.description$V1,extract.gene.name)
head(tair10.description)
tair10.description <- tair10.description[!duplicated(tair10.description),]
sum(duplicated(tair10.description))
head(tair10.description)
description <- tair10.description$V3
names(description) <- tair10.description$V1
description[1:3]
## Load network description
read.table(file="attractor_network_topological_parameters.tsv",header=T)
## Load network description
network.df <- read.table(file="attractor_network_topological_parameters.tsv",header=T)
network.df$names
## Load network description
network.df <- read.table(file="attractor_network_topological_parameters.tsv",header=T,as.is=T)
network.df$names
data.frame(network.df,descriptionnet[work.df$names])
data.frame(network.df,description[network.df$names])
network.df <- data.frame(network.df,description[network.df$names])
colnames(network.df[,ncol(network.df)]) <- "description"
colnames(network.df[[ncol(network.df)]]) <- "description"
names(network.df[[ncol(network.df)]]) <- "description"
colnames(network.df)
colname(network.df[[ncol(network.df)]]) <- "description"
colnames(network.df[,ncol(network.df)]) <- "description"
network.df[,ncol(network.df)]
network.df <- data.frame(network.df,description[network.df$names],stringsAsFactors = F)
colnames(network.df[,ncol(network.df)]) <- "description"
network.df[,ncol(network.df)]
colnames(network.df[[ncol(network.df)]]) <- "description"
names(network.df[[ncol(network.df)]]) <- "description"
colnames(network.df)
## Load network description
network.df <- read.table(file="attractor_network_topological_parameters.tsv",header=T,as.is=T)
ncol(network.df)
network.df <- data.frame(network.df,description[network.df$names],stringsAsFactors = F)
ncol(network.df)
names(network.df[[ncol(network.df)]])
names(network.df[[ncol(network.df)]]) <- "description"
names(network.df[[ncol(network.df)]])
colnames(network.df)
colnames(network.df)
colnames(network.df)
colnames(network.df[28])
colnames(network.df[28]) <- "description"
colnames(network.df[28])
colnames(network.df[28]) <- "description"
help(colnames)
colnames(network.df)[ncol(network.df)] <- "description"
colnames(network.df)
#Rewriting the data.frame with description
write.table(new.data, file="../attractor_network_representation.tsv", sep = "\t", quote = FALSE,
row.names = FALSE)
#Rewriting the data.frame with description
write.table(network.df, file="../attractor_network_representation.tsv", sep = "\t", quote = FALSE,
row.names = FALSE)
#Rewriting the data.frame with description
write.table(network.df, file="attractor_network_representation.tsv", sep = "\t", quote = FALSE,
row.names = FALSE)
shiny::runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load network
network.data <- read.table(file="data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE)
setwd("~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev")
## Load network
network.data <- read.table(file="data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE)
## Load network
network.data <- read.table(file="data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t")
## Load network
network.data <- read.table(file="data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
runApp()
## Load network
network.data <- read.table(file="data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
head(network.data)
## Load network
#network.data <- read.table(file="data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
network.data <- read.table(file="data/attractor_network_topological_parameters.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
runApp()
runApp()
runApp()
