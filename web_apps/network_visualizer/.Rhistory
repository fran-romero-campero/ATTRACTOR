draw.tf <- TRUE
} else if (current.regulation == -1)
{
point.color <- repressor.color # "firebrick1"
arrow.angle <- 90
draw.tf <- TRUE
} else if (current.regulation == 2)
{
point.color <- neutral.color
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == 0)
{
draw.tf <- FALSE
}
if(draw.tf)
{
arrows(x0 = current.time.point, y0 = height.to.multiply[current.tf.zt],
x1 = current.time.point ,y1= extended.gene.expression.values[current.tf.zts[j]] + 0.3,lwd=4,angle=arrow.angle,length=0.05,col=point.color)
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=4, col=point.color, pch = 19)
text(x = current.time.point,y=height.to.multiply[current.tf.zt],labels = current.tf.name, cex=1.2, font=2 )
}
}
}
current.tf.name <- names(selected.tfs.agi[i])
i
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
current.tf.zts
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
current.time.point
current.tf.zt
regulation.matrix
target.agi
current.tf.zt
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
selected.tfs.agi
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
selected.tfs.agi
selected.tfs.agi <- agis[sel.tfs]
sel.tfs <- c("LHY","CRY2","PIF3","PHYA","PHYB","ELF3","FHY1","ELF4","PIF4","PRR9","CCA1","LUX","PIF5","PRR7","PRR5","TOC1")
selected.tfs.agi <- agis[sel.tfs]
selected.tfs.agi
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
runApp()
i
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
j
current.regulation == 1
point.color <- activator.color #"seagreen3"#"darkgreen"
arrow.angle <- 45
draw.tf <- TRUE
draw.tf
arrows(x0 = current.time.point, y0 = height.to.multiply[current.tf.zt],
x1 = current.time.point ,y1= extended.gene.expression.values[current.tf.zts[j]] + 0.3,lwd=4,angle=arrow.angle,length=0.05,col=point.color)
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=4, col=point.color, pch = 19)
text(x = current.time.point,y=height.to.multiply[current.tf.zt],labels = current.tf.name, cex=1.2, font=2 )
selected.tfs.agi
for(i in 1:length(selected.tfs.agi))
{
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
# current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
for(j in 1:length(current.tf.zts))
{
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- activator.color #"seagreen3"#"darkgreen"
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == -1)
{
point.color <- repressor.color # "firebrick1"
arrow.angle <- 90
draw.tf <- TRUE
} else if (current.regulation == 2)
{
point.color <- neutral.color
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == 0)
{
draw.tf <- FALSE
}
if(draw.tf)
{
arrows(x0 = current.time.point, y0 = height.to.multiply[current.tf.zt],
x1 = current.time.point ,y1= extended.gene.expression.values[current.tf.zts[j]] + 0.3,lwd=4,angle=arrow.angle,length=0.05,col=point.color)
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=4, col=point.color, pch = 19)
text(x = current.time.point,y=height.to.multiply[current.tf.zt],labels = current.tf.name, cex=1.2, font=2 )
}
}
}
i
selected.tfs.agi[i]
runApp()
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
agi.tfs.zts
current.tf.name
selected.tfs.agi[i]
selected.tfs.agi[i]
agi.tfs.zts[selected.tfs.agi[i]]
selected.tfs.agi
selected.tfs.agi[i]
agi.tfs.zts
## Read graph adjacency matrix
agi.tfs <- c("AT2G46830", "AT1G01060", "AT5G61380", "AT5G24470", "AT5G02810", "AT2G46790","AT1G09570",
"AT2G18790", "AT1G04400", "AT2G37678", "AT3G46640", "AT1G09530", "AT2G43010", "AT3G59060",
"AT2G40080", "AT2G25930")
name.tfs <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
agi.tfs.zts <- list(c("ZT02","ZT14"),
c("ZT02"),c("ZT15"),c("ZT10"),c("ZT12"),c("ZT04"),c("ZT00"),c("ZT00"),
c("ZT08"),c("ZT04"),c("ZT10","ZT12"),c("ZT08"),c("ZT04"),c("ZT04"),
c("ZT10"),c("ZT00","ZT04"))
length(agi.tfs)
length(name.tfs)
length(agi.tfs.zts)
i
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.name
current.tf.zts
selected.tfs.agi[i]
selected.tfs.agi
agis["FHY"]
agis["FHY1"]
alias["AT1G09570"]
alias["AT2G37678"]
I
i
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
current.time.point
current.tf.zts
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
current.tf.zts
selected.tfs.agi[i]]
selected.tfs.agi[i]
agis["FHY1"]
agis["FHY1"] <- "AT2G37678"
alias["AT1G79790"] <- "ATCPFHY1"
i
sel.tfs <- c("LHY","CRY2","PIF3","PHYA","PHYB","ELF3","FHY1","ELF4","PIF4","PRR9","CCA1","LUX","PIF5","PRR7","PRR5","TOC1")
selected.tfs.agi <- agis[sel.tfs]
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
selected.tfs.agi[i]
agi.tfs.zts
current.tf.zts <- agi.tfs.zts[[rownames(adj.matrix.to.represent)[i]]]
current.tf.zts
## Read graph adjacency matrix
agi.tfs <- c("AT2G46830", "AT1G01060", "AT5G61380", "AT5G24470", "AT5G02810", "AT2G46790","AT2G37678",
"AT2G18790", "AT1G04400", "AT2G37678", "AT3G46640", "AT1G09530", "AT2G43010", "AT3G59060",
"AT2G40080", "AT2G25930")
name.tfs <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
agi.tfs.zts <- list(c("ZT02","ZT14"),
c("ZT02"),c("ZT15"),c("ZT10"),c("ZT12"),c("ZT04"),c("ZT00"),c("ZT00"),
c("ZT08"),c("ZT04"),c("ZT10","ZT12"),c("ZT08"),c("ZT04"),c("ZT04"),
c("ZT10"),c("ZT00","ZT04"))
selected.tfs.agi
i
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
agi.tfs.zts
names(agi.tfs.zts) <- agi.tfs
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
target.agi
current.tf.zt
regulation.matrix
selected.tfs.agi[i]]
selected.tfs.agi[i]
agi.tfs.zts
## Read graph adjacency matrix
agi.tfs <- c("AT2G46830", "AT1G01060", "AT5G61380", "AT5G24470", "AT5G02810", "AT2G46790","AT1G09570",
"AT2G18790", "AT1G04400", "AT2G37678", "AT3G46640", "AT1G09530", "AT2G43010", "AT3G59060",
"AT2G40080", "AT2G25930")
name.tfs <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
## Read graph adjacency matrix
agi.tfs <- c("AT2G46830", "AT1G01060", "AT5G61380", "AT5G24470", "AT5G02810", "AT2G46790","AT1G09570",
"AT2G18790", "AT1G04400", "AT2G37678", "AT3G46640", "AT1G09530", "AT2G43010", "AT3G59060",
"AT2G40080", "AT2G25930")
name.tfs <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
agi.tfs.zts <- list(c("ZT02","ZT14"),
c("ZT02"),c("ZT15"),c("ZT10"),c("ZT12"),c("ZT04"),c("ZT00"),c("ZT00"),
c("ZT08"),c("ZT04"),c("ZT10","ZT12"),c("ZT08"),c("ZT04"),c("ZT04"),
c("ZT10"),c("ZT00","ZT04"))
tfs.selectize <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
agi.tfs.zts.multiplicity <- sapply(agi.tfs.zts,length)
names(agi.tfs.zts) <- agi.tfs
names(agi.tfs.zts.multiplicity) <- agi.tfs
names(name.tfs) <- agi.tfs
for(i in 1:length(selected.tfs.agi))
{
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
# current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
for(j in 1:length(current.tf.zts))
{
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- activator.color #"seagreen3"#"darkgreen"
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == -1)
{
point.color <- repressor.color # "firebrick1"
arrow.angle <- 90
draw.tf <- TRUE
} else if (current.regulation == 2)
{
point.color <- neutral.color
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == 0)
{
draw.tf <- FALSE
}
if(draw.tf)
{
arrows(x0 = current.time.point, y0 = height.to.multiply[current.tf.zt],
x1 = current.time.point ,y1= extended.gene.expression.values[current.tf.zts[j]] + 0.3,lwd=4,angle=arrow.angle,length=0.05,col=point.color)
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=4, col=point.color, pch = 19)
text(x = current.time.point,y=height.to.multiply[current.tf.zt],labels = current.tf.name, cex=1.2, font=2 )
}
}
}
polygon(x=c(0,12,12,0),y=c(-2,-2,-2.3,-2.3),lwd=2)
polygon(x=c(12,24,24,12),y=c(-2,-2,-2.3,-2.3),col = "black",lwd=2)
axis(side = 2,at = -2:2,labels = FALSE,lwd=2)
mtext("Normalized Gene Expression",side = 2,line = 1.3,cex = 1.3,at = 0)
axis(side = 1,at=seq(from=0,to=24,by=2),line=-1,las=2,labels = paste("ZT",seq(from=0,to=24,by=2),sep=""),lwd=2)
output$expression <- renderPlot({
target.agi <- strsplit(x = input$target.gene, split = " - ")[[1]][1]
gene.expression <- as.vector(scale(mean.expression[target.agi,]))
gene.expression <- c(gene.expression, gene.expression[1])
extended.gene.expression <- approx(x = seq(from=0,to=24,by=4), y = gene.expression, xout=c(0,2,4,8,10,12,14,15,16,20,24))
extended.gene.expression.values <- extended.gene.expression$y
names(extended.gene.expression.values) <- c("ZT00", "ZT02", "ZT04", "ZT08", "ZT10", "ZT12", "ZT14", "ZT15", "ZT16", "ZT20", "ZT24")
plot(x=seq(from=0,to=24,by=4),gene.expression,
type="o",lwd=5,cex=1.5,
ylim=c(-2.5,height),xlim=c(0,24),
col="darkgrey",axes=FALSE,xlab="",ylab="",
main=paste(target.agi, alias[target.agi],sep=" - "))
## Add TFs to expression profile
if (input$all){
sel.tfs <- c("LHY","CRY2","PIF3","PHYA","PHYB","ELF3","FHY1","ELF4","PIF4","PRR9","CCA1","LUX","PIF5","PRR7","PRR5","TOC1")
selected.tfs.agi <- agis[sel.tfs]
} else {
selected.tfs.agi <- agis[input$selected.tfs]
}
for(i in 1:length(selected.tfs.agi))
{
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
# current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
for(j in 1:length(current.tf.zts))
{
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- activator.color #"seagreen3"#"darkgreen"
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == -1)
{
point.color <- repressor.color # "firebrick1"
arrow.angle <- 90
draw.tf <- TRUE
} else if (current.regulation == 2)
{
point.color <- neutral.color
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == 0)
{
draw.tf <- FALSE
}
if(draw.tf)
{
arrows(x0 = current.time.point, y0 = height.to.multiply[current.tf.zt],
x1 = current.time.point ,y1= extended.gene.expression.values[current.tf.zts[j]] + 0.3,lwd=4,angle=arrow.angle,length=0.05,col=point.color)
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=4, col=point.color, pch = 19)
text(x = current.time.point,y=height.to.multiply[current.tf.zt],labels = current.tf.name, cex=1.2, font=2 )
}
}
}
polygon(x=c(0,12,12,0),y=c(-2,-2,-2.3,-2.3),lwd=2)
polygon(x=c(12,24,24,12),y=c(-2,-2,-2.3,-2.3),col = "black",lwd=2)
axis(side = 2,at = -2:2,labels = FALSE,lwd=2)
mtext("Normalized Gene Expression",side = 2,line = 1.3,cex = 1.3,at = 0)
axis(side = 1,at=seq(from=0,to=24,by=2),line=-1,las=2,labels = paste("ZT",seq(from=0,to=24,by=2),sep=""),lwd=2)
}, height = 600)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
network.data
setwd("~/Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer")
## Read graph adjacency matrix
network.data <- read.table(file="../attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
head(network.data)
network.data["AT3G17609",]
target.agi <- "AT3G17609"
network.data[target.agi,] == NA
is.na(network.data[target.agi,]
)
runApp()
runApp()
target.agi
runApp()
is.na(network.data[target.agi,]
)
is.na(network.data[target.agi,])
is.na(network.data[target.agi,]) == TRUE
runApp()
runApp()
network.data[target.agi,]
runApp()
runApp()
runApp()
runApp()
network.data[target.agi,] == TRUE
network.data[target.agi,] != NA
runApp()
runApp()
sum(network.data[target.agi,]) >= 0
sum(network.data[target.agi,])
network.data[target.agi,]
is.na(network.data[target.agi,])
runApp()
runApp()
rownames(network.data)
head(network.data)
runApp()
runApp()
target.agi %in% network.data$names
runApp()
runApp()
runApp()
(target.agi %in% network.data$names) == TRUE
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
target.agi %in% network.data$names
runApp()
"AT2G31400" %in% network.data$names
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes/app.1.R')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes/app.1.R')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes/app.1.R')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes/app.1.R')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes/app.1.R')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes/app.1.R')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes/app.1.R')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes/app.1.R')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes/app.1.R')
setwd("~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes")
library(ChIPpeakAnno)
library(rtracklayer)
library(TxDb.Athaliana.BioMart.plantsmart28)
library(Biostrings)
library(seqinr)
library(org.At.tair.db)
##Load the network data
network.data <- read.table(file="data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
## Extract gene ids
genes <- sort(network.data$name)
length(genes)
## Load all and circadian genes
my.key <- keys(org.At.tair.db, keytype="ENTREZID")
my.col <- c("SYMBOL", "TAIR")
alias2symbol.table <- AnnotationDbi::select(org.At.tair.db, keys=my.key, columns=my.col, keytype="ENTREZID")
alias2symbol.table <- subset(alias2symbol.table, genes %in% TAIR)
alias <- alias2symbol.table$SYMBOL
names(alias) <- alias2symbol.table$TAIR
alias[is.na(alias)] <- ""
genes.selectize <- paste(names(alias), alias, sep=" - ")
length(genes.selectize)
alias
alias <- alias[genes]
genes.selectize <- paste(names(alias), alias, sep=" - ")
length(genes.selectize)
circadian.genes <- read.table(file="data/genes_info/gene_info.txt",header=FALSE,col.names = c("gene.name","symbol"),fill = TRUE,as.is=TRUE)
circadian.genes
nrow(circadian.genes)
runApp('app.1.R')
runApp('app.1.R')
runApp('app.1.R')
runApp('app.1.R')
runApp('app.1.R')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
setwd("~/Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer")
library(shiny)
library(org.At.tair.db)
library(igraph)
## Colors used to represent repression/activation/neutrality
repressor.color <- "firebrick1"
activator.color <- "seagreen3"
neutral.color <- "lightgrey"
## Auxiliary function to determine surronding ZTs
zts.to.consider <- function(zt.point)
{
zts <- c("ZT00","ZT04","ZT08","ZT12","ZT16","ZT20")
zts.numeric <- seq(from=0,to=20,by=4)
if(zt.point %in% zts.numeric)
{
return(c(zt.point,zt.point))
} else
{
#current.zt.numeric <- as.numeric(substr(zt.point,start=3,stop=nchar(current.regulator.zt)))
next.zt <- zts.numeric[which(zts.numeric >= zt.point)[1]]
previous.zt <- zts.numeric[which(zts.numeric >= zt.point)[1] - 1]
return(c(previous.zt, next.zt))
}
}
##Parameters
radius.1 <- 100 #Outer circle radius
height <- 4 ## highest point in ylim for profile plot
## Read graph adjacency matrix
network.data <- read.table(file="../attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
# columns(org.At.tair.db)
## Extract gene ids
genes <- sort(network.data$name)
## Load all and circadian genes
alias2symbol.table <- AnnotationDbi::select(org.At.tair.db,
keys=keys(org.At.tair.db, keytype="ENTREZID "),
columns=c("SYMBOL", "TAIR"), keytype="ENTREZID")
## Load all and circadian genes
alias2symbol.table <- AnnotationDbi::select(org.At.tair.db,
keys=keys(org.At.tair.db, keytype="ENTREZID"),
columns=c("SYMBOL", "TAIR"), keytype="ENTREZID")
runApp()
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp()
runApp()
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/individual_genes')
