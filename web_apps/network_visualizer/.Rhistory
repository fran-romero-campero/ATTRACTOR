{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/ChlamyNET')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
library(org.At.tair.db)
library(igraph)
##Parameters
radius.1 <- 100 #Outer circle radius
## Read graph adjacency matrix
network.data <- read.table(file="../attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
setwd("~/Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer")
## Read graph adjacency matrix
network.data <- read.table(file="../attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
# columns(org.At.tair.db)
## Extract gene ids
genes <- sort(network.data$name)
## Load all and circadian genes
my.key <- keys(org.At.tair.db, keytype="ENTREZID")
my.col <- c("SYMBOL", "TAIR")
alias2symbol.table <- select(org.At.tair.db, keys=my.key, columns=my.col, keytype="ENTREZID")
alias2symbol.table <- subset(alias2symbol.table, genes %in% TAIR)
alias <- alias2symbol.table$SYMBOL
names(alias) <- alias2symbol.table$TAIR
alias[is.na(alias)] <- ""
genes <- paste(names(alias), alias, sep=" - ")
agis <-alias2symbol.table$TAIR
names(agis) <- alias2symbol.table$SYMBOL
agis[is.na(agis)] <- ""
##Functions
#Function for radian conversion
radian.conversion <- function(alpha)
{
rad <- (alpha*pi/180)
return(rad)
}
## Draw a circle and plot it
angle <- seq(from=0, to=2*pi, by=0.01)
x.circle.1 <- radius.1*sin(angle)
y.circle.1 <- radius.1*cos(angle)
radius.2 <- radius.1 - radius.1/12
x.circle.2 <- radius.2 * sin(angle)
y.circle.2 <- radius.2 * cos(angle)
## Read graph adjacency matrix
agi.tfs <- c("AT2G46830", "AT1G01060", "AT5G61380", "AT5G24470", "AT5G02810", "AT2G46790","AT1G09570",
"AT2G18790", "AT1G04400", "AT2G37678", "AT3G46640", "AT1G09530", "AT2G43010", "AT3G59060",
"AT2G40080", "AT2G25930")
name.tfs <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
agi.tfs.zts <- list(c("ZT02","ZT14"),
c("ZT02"),c("ZT15"),c("ZT10"),c("ZT12"),c("ZT04"),c("ZT00"),c("ZT00"),
c("ZT08"),c("ZT04"),c("ZT10","ZT12"),c("ZT08"),c("ZT04"),c("ZT04"),
c("ZT10"),c("ZT00","ZT04"))
tfs.selectize <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
agi.tfs.zts.multiplicity <- sapply(agi.tfs.zts,length)
names(agi.tfs.zts) <- agi.tfs
names(agi.tfs.zts.multiplicity) <- agi.tfs
names(name.tfs) <- agi.tfs
regulation.matrix <- as.matrix(network.data[,35:53])
mean.expression <- as.matrix(network.data[,29:34])
rownames(mean.expression) <- network.data$names
tfs.names <- colnames(adj.global.matrix)
splitted.tfs.names <- strsplit(tfs.names,split="_")
tfs.angles <- vector(mode="numeric",length=length(tfs.names))
tfs.zts <- vector(mode="numeric",length=length(tfs.names))
for(i in 1:length(splitted.tfs.names))
tfs.names <- colnames(adj.global.matrix)
adj.global.matrix <- as.matrix(network.data[,35:53])
rownames(adj.global.matrix) <- network.data$names
tfs.names <- colnames(adj.global.matrix)
splitted.tfs.names <- strsplit(tfs.names,split="_")
tfs.angles <- vector(mode="numeric",length=length(tfs.names))
tfs.zts <- vector(mode="numeric",length=length(tfs.names))
for(i in 1:length(splitted.tfs.names))
{
tfs.angles[i] <- radian.conversion(15*as.numeric(substr(x=splitted.tfs.names[i][[1]][2],start = 3,stop=nchar(splitted.tfs.names[i][[1]][2]))))
tfs.zts[i] <- substr(x=splitted.tfs.names[i][[1]][2],start = 3,stop=nchar(splitted.tfs.names[i][[1]][2]))
}
zt.multiplicity <- table(tfs.zts)
radius.to.multiply <- vector(mode="numeric",length=length(splitted.tfs.names))
node.labels <- vector(mode="numeric",length=length(splitted.tfs.names))
for(i in 1:length(splitted.tfs.names))
{
node.labels[i] <- splitted.tfs.names[i][[1]][1]
current.zt <- substr(x=splitted.tfs.names[i][[1]][2],start=3,stop=nchar(splitted.tfs.names[i][[1]][2]))
current.multiplicity <- zt.multiplicity[current.zt]
radius.to.multiply[i] <- (1 - (0.16*current.multiplicity))*radius.1
zt.multiplicity[current.zt] <- zt.multiplicity[current.zt] - 1
}
#Set the x.y coordinates for the positions
tfs.x <- radius.to.multiply * sin(tfs.angles)
tfs.y <- radius.to.multiply * cos(tfs.angles)
#Generatin a positions matrix
matrix.pos <- matrix(data = c(tfs.x, tfs.y), nrow = length(tfs.x), ncol = 2)
selected.colors <- c("blue4","blue","deepskyblue","gold","firebrick","gray47")
peak.times <- c("peak20","peak0","peak4","peak8","peak12","peak16")
names(selected.colors) <- peak.times
target.agi <- "AT1G22770"
gene.expression <- as.vector(scale(mean.expression[target.agi,]))
gene.expression <- c(gene.expression, gene.expression[1])
plot(x=seq(from=0,to=24,by=4),gene.expression,
type="o",lwd=5,cex=1.5,
ylim=c(-2.5,3),xlim=c(0,24),
col="darkgreen",axes=FALSE,xlab="",ylab="",
main=paste(target.agi, alias[target.agi],sep=" - "))
selected.tfs.agi
input <- list(selected.tfs = c("CCA1", "LHY", "TOC1"))
selected.tfs.agi <- agis[input$selected.tfs]
## Add TFs to expression profile
i <- 1
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
current.time.points
j <- 1
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.time.point
paste(current.tf.name,current.tf.zts[j],sep="_")
regulation.matrix[target.agi,]
target.agi
regulation.matrix
regulation.matrix <- as.matrix(network.data[,35:53])
rownames(regulation.matrix) <- network.data$names
regulation.matrix[target.agi,]
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
regulation.matrix[target.agi,current.tf.zt]
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
points(x = current.time.point,y=3,lwd=4,cex=3, col=point.color)
if(current.regulation == 1)
{
point.color <- "darkgreen"
} else if (current.regulation == -1)
{
point.color <- "darkred"
}
points(x = current.time.point,y=3,lwd=4,cex=3, col=point.color)
j <- 2
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- "darkgreen"
} else if (current.regulation == -1)
{
point.color <- "darkred"
}
points(x = current.time.point,y=3,lwd=4,cex=3, col=point.color)
current.tf.zts
## Add TFs to expression profile
i <- 2
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
j <- 2
for(j in 1:length(current.tf.zts))
{
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- "darkgreen"
} else if (current.regulation == -1)
{
point.color <- "darkred"
}
points(x = current.time.point,y=3,lwd=4,cex=3, col=point.color)
}
## Add TFs to expression profile
i <- 2
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
## Add TFs to expression profile
i <- 3
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
for(j in 1:length(current.tf.zts))
{
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- "darkgreen"
} else if (current.regulation == -1)
{
point.color <- "darkred"
}
points(x = current.time.point,y=3,lwd=4,cex=3, col=point.color)
}
polygon(x=c(0,12,12,0),y=c(-2,-2,-2.3,-2.3),lwd=2)
polygon(x=c(12,24,24,12),y=c(-2,-2,-2.3,-2.3),col = "black",lwd=2)
## Add TFs to expression profile
i <- 1
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
zt.multiplicity
zt.multiplicity <- table(tfs.zts)
zt.multiplicity
radius.to.multiply <- vector(mode="numeric",length=length(splitted.tfs.names))
height.to.multiply <- vector(mode="numeric",length=length(splitted.tfs.names))
node.labels <- vector(mode="numeric",length=length(splitted.tfs.names))
node.labels
height <- 5 ## highest point in ylim for profile plot
plot(x=seq(from=0,to=24,by=4),gene.expression,
type="o",lwd=5,cex=1.5,
ylim=c(-2.5,height),xlim=c(0,24),
col="darkgreen",axes=FALSE,xlab="",ylab="",
main=paste(target.agi, alias[target.agi],sep=" - "))
radius.to.multiply <- vector(mode="numeric",length=length(splitted.tfs.names))
height.to.multiply <- vector(mode="numeric",length=length(splitted.tfs.names))
node.labels <- vector(mode="numeric",length=length(splitted.tfs.names))
for(i in 1:length(splitted.tfs.names))
{
node.labels[i] <- splitted.tfs.names[i][[1]][1]
current.zt <- substr(x=splitted.tfs.names[i][[1]][2],start=3,stop=nchar(splitted.tfs.names[i][[1]][2]))
current.multiplicity <- zt.multiplicity[current.zt]
radius.to.multiply[i] <- (1 - (0.16*current.multiplicity))*radius.1
height.to.multiply[i] <- (1 - (0.16*current.multiplicity))*height
zt.multiplicity[current.zt] <- zt.multiplicity[current.zt] - 1
}
height.to.multiply
tfs.names
names(height.to.multiply) <- tfs.names
## Add TFs to expression profile
i <- 1
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
current.tf.name
current.tf.zts
current.time.points
j <- 1
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
current.time.point
current.tf.zt
current.regulation
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=3, col=point.color)
## Add TFs to expression profile
for(i in 1:length(selected.tfs.agi))
{
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
j <- 1
for(j in 1:length(current.tf.zts))
{
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- "darkgreen"
} else if (current.regulation == -1)
{
point.color <- "darkred"
}
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=3, col=point.color)
}
}
shiny::runApp()
runApp()
runApp()
runApp()
