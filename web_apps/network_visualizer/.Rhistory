target.agi
adj.global.matrix[target.agi,to.keep]
to.keep
runApp()
runApp()
target.agi <- "AT1G22770"
updated.adj.matrix.to.represent <- rbind(updated.adj.matrix.to.represent,adj.global.matrix[target.agi,to.keep])
updated.adj.matrix.to.represent <- cbind(updated.adj.matrix.to.represent,rep(0,nrow(updated.adj.matrix.to.represent)))
#Modify adj.matrix and matrix.pos to add the target.gene
gene.peak.str <- subset(network.data, names == target.agi)$peak.zt
gene.peak <- as.numeric(substr(x=gene.peak.str,start=5,stop=nchar(gene.peak.str)))
target.color <- selected.colors[paste0("peak",gene.peak)]
if (input$interactions == "Yes")
{
#To show the interactions between the TFs too
#new.matrix <- cbind(tf.adj.matrix, gene.row)
#new.matrix <- rbind(new.matrix, rep(0,ncol(new.matrix)))
new.matrix <- t(updated.adj.matrix.to.represent)
} else {
#To show only the interactions between the TFs and the selected gene.
number.tfs <- nrow(updated.adj.matrix.to.represent) - 1
new.matrix <- updated.adj.matrix.to.represent
new.matrix[1:number.tfs,] <- 0
colnames(new.matrix)[number.tfs+1] <- alias[target.agi]
rownames(new.matrix)[number.tfs+1] <- alias[target.agi]
new.matrix <- t(new.matrix)
# rownames.matrix <- row.names(adj.matrix)
# null.matrix <- matrix(data = rep(x = 0, times=length(rownames.matrix)^2),
#                       byrow = TRUE, ncol = length(rownames.matrix), nrow = length(rownames.matrix))
# rownames(null.matrix) <- rownames.matrix
# colnames(null.matrix) <- rownames.matrix
# new.matrix <- cbind(null.matrix, gene.row)
# new.matrix <- rbind(new.matrix, rep(0,ncol(new.matrix)))
}
#To show only the interactions between the TFs and the selected gene.
number.tfs <- nrow(updated.adj.matrix.to.represent) - 1
new.matrix <- updated.adj.matrix.to.represent
new.matrix[1:number.tfs,] <- 0
colnames(new.matrix)[number.tfs+1] <- alias[target.agi]
alias[target.agi]
colnames(new.matrix)
colnames(new.matrix)[number.tfs+1]
colnames(new.matrix)[number.tfs+1] <- alias[target.agi]
colnames(new.matrix)[number.tfs+1]
alias[target.agi]
colnames(new.matrix)[number.tfs+1] <- "HOLA"
rownames(new.matrix)[number.tfs+1] <- alias[target.agi]
rownames(new.matrix)[number.tfs+1]
olnames(new.matrix)[number.tfs+1]
colnames(new.matrix)[number.tfs+1]
rownames(new.matrix)[number.tfs+1]
#To show only the interactions between the TFs and the selected gene.
number.tfs <- nrow(updated.adj.matrix.to.represent) - 1
new.matrix <- updated.adj.matrix.to.represent
new.matrix
# if(nrow(adj.matrix.to.represent) > 0)
# {
#   print("hey hey")
for(i in 1:nrow(adj.matrix.to.represent))
{
current.tf.name <- name.tfs[rownames(adj.matrix.to.represent)[i]]
current.tf.zts <- agi.tfs.zts[[rownames(adj.matrix.to.represent)[i]]]
current.tf.name.zt <- paste(current.tf.name,current.tf.zts,sep="_")
new.row.names <- c(new.row.names,current.tf.name.zt)
if(length(current.tf.zts) > 1)
{
updated.adj.matrix.to.represent <- rbind(
rbind(updated.adj.matrix.to.represent,
adj.matrix.to.represent[i,]),
adj.matrix.to.represent[i,])
} else
{
updated.adj.matrix.to.represent <- rbind(updated.adj.matrix.to.represent,
adj.matrix.to.represent[i,])
}
}
rownames(updated.adj.matrix.to.represent) <- new.row.names
updated.adj.matrix.to.represent <- c()
# if(nrow(adj.matrix.to.represent) > 0)
# {
#   print("hey hey")
for(i in 1:nrow(adj.matrix.to.represent))
{
current.tf.name <- name.tfs[rownames(adj.matrix.to.represent)[i]]
current.tf.zts <- agi.tfs.zts[[rownames(adj.matrix.to.represent)[i]]]
current.tf.name.zt <- paste(current.tf.name,current.tf.zts,sep="_")
new.row.names <- c(new.row.names,current.tf.name.zt)
if(length(current.tf.zts) > 1)
{
updated.adj.matrix.to.represent <- rbind(
rbind(updated.adj.matrix.to.represent,
adj.matrix.to.represent[i,]),
adj.matrix.to.represent[i,])
} else
{
updated.adj.matrix.to.represent <- rbind(updated.adj.matrix.to.represent,
adj.matrix.to.represent[i,])
}
}
rownames(updated.adj.matrix.to.represent) <- new.row.names
updated.adj.matrix.to.represent
new.row.names
rownames(updated.adj.matrix.to.represent) <- new.row.names
sel.tfs <- c("LHY1","CRY2","PIF3","PHYA","PHYB","ELF3","FHY1","ELF4","PIF4","PRR9","CCA1","LUX","PIF5","PRR7","PRR5","TOC1")
to.keep <- rep(TRUE,ncol(adj.global.matrix))
selected.tfs.agi <- agis[sel.tfs]
##First, modify the adj matrix to keep only the selected tfs marked in the app
adj.matrix.to.represent <- as.matrix(adj.global.matrix[selected.tfs.agi,to.keep])
if(nrow(adj.matrix.to.represent) == 1)
{
rownames(adj.matrix.to.represent) <- selected.tfs.agi
colnames(adj.matrix.to.represent) <- colnames(adj.global.matrix)[to.keep]
}
new.row.names <- c()
updated.adj.matrix.to.represent <- c()
# if(nrow(adj.matrix.to.represent) > 0)
# {
#   print("hey hey")
for(i in 1:nrow(adj.matrix.to.represent))
{
current.tf.name <- name.tfs[rownames(adj.matrix.to.represent)[i]]
current.tf.zts <- agi.tfs.zts[[rownames(adj.matrix.to.represent)[i]]]
current.tf.name.zt <- paste(current.tf.name,current.tf.zts,sep="_")
new.row.names <- c(new.row.names,current.tf.name.zt)
if(length(current.tf.zts) > 1)
{
updated.adj.matrix.to.represent <- rbind(
rbind(updated.adj.matrix.to.represent,
adj.matrix.to.represent[i,]),
adj.matrix.to.represent[i,])
} else
{
updated.adj.matrix.to.represent <- rbind(updated.adj.matrix.to.represent,
adj.matrix.to.represent[i,])
}
}
rownames(updated.adj.matrix.to.represent) <- new.row.names
updated.adj.matrix.to.represent <- rbind(updated.adj.matrix.to.represent,adj.global.matrix[target.agi,to.keep])
updated.adj.matrix.to.represent <- cbind(updated.adj.matrix.to.represent,rep(0,nrow(updated.adj.matrix.to.represent)))
updated.adj.matrix.to.represent
#Modify adj.matrix and matrix.pos to add the target.gene
gene.peak.str <- subset(network.data, names == target.agi)$peak.zt
gene.peak <- as.numeric(substr(x=gene.peak.str,start=5,stop=nchar(gene.peak.str)))
target.color <- selected.colors[paste0("peak",gene.peak)]
#To show only the interactions between the TFs and the selected gene.
number.tfs <- nrow(updated.adj.matrix.to.represent) - 1
new.matrix <- updated.adj.matrix.to.represent
new.matrix[1:number.tfs,] <- 0
colnames(new.matrix)[number.tfs+1] <- alias[target.agi]
rownames(new.matrix)[number.tfs+1] <- alias[target.agi]
new.matrix <- t(new.matrix)
new.matrix
gene.expression <- as.vector(scale(mean.expression[target.agi,]))
gene.expression
gene.expression <- c(gene.expression, gene.expression[1])
extended.gene.expression <- approx(x = seq(from=0,to=24,by=4), y = gene.expression, xout=c(0,2,4,8,10,12,14,15,16,20,24))
extended.gene.expression.values <- extended.gene.expression$y
names(extended.gene.expression.values) <- c("ZT00", "ZT02", "ZT04", "ZT08", "ZT10", "ZT12", "ZT14", "ZT15", "ZT16", "ZT20", "ZT24")
plot(x=seq(from=0,to=24,by=4),gene.expression,
type="o",lwd=5,cex=1.5,
ylim=c(-2.5,height),xlim=c(0,24),
col="darkgrey",axes=FALSE,xlab="",ylab="",
main=paste(target.agi, alias[target.agi],sep=" - "))
runApp()
agis[sel.tfs]
for(i in 1:length(selected.tfs.agi))
{
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
# current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
for(j in 1:length(current.tf.zts))
{
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- activator.color #"seagreen3"#"darkgreen"
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == -1)
{
point.color <- repressor.color # "firebrick1"
arrow.angle <- 90
draw.tf <- TRUE
} else if (current.regulation == 2)
{
point.color <- neutral.color
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == 0)
{
draw.tf <- FALSE
}
if(draw.tf)
{
arrows(x0 = current.time.point, y0 = height.to.multiply[current.tf.zt],
x1 = current.time.point ,y1= extended.gene.expression.values[current.tf.zts[j]] + 0.3,lwd=4,angle=arrow.angle,length=0.05,col=point.color)
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=4, col=point.color, pch = 19)
text(x = current.time.point,y=height.to.multiply[current.tf.zt],labels = current.tf.name, cex=1.2, font=2 )
}
}
}
current.tf.name <- names(selected.tfs.agi[i])
i
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
current.tf.zts
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
current.time.point
current.tf.zt
regulation.matrix
target.agi
current.tf.zt
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
selected.tfs.agi
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
selected.tfs.agi
selected.tfs.agi <- agis[sel.tfs]
sel.tfs <- c("LHY","CRY2","PIF3","PHYA","PHYB","ELF3","FHY1","ELF4","PIF4","PRR9","CCA1","LUX","PIF5","PRR7","PRR5","TOC1")
selected.tfs.agi <- agis[sel.tfs]
selected.tfs.agi
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
runApp()
i
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
j
current.regulation == 1
point.color <- activator.color #"seagreen3"#"darkgreen"
arrow.angle <- 45
draw.tf <- TRUE
draw.tf
arrows(x0 = current.time.point, y0 = height.to.multiply[current.tf.zt],
x1 = current.time.point ,y1= extended.gene.expression.values[current.tf.zts[j]] + 0.3,lwd=4,angle=arrow.angle,length=0.05,col=point.color)
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=4, col=point.color, pch = 19)
text(x = current.time.point,y=height.to.multiply[current.tf.zt],labels = current.tf.name, cex=1.2, font=2 )
selected.tfs.agi
for(i in 1:length(selected.tfs.agi))
{
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
# current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
for(j in 1:length(current.tf.zts))
{
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- activator.color #"seagreen3"#"darkgreen"
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == -1)
{
point.color <- repressor.color # "firebrick1"
arrow.angle <- 90
draw.tf <- TRUE
} else if (current.regulation == 2)
{
point.color <- neutral.color
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == 0)
{
draw.tf <- FALSE
}
if(draw.tf)
{
arrows(x0 = current.time.point, y0 = height.to.multiply[current.tf.zt],
x1 = current.time.point ,y1= extended.gene.expression.values[current.tf.zts[j]] + 0.3,lwd=4,angle=arrow.angle,length=0.05,col=point.color)
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=4, col=point.color, pch = 19)
text(x = current.time.point,y=height.to.multiply[current.tf.zt],labels = current.tf.name, cex=1.2, font=2 )
}
}
}
i
selected.tfs.agi[i]
runApp()
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
agi.tfs.zts
current.tf.name
selected.tfs.agi[i]
selected.tfs.agi[i]
agi.tfs.zts[selected.tfs.agi[i]]
selected.tfs.agi
selected.tfs.agi[i]
agi.tfs.zts
## Read graph adjacency matrix
agi.tfs <- c("AT2G46830", "AT1G01060", "AT5G61380", "AT5G24470", "AT5G02810", "AT2G46790","AT1G09570",
"AT2G18790", "AT1G04400", "AT2G37678", "AT3G46640", "AT1G09530", "AT2G43010", "AT3G59060",
"AT2G40080", "AT2G25930")
name.tfs <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
agi.tfs.zts <- list(c("ZT02","ZT14"),
c("ZT02"),c("ZT15"),c("ZT10"),c("ZT12"),c("ZT04"),c("ZT00"),c("ZT00"),
c("ZT08"),c("ZT04"),c("ZT10","ZT12"),c("ZT08"),c("ZT04"),c("ZT04"),
c("ZT10"),c("ZT00","ZT04"))
length(agi.tfs)
length(name.tfs)
length(agi.tfs.zts)
i
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.name
current.tf.zts
selected.tfs.agi[i]
selected.tfs.agi
agis["FHY"]
agis["FHY1"]
alias["AT1G09570"]
alias["AT2G37678"]
I
i
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
current.time.point
current.tf.zts
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
current.tf.zts
selected.tfs.agi[i]]
selected.tfs.agi[i]
agis["FHY1"]
agis["FHY1"] <- "AT2G37678"
alias["AT1G79790"] <- "ATCPFHY1"
i
sel.tfs <- c("LHY","CRY2","PIF3","PHYA","PHYB","ELF3","FHY1","ELF4","PIF4","PRR9","CCA1","LUX","PIF5","PRR7","PRR5","TOC1")
selected.tfs.agi <- agis[sel.tfs]
current.tf.name <- names(selected.tfs.agi[i])
current.tf.name
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
selected.tfs.agi[i]
agi.tfs.zts
current.tf.zts <- agi.tfs.zts[[rownames(adj.matrix.to.represent)[i]]]
current.tf.zts
## Read graph adjacency matrix
agi.tfs <- c("AT2G46830", "AT1G01060", "AT5G61380", "AT5G24470", "AT5G02810", "AT2G46790","AT2G37678",
"AT2G18790", "AT1G04400", "AT2G37678", "AT3G46640", "AT1G09530", "AT2G43010", "AT3G59060",
"AT2G40080", "AT2G25930")
name.tfs <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
agi.tfs.zts <- list(c("ZT02","ZT14"),
c("ZT02"),c("ZT15"),c("ZT10"),c("ZT12"),c("ZT04"),c("ZT00"),c("ZT00"),
c("ZT08"),c("ZT04"),c("ZT10","ZT12"),c("ZT08"),c("ZT04"),c("ZT04"),
c("ZT10"),c("ZT00","ZT04"))
selected.tfs.agi
i
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
agi.tfs.zts
names(agi.tfs.zts) <- agi.tfs
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
current.tf.zts
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
target.agi
current.tf.zt
regulation.matrix
selected.tfs.agi[i]]
selected.tfs.agi[i]
agi.tfs.zts
## Read graph adjacency matrix
agi.tfs <- c("AT2G46830", "AT1G01060", "AT5G61380", "AT5G24470", "AT5G02810", "AT2G46790","AT1G09570",
"AT2G18790", "AT1G04400", "AT2G37678", "AT3G46640", "AT1G09530", "AT2G43010", "AT3G59060",
"AT2G40080", "AT2G25930")
name.tfs <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
## Read graph adjacency matrix
agi.tfs <- c("AT2G46830", "AT1G01060", "AT5G61380", "AT5G24470", "AT5G02810", "AT2G46790","AT1G09570",
"AT2G18790", "AT1G04400", "AT2G37678", "AT3G46640", "AT1G09530", "AT2G43010", "AT3G59060",
"AT2G40080", "AT2G25930")
name.tfs <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
agi.tfs.zts <- list(c("ZT02","ZT14"),
c("ZT02"),c("ZT15"),c("ZT10"),c("ZT12"),c("ZT04"),c("ZT00"),c("ZT00"),
c("ZT08"),c("ZT04"),c("ZT10","ZT12"),c("ZT08"),c("ZT04"),c("ZT04"),
c("ZT10"),c("ZT00","ZT04"))
tfs.selectize <- c("CCA1", "LHY",  "TOC1", "PRR5", "PRR7", "PRR9", "PHYA", "PHYB", "CRY2", "FHY1", "LUX", "PIF3",
"PIF4", "PIF5", "ELF4", "ELF3")
agi.tfs.zts.multiplicity <- sapply(agi.tfs.zts,length)
names(agi.tfs.zts) <- agi.tfs
names(agi.tfs.zts.multiplicity) <- agi.tfs
names(name.tfs) <- agi.tfs
for(i in 1:length(selected.tfs.agi))
{
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
# current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
for(j in 1:length(current.tf.zts))
{
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- activator.color #"seagreen3"#"darkgreen"
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == -1)
{
point.color <- repressor.color # "firebrick1"
arrow.angle <- 90
draw.tf <- TRUE
} else if (current.regulation == 2)
{
point.color <- neutral.color
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == 0)
{
draw.tf <- FALSE
}
if(draw.tf)
{
arrows(x0 = current.time.point, y0 = height.to.multiply[current.tf.zt],
x1 = current.time.point ,y1= extended.gene.expression.values[current.tf.zts[j]] + 0.3,lwd=4,angle=arrow.angle,length=0.05,col=point.color)
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=4, col=point.color, pch = 19)
text(x = current.time.point,y=height.to.multiply[current.tf.zt],labels = current.tf.name, cex=1.2, font=2 )
}
}
}
polygon(x=c(0,12,12,0),y=c(-2,-2,-2.3,-2.3),lwd=2)
polygon(x=c(12,24,24,12),y=c(-2,-2,-2.3,-2.3),col = "black",lwd=2)
axis(side = 2,at = -2:2,labels = FALSE,lwd=2)
mtext("Normalized Gene Expression",side = 2,line = 1.3,cex = 1.3,at = 0)
axis(side = 1,at=seq(from=0,to=24,by=2),line=-1,las=2,labels = paste("ZT",seq(from=0,to=24,by=2),sep=""),lwd=2)
output$expression <- renderPlot({
target.agi <- strsplit(x = input$target.gene, split = " - ")[[1]][1]
gene.expression <- as.vector(scale(mean.expression[target.agi,]))
gene.expression <- c(gene.expression, gene.expression[1])
extended.gene.expression <- approx(x = seq(from=0,to=24,by=4), y = gene.expression, xout=c(0,2,4,8,10,12,14,15,16,20,24))
extended.gene.expression.values <- extended.gene.expression$y
names(extended.gene.expression.values) <- c("ZT00", "ZT02", "ZT04", "ZT08", "ZT10", "ZT12", "ZT14", "ZT15", "ZT16", "ZT20", "ZT24")
plot(x=seq(from=0,to=24,by=4),gene.expression,
type="o",lwd=5,cex=1.5,
ylim=c(-2.5,height),xlim=c(0,24),
col="darkgrey",axes=FALSE,xlab="",ylab="",
main=paste(target.agi, alias[target.agi],sep=" - "))
## Add TFs to expression profile
if (input$all){
sel.tfs <- c("LHY","CRY2","PIF3","PHYA","PHYB","ELF3","FHY1","ELF4","PIF4","PRR9","CCA1","LUX","PIF5","PRR7","PRR5","TOC1")
selected.tfs.agi <- agis[sel.tfs]
} else {
selected.tfs.agi <- agis[input$selected.tfs]
}
for(i in 1:length(selected.tfs.agi))
{
current.tf.name <- names(selected.tfs.agi[i])
current.tf.zts <- agi.tfs.zts[selected.tfs.agi[i]][[1]]
# current.time.points <- vector(mode="numeric",length=length(current.tf.zts))
for(j in 1:length(current.tf.zts))
{
current.time.point <- as.numeric(substr(x = current.tf.zts[j], start = 3, stop = nchar(current.tf.zts[j])))
current.tf.zt <- paste(current.tf.name,current.tf.zts[j],sep="_")
current.regulation <- regulation.matrix[target.agi,current.tf.zt]
if(current.regulation == 1)
{
point.color <- activator.color #"seagreen3"#"darkgreen"
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == -1)
{
point.color <- repressor.color # "firebrick1"
arrow.angle <- 90
draw.tf <- TRUE
} else if (current.regulation == 2)
{
point.color <- neutral.color
arrow.angle <- 45
draw.tf <- TRUE
} else if (current.regulation == 0)
{
draw.tf <- FALSE
}
if(draw.tf)
{
arrows(x0 = current.time.point, y0 = height.to.multiply[current.tf.zt],
x1 = current.time.point ,y1= extended.gene.expression.values[current.tf.zts[j]] + 0.3,lwd=4,angle=arrow.angle,length=0.05,col=point.color)
points(x = current.time.point,y=height.to.multiply[current.tf.zt],lwd=4,cex=4, col=point.color, pch = 19)
text(x = current.time.point,y=height.to.multiply[current.tf.zt],labels = current.tf.name, cex=1.2, font=2 )
}
}
}
polygon(x=c(0,12,12,0),y=c(-2,-2,-2.3,-2.3),lwd=2)
polygon(x=c(12,24,24,12),y=c(-2,-2,-2.3,-2.3),col = "black",lwd=2)
axis(side = 2,at = -2:2,labels = FALSE,lwd=2)
mtext("Normalized Gene Expression",side = 2,line = 1.3,cex = 1.3,at = 0)
axis(side = 1,at=seq(from=0,to=24,by=2),line=-1,las=2,labels = paste("ZT",seq(from=0,to=24,by=2),sep=""),lwd=2)
}, height = 600)
runApp()
