i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time || hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
day.length <- (24 - start.time) + end.time
day.length
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
max.time
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 + hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
setwd("~/Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer/data/targets_in_network/targets_to_intersect")
list.files(path = ".")
files <- list.files(path = ".")
files <- files[-1]
for(i in 1:length(files))
{
targets <- c(targets, read.table(file=files[i],header=F, as.is=T)[[1]])
}
length(unique(targets))
targets <- c()
for(i in 1:length(files))
{
targets <- c(targets, read.table(file=files[i],header=F, as.is=T)[[1]])
}
length(unique(targets))
## Load network data
network.data <- read.table(file="../../../../attractor_dev/data/attractor_network_representation.tsv",sep="\t",header=T,quote = "",as.is=T)
head(network.data)
nrwo(network.data)
nrow(network.data)
length(unique(targets))
adjacency.matrix <- matrix(0,ncol=19,nrow=nrow(network.data))
rownames(adjacency.matrix) <- network.data$names
nrow(network.data)
head(network.data)
colnames(adjacency.matrix) <- c("CCA1_ZT02", "CCA1_ZT14", "LHY_ZT02","TOC1_ZT15","PRR5_ZT10", "PRR7_ZT12", "PRR9_ZT??",
"PHYA_ZT00", "PHYB_ZT00", "CRY2_ZT08", "FHY1_ZT04", "LUX_ZT10", "LUX_ZT12",
"PIF3_ZT08", "PIF4_ZT04", "PIF5_ZT04", "ELF4_ZT10", "ELF3_ZT00", "ELF3_ZT04")
## CCA1 ZT02
cca1.zt02 <- read.table(file="CCA1_ZT02_targets_in_network.txt",as.is=T,header=F)[[1]]
cca1.zt02
adjacency.matrix[cca1.zt02,"CCA1_ZT02"] <- 1
## CCA1 ZT14
cca1.zt14 <- read.table(file="CCA1_ZT14_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[cca1.zt14,"CCA1_ZT14"] <- 1
## LHY ZT02
lhy.zt02 <- read.table(file="LHY_targets_in_network.txt", as.is=T, header=F)[[1]]
## LHY ZT02
lhy.zt02 <- read.table(file="LHY_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[lhy.zt02,"LHY_ZT02"] <- 1
## TOC1_ZT15
toc1.zt15 <- read.table(file="TOC1_targets_in_network.txt", as.is=T, header=F)[[1]]
## TOC1_ZT15
toc1.zt15 <- read.table(file="TOC1_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[toc1.zt15,"TOC1_ZT15"] <- 1
## PRR5_ZT10
prr5.zt10 <- read.table(file="PRR5_targets_in_network.txt", as.is=T, header=F)[[1]]
## PRR5_ZT10
prr5.zt10 <- read.table(file="PRR5_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[prr5.zt10,"PRR5_ZT10"] <- 1
## PRR7_ZT12
prr7.zt10 <- read.table(file="PRR7_targets_in_network.txt", as.is=T, header=F)[[1]]
## PRR7_ZT12
prr7.zt12 <- read.table(file="PRR7_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[prr7.zt12,"PRR7_ZT12"] <- 1
## PRR9_ZT??
prr9.zt <- read.table(file="PRR9_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[prr9.zt,"PRR9_ZT??"] <- 1
prr9.zt
## PHYA_ZT00
phya.zt00 <- read.table(file="PHYA_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[phya.zt00,"PHYA_ZT00"] <- 1
## PHYB_ZT00
phyb.zt00 <- read.table(file="PHYB_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[phyb.zt00,"PHYB_ZT00"] <- 1
## CRY2_ZT08
cry2.zt08 <- read.table(file="CRY2_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[cry2.zt08,"CRY2_ZT08"] <- 1
## FHY1_ZT04
fhy1.zt04 <- read.table(file="FHY1_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[fhy1.zt04,"FHY1_ZT04"] <- 1
## LUX_ZT10
lux.zt00 <- read.table(file="LUX_ZT10_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[lux.zt00,"LUX_ZT10"] <- 1
## LUX_ZT10
lux.zt10 <- read.table(file="LUX_ZT10_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[lux.zt10,"LUX_ZT10"] <- 1
## LUX_ZT12
lux.zt12 <- read.table(file="LUX_ZT12_targets_in_network.txt", as.is=T, header=F)[[1]]
## LUX_ZT12
lux.zt12 <- read.table(file="LUX_ZT12_targets_in_network.txt", as.is=T, header=F)[[1]]
## LUX_ZT12
lux.zt12 <- read.table(file="LUX_ZT12_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[lux.zt12,"LUX_ZT12"] <- 1
## PIF3_ZT08
pif3.zt08 <- read.table(file="PIF3_targets_in_network.txt", as.is=T, header=F)[[1]]
## PIF3_ZT08
pif3.zt08 <- read.table(file="PIF3_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[pif3.zt08,"PIF3_ZT08"] <- 1
## PIF4_ZT04
pif4.zt04 <- read.table(file="PIF4_targets_in_network.txt", as.is=T, header=F)[[1]]
## PIF4_ZT04
pif4.zt04 <- read.table(file="PIF4_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[pif4.zt04,"PIF4_ZT04"] <- 1
## PIF5_ZT04
pif5.zt04 <- read.table(file="PIF5_targets_in_network.txt", as.is=T, header=F)[[1]]
pif5.zt04
adjacency.matrix[pif5.zt04,"PIF5_ZT04"] <- 1
## ELF4_ZT10
elf4.zt10 <- read.table(file="ELF4_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[elf4.zt10,"ELF4_ZT10"] <- 1
## ELF3_ZT00
elf3.zt00 <- read.table(file="ELF3_ZT00_targets_in_network.txt", as.is=T, header=F)[[1]]
## ELF3_ZT00
elf3.zt00 <- read.table(file="ELF3_ZT00_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[elf3.zt00,"ELF3_ZT00"] <- 1
## ELF3_ZT04
elf3.zt04 <- read.table(file="ELF3_ZT04_targets_in_network.txt", as.is=T, header=F)[[1]]
adjacency.matrix[elf3.zt04,"ELF3_ZT04"] <- 1
