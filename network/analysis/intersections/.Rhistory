shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp()
intersect2sets(set1=degree.top, set2 = genes.peak.zt, alias=alias, gene.descriptions = description)
#install.packages("SuperExactTest")
library(SuperExactTest)
##Reading the two sets TF target genes
tf1 <- read.table(file = "../../../web_apps/peak_visualizer/data/targets_in_network/CCA1_ZT02_targets_in_network.txt",
header = FALSE, as.is = TRUE)[[1]]
tf2 <- read.table(file="../../../web_apps/peak_visualizer/data/targets_in_network/LHY_targets_in_network.txt",
header = FALSE, as.is = TRUE)[[1]]
#Reading the group of genes peaking at specific time
genes.peak.zt <- read.table(file = "../../../network/clusters/peak_ZT0.txt",
header = FALSE, as.is = TRUE)[[1]]
##Get translation between AGI and primary symbol
library(org.At.tair.db)
columns(org.At.tair.db)
my.key <- keys(org.At.tair.db, keytype="ENTREZID")
my.col <- c("SYMBOL", "TAIR")
alias2symbol.table <- select(org.At.tair.db, keys=my.key, columns=my.col, keytype="ENTREZID")
alias <- alias2symbol.table$SYMBOL
names(alias) <- alias2symbol.table$TAIR
alias[is.na(alias)] <- ""
## Get description of each AGI symbol
network.data <- read.table(file="../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
description <- network.data$description
names(description) <- network.data$names
description[1:3]
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/intersections")
## Get description of each AGI symbol
network.data <- read.table(file="../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
description <- network.data$description
names(description) <- network.data$names
description[1:3]
attractor.data <- read.table(file="../../attractor_network_representation.tsv",
sep = "\t", as.is = TRUE, header = TRUE, quote = "")
head(attractor.data)
nrow(attractor.data)
gene.names <- attractor.data$names
threshold <- 0.90 #Here you can change the threshold
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
indegree.top <- gene.names[attractor.data$indegree > indegree.threshold]
outdegree.threshold <- quantile(attractor.data$outdegree, prob=threshold)
outdegree.top <- gene.names[attractor.data$outdegree > outdegree.threshold]
attractor.degree <- attractor.data$indegree + attractor.data$outdegree
degree.threshold <- quantile(attractor.degree, prob=threshold)
degree.top <- gene.names[attractor.degree > degree.threshold]
attractor.data$transitivity[is.na(attractor.data$transitivity)] <- 0
trans.threshold <- quantile(attractor.data$transitivity, prob=threshold)
trans.top <- gene.names[attractor.data$trans > trans.threshold]
closeness.threshold <- quantile(attractor.data$closeness, prob=threshold)
closeness.top <- gene.names[attractor.data$closeness > closeness.threshold]
betweeness.threshold <- quantile(attractor.data$betweeness, prob=threshold)
betweeness.top <- gene.names[attractor.data$betweeness > betweeness.threshold]
eccentricity.threshold <- quantile(attractor.data$eccentricity, prob=threshold)
eccentricity.top <- gene.names[attractor.data$eccentricity > eccentricity.threshold]
##--Function to perform an intersection of TWO sets--##
intersect2sets <- function(set1, set2, alias, gene.descriptions){
intersection.data <- list()
sets <- list(set1, set2)
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes.agi <- intersection.genes
intersection.genes.primary.symbol <- alias[intersection.genes]
names(intersection.genes.primary.symbol) <- NULL
gene.table <- matrix(nrow=length(intersection.genes), ncol=3)
colnames(gene.table) <- c("AGI", "Primary Symbol", "Description")
gene.table[,1] <- intersection.genes.agi
gene.table[,2] <- intersection.genes.primary.symbol
#  gene.table[,3] <- description
intersection.genes.description <- gene.descriptions[intersection.genes]
names(intersection.genes.description) <- NULL
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- data.frame(intersection.genes,intersection.genes.primary.symbol,intersection.genes.description,stringsAsFactors = F)
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
return(intersection.data)
}
intersect2sets(set1=degree.top, set2 = genes.peak.zt, alias=alias, gene.descriptions = description)
#Reading the group of genes peaking at specific time
genes.peak.zt <- read.table(file = "../../../network/clusters/peak_ZT0.txt",
header = FALSE, as.is = TRUE)[[1]]
intersect2sets(set1=degree.top, set2 = genes.peak.zt, alias=alias, gene.descriptions = description)
degree.top
genes.peak.zt
alias
description
intersect2sets(set1=degree.top, set2 = genes.peak.zt, alias=alias, gene.descriptions = description)
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
