for (i in 1:nrow(possible.zts))
{
if (possible.zts[i, "Var1"] == "Any")
{
if (possible.zts[i, "Var2"] == "Any")
{
zt.genes <- attractor.network$names
} else
{
zt.genes <- subset(attractor.network, trough.zt == paste0("trough", substr(x = possible.zts[i, "Var2"], start = 3, stop = nchar(as.character(possible.zts[i, "Var2"])))))$names
}
} else
{
if (possible.zts[i, "Var2"] == "Any")
{
peak.selection <- paste0("peak", substr(x = possible.zts[i, "Var1"], start = 3, stop = nchar(as.character(possible.zts[i, "Var1"]))))
zt.genes <- subset(attractor.network, peak.zt == peak.selection)$names
} else
{
trough.selection <- paste0("trough", substr(x = possible.zts[i, "Var2"], start = 3, stop = nchar(as.character(possible.zts[i, "Var2"]))))
peak.selection <- paste0("peak", substr(x = possible.zts[i, "Var1"], start = 3, stop = nchar(as.character(possible.zts[i, "Var1"]))))
zt.genes <- subset(attractor.network, trough.zt == trough.selection & peak.zt == peak.selection)$names
}
}
name <- paste0("peak",possible.zts[i, "Var1"], "_trough", possible.zts[i, "Var2"])
name <- zt.genes
if (length(zt.genes) == 0)
{
zt.genes <- NA
}else
{
possible.moments <- cbind(possible.moments, zt.genes)
}
}
head(possible.moments)
paste0("clusters_ok/") file.name, ".txt")
paste0("clusters_ok/" file.name, ".txt")
paste0("clusters_ok/", file.name, ".txt")
file.name <- paste0("peak",possible.zts[i, "Var1"], "_trough", possible.zts[i, "Var2"])
paste0("clusters_ok/", file.name, ".txt")
write.table(zt.genes, file =paste0("clusters_ok/", file.name, ".txt"), sep= "\t", quote = FALSE, row.names = FALSE)
write.table(zt.genes, file =paste0("clusters_ok/", file.name, ".txt"), sep= "\t", quote = FALSE, row.names = FALSE)
for (i in 1:nrow(possible.zts))
{
if (possible.zts[i, "Var1"] == "Any")
{
if (possible.zts[i, "Var2"] == "Any")
{
zt.genes <- attractor.network$names
} else
{
zt.genes <- subset(attractor.network, trough.zt == paste0("trough", substr(x = possible.zts[i, "Var2"], start = 3, stop = nchar(as.character(possible.zts[i, "Var2"])))))$names
}
} else
{
if (possible.zts[i, "Var2"] == "Any")
{
peak.selection <- paste0("peak", substr(x = possible.zts[i, "Var1"], start = 3, stop = nchar(as.character(possible.zts[i, "Var1"]))))
zt.genes <- subset(attractor.network, peak.zt == peak.selection)$names
} else
{
trough.selection <- paste0("trough", substr(x = possible.zts[i, "Var2"], start = 3, stop = nchar(as.character(possible.zts[i, "Var2"]))))
peak.selection <- paste0("peak", substr(x = possible.zts[i, "Var1"], start = 3, stop = nchar(as.character(possible.zts[i, "Var1"]))))
zt.genes <- subset(attractor.network, trough.zt == trough.selection & peak.zt == peak.selection)$names
}
}
if (length(zt.genes) == 0)
{
zt.genes <- NA
}
file.name <- paste0("peak",possible.zts[i, "Var1"], "_trough", possible.zts[i, "Var2"])
write.table(zt.genes, file =paste0("clusters_ok/", file.name, ".txt"), sep= "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
}
length(top.parameters)
length(possible.zts)
nrow(possible.zts)
##Loop to intersect the previous classified genes and high topological values genes
clusters.files <- list.files(path = "clusters_ok/", pattern = "txt")
i <- 1
j <- 2
current.top <- top.genes[i][[1]]
current.top
current.top <- top.parameters[i][[1]]
current.top <- top.parameters[i][[1]]
current.top
set.of.genes <- read.table(file=paste0("clusters_ok",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
set.of.genes <- read.table(file=paste0("clusters_ok/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
circadian.info
clusters.files[j]
for (i in 1:nrow(possible.zts))
{
if (possible.zts[i, "Var1"] == "Any")
{
if (possible.zts[i, "Var2"] == "Any")
{
zt.genes <- attractor.network$names
} else
{
zt.genes <- subset(attractor.network, trough.zt == paste0("trough", substr(x = possible.zts[i, "Var2"], start = 3, stop = nchar(as.character(possible.zts[i, "Var2"])))))$names
}
} else
{
if (possible.zts[i, "Var2"] == "Any")
{
peak.selection <- paste0("peak", substr(x = possible.zts[i, "Var1"], start = 3, stop = nchar(as.character(possible.zts[i, "Var1"]))))
zt.genes <- subset(attractor.network, peak.zt == peak.selection)$names
} else
{
trough.selection <- paste0("trough", substr(x = possible.zts[i, "Var2"], start = 3, stop = nchar(as.character(possible.zts[i, "Var2"]))))
peak.selection <- paste0("peak", substr(x = possible.zts[i, "Var1"], start = 3, stop = nchar(as.character(possible.zts[i, "Var1"]))))
zt.genes <- subset(attractor.network, trough.zt == trough.selection & peak.zt == peak.selection)$names
}
}
if (length(zt.genes) == 0)
{
zt.genes <- NA
}
file.name <- paste0("peak_",possible.zts[i, "Var1"], "_trough_", possible.zts[i, "Var2"])
write.table(zt.genes, file =paste0("clusters_ok/", file.name, ".txt"), sep= "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
}
current.top <- top.parameters[i][[1]]
set.of.genes <- read.table(file=paste0("clusters_ok/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
##Loop to intersect the previous classified genes and high topological values genes
clusters.files <- list.files(path = "clusters_ok/", pattern = "txt")
i <- 1
j <- 2
current.top <- top.parameters[i][[1]]
set.of.genes <- read.table(file=paste0("clusters_ok/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
p.value
enrichment
intersect.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
circadian.info
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
trough.info
strsplit(circadian.info, split = "_")[[1]][1]
strsplit(trough.info, split = ".txt")[[1]][1]
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(clusters.files))
colnames(intersection.table) <- c("peak", "through", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 1
j <- 2
for (i in 1:length(top.parameters))
{
for (j in 1:length(clusters.files))
{
current.top <- top.parameters[i][[1]]
set.of.genes <- read.table(file=paste0("clusters_ok/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("topvalues_clusters_OK/intersections_", names(top.genes[i]), as.character(threshold),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
for (i in 1:length(top.parameters))
{
for (j in 1:length(clusters.files))
{
current.top <- top.parameters[i][[1]]
set.of.genes <- read.table(file=paste0("clusters_ok/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("topvalues_clusters_OK/intersections_", names(top.parameters[i]), as.character(threshold),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
length(top.parameters)
i <- 1
j <- 2
current.top <- top.parameters[i][[1]]
set.of.genes <- read.table(file=paste0("clusters_ok/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
head(intersection.table)
intersect.genes
result
top.parameters[i][[1]]
clusters.files[j]
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
current.top
set.of.genes
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
result
top.genes <- list(degree.top, trans.top, closeness.top, betweeness.top, eccentricity.top)
attractor.data <- read.table(file="../../attractor_network_representation.tsv",
sep = "\t", as.is = TRUE, row.names = NULL, header = TRUE)
head(attractor.data)
gene.names <- attractor.data$names
threshold <- 0.90 #Here you can change the threshold
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
indegree.top <- gene.names[attractor.data$indegree > indegree.threshold]
outdegree.threshold <- quantile(attractor.data$outdegree, prob=threshold)
outdegree.top <- gene.names[attractor.data$outdegree > outdegree.threshold]
attractor.degree <- attractor.data$indegree + attractor.data$outdegree
degree.threshold <- quantile(attractor.degree, prob=threshold)
degree.top <- gene.names[attractor.degree > degree.threshold]
attractor.data$transitivity[is.na(attractor.data$transitivity)] <- 0
trans.threshold <- quantile(attractor.data$transitivity, prob=threshold)
trans.top <- gene.names[attractor.data$trans > trans.threshold]
closeness.threshold <- quantile(attractor.data$closeness, prob=threshold)
closeness.top <- gene.names[attractor.data$closeness > closeness.threshold]
betweeness.threshold <- quantile(attractor.data$betweeness, prob=threshold)
betweeness.top <- gene.names[attractor.data$betweeness > betweeness.threshold]
eccentricity.threshold <- quantile(attractor.data$eccentricity, prob=threshold)
eccentricity.top <- gene.names[attractor.data$eccentricity > eccentricity.threshold]
##Loop to intersect the previous classified genes and high topological values genes####
clusters.files <- list.files(path = "clusters_ok/", pattern = "txt")
top.genes <- list(degree.top, trans.top, closeness.top, betweeness.top, eccentricity.top)
names(top.genes) <- c("Degree", "Transitivity", "Closeness", "Betweeness", "Eccentricity")
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(clusters.files))
colnames(intersection.table) <- c("peak", "through", "p-value", "fdr", "enrichment", "Intersection Genes")
top.genes
current.top <- top.genes[i][[1]]
current.top
for (i in 1:length(top.parameters))
{
for (j in 1:length(clusters.files))
{
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("clusters_ok/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("topvalues_clusters_OK/intersections_", names(top.parameters[i]), as.character(threshold),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
for (i in 1:length(top.parameters))
{
for (j in 1:length(clusters.files))
{
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("clusters_ok/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("topvalues_clusters_OK/intersections_", names(top.genes[i]), as.character(threshold),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
i <- 1
j <- 2
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("clusters_ok/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
current.top
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
threshold <- 0.90 #Here you can change the threshold
degree.threshold
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
attractor.data <- read.table(file="../../attractor_network_representation.tsv",
sep = "\t", as.is = TRUE, row.names = NULL, header = TRUE)
head(attractor.data)
gene.names <- attractor.data$names
threshold <- 0.90 #Here you can change the threshold
attractor.degree <- attractor.data$indegree + attractor.data$outdegree
attractor.data$indegree
attractor.data$outdegree
attractor.degree <- attractor.data$indegree + attractor.data$outdegree
degree.threshold <- quantile(attractor.degree, prob=threshold)
degree.threshold
degree.top <- gene.names[attractor.degree > degree.threshold]
degree.top
attractor.degree
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
indegree.top <- gene.names[attractor.data$indegree > indegree.threshold]
indegree.top
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
indegree.threshold
outdegree.threshold <- quantile(attractor.data$outdegree, prob=threshold)
outdegree.threshold
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
indegree.top <- gene.names[attractor.data$indegree > indegree.threshold]
indegree.top
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
attractor.data <- read.table(file="../../attractor_network_representation.tsv",
sep = "\t", as.is = TRUE, row.names = NULL, header = TRUE)
nrow(attractor.data)
setwd("~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev")
## Load network
#network.data <- read.table(file="data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
network.data <- read.table(file="data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
nrow(network.data)
attractor.data <- read.table(file="../../attractor_network_representation.tsv",
sep = "\t", as.is = TRUE, header = TRUE, quote = "")
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/intersections")
attractor.data <- read.table(file="../../attractor_network_representation.tsv",
sep = "\t", as.is = TRUE, header = TRUE, quote = "")
head(attractor.data)
nrow(attractor.data)
gene.names <- attractor.data$names
threshold <- 0.90 #Here you can change the threshold
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
indegree.top <- gene.names[attractor.data$indegree > indegree.threshold]
indegree.threshold
indegree.top
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
indegree.top <- gene.names[attractor.data$indegree > indegree.threshold]
outdegree.threshold <- quantile(attractor.data$outdegree, prob=threshold)
outdegree.top <- gene.names[attractor.data$outdegree > outdegree.threshold]
attractor.degree <- attractor.data$indegree + attractor.data$outdegree
degree.threshold <- quantile(attractor.degree, prob=threshold)
degree.top <- gene.names[attractor.degree > degree.threshold]
attractor.data$transitivity[is.na(attractor.data$transitivity)] <- 0
trans.threshold <- quantile(attractor.data$transitivity, prob=threshold)
trans.top <- gene.names[attractor.data$trans > trans.threshold]
closeness.threshold <- quantile(attractor.data$closeness, prob=threshold)
closeness.top <- gene.names[attractor.data$closeness > closeness.threshold]
betweeness.threshold <- quantile(attractor.data$betweeness, prob=threshold)
betweeness.top <- gene.names[attractor.data$betweeness > betweeness.threshold]
eccentricity.threshold <- quantile(attractor.data$eccentricity, prob=threshold)
eccentricity.top <- gene.names[attractor.data$eccentricity > eccentricity.threshold]
##Loop to classify genes according to their peak/trough and then use them to intersections####
top.parameters <- c("Degree","Betweeness", "Closeness", "Eccentricity","Transitivity")
zts <- c("Any",paste("ZT",seq(from=0,to=20,by=4),sep=""))
possible.zts <- expand.grid(zts, zts)
for (i in 1:nrow(possible.zts))
{
if (possible.zts[i, "Var1"] == "Any")
{
if (possible.zts[i, "Var2"] == "Any")
{
zt.genes <- attractor.network$names
} else
{
zt.genes <- subset(attractor.network, trough.zt == paste0("trough", substr(x = possible.zts[i, "Var2"], start = 3, stop = nchar(as.character(possible.zts[i, "Var2"])))))$names
}
} else
{
if (possible.zts[i, "Var2"] == "Any")
{
peak.selection <- paste0("peak", substr(x = possible.zts[i, "Var1"], start = 3, stop = nchar(as.character(possible.zts[i, "Var1"]))))
zt.genes <- subset(attractor.network, peak.zt == peak.selection)$names
} else
{
trough.selection <- paste0("trough", substr(x = possible.zts[i, "Var2"], start = 3, stop = nchar(as.character(possible.zts[i, "Var2"]))))
peak.selection <- paste0("peak", substr(x = possible.zts[i, "Var1"], start = 3, stop = nchar(as.character(possible.zts[i, "Var1"]))))
zt.genes <- subset(attractor.network, trough.zt == trough.selection & peak.zt == peak.selection)$names
}
}
if (length(zt.genes) == 0)
{
zt.genes <- NA
}
file.name <- paste0("peak_",possible.zts[i, "Var1"], "_trough_", possible.zts[i, "Var2"])
write.table(zt.genes, file =paste0("clusters_ok/", file.name, ".txt"), sep= "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
}
##Loop to classify genes according to their peak/trough and then use them to intersections####
top.parameters <- c("Degree","Betweeness", "Closeness", "Eccentricity","Transitivity")
zts <- c("Any",paste("ZT",seq(from=0,to=20,by=4),sep=""))
possible.zts <- expand.grid(zts, zts)
for (i in 1:nrow(possible.zts))
{
if (possible.zts[i, "Var1"] == "Any")
{
if (possible.zts[i, "Var2"] == "Any")
{
zt.genes <- attractor.network$names
} else
{
zt.genes <- subset(attractor.network, trough.zt == paste0("trough", substr(x = possible.zts[i, "Var2"], start = 3, stop = nchar(as.character(possible.zts[i, "Var2"])))))$names
}
} else
{
if (possible.zts[i, "Var2"] == "Any")
{
peak.selection <- paste0("peak", substr(x = possible.zts[i, "Var1"], start = 3, stop = nchar(as.character(possible.zts[i, "Var1"]))))
zt.genes <- subset(attractor.network, peak.zt == peak.selection)$names
} else
{
trough.selection <- paste0("trough", substr(x = possible.zts[i, "Var2"], start = 3, stop = nchar(as.character(possible.zts[i, "Var2"]))))
peak.selection <- paste0("peak", substr(x = possible.zts[i, "Var1"], start = 3, stop = nchar(as.character(possible.zts[i, "Var1"]))))
zt.genes <- subset(attractor.network, trough.zt == trough.selection & peak.zt == peak.selection)$names
}
}
if (length(zt.genes) == 0)
{
zt.genes <- NA
}
file.name <- paste0("peak_",possible.zts[i, "Var1"], "_trough_", possible.zts[i, "Var2"])
write.table(zt.genes, file =paste0("clusters_ok/", file.name, ".txt"), sep= "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
}
##Loop to intersect the previous classified genes and high topological values genes####
clusters.files <- list.files(path = "clusters_ok/", pattern = "txt")
top.genes <- list(degree.top, trans.top, closeness.top, betweeness.top, eccentricity.top)
names(top.genes) <- c("Degree", "Transitivity", "Closeness", "Betweeness", "Eccentricity")
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(clusters.files))
colnames(intersection.table) <- c("peak", "through", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 1
j <- 2
for (i in 1:length(top.parameters))
{
for (j in 1:length(clusters.files))
{
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("clusters_ok/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("topvalues_clusters_OK/intersections_", names(top.genes[i]), as.character(threshold),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
#####Intersections between binding regions in DNA (BED files)####
#Reading the bed files of the transcription factors
peaks1 <- read.table(file = "bed.files/PRR5_1_peaks.narrowPeak")
head(peaks1)
peaks2 <- read.table(file = "bed.files/PRR7_peaks.narrowPeak")
head(peaks2)
peaks3 <- read.table(file = "bed.files/PRR9_1_peaks.narrowPeak")
head(peaks3)
peaks.list <- list(peaks1, peaks2, peaks3)
length.sets <- sapply(X = peaks.list, FUN = nrow)
length.sets
