i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/intersections")
## Function to extract the significance between three sets
intersectSets <- function(tf1,tf2,set.of.genes){
intersection.data <- list()
sets <- list(tf1, tf2, set.of.genes)
#names(sets) <- c("cca1", "lhy", "peakZT0")
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- intersection.genes
names(intersection.data) <- c("p-value", "enrichment", "genes")
return(intersection.data)
}
## Load network data
network.data <- read.table(file="../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
## Loop over TFs and circadian genes
tf.names <- colnames(network.data)[6:21]
i <- 1
j <- 2
k <- 0
l <- 4
targets.tf.i <- network.data$names[network.data[,tf.i] == 1]
targets.tf.j <- network.data$names[network.data[,tf.j] == 1]
circadian.gene.set <- subset(network.data, peak.zt == paste0("peak",k) & trough.zt == paste0("trough",l))$names
intersection.result <- intersectSets(tf1 = targets.tf.i, tf2 = targets.tf.j, set.of.genes = circadian.gene.set)
tf.i <- tf.names[i]
tf.j <- tf.names[j]
targets.tf.i <- network.data$names[network.data[,tf.i] == 1]
targets.tf.j <- network.data$names[network.data[,tf.j] == 1]
circadian.gene.set <- subset(network.data, peak.zt == paste0("peak",k) & trough.zt == paste0("trough",l))$names
intersection.result <- intersectSets(tf1 = targets.tf.i, tf2 = targets.tf.j, set.of.genes = circadian.gene.set)
library(SuperExactTest)
## Load network data
network.data <- read.table(file="../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
nrow(network.data)
## Function to extract the significance between three sets
intersectSets <- function(tf1,tf2,set.of.genes){
intersection.data <- list()
sets <- list(tf1, tf2, set.of.genes)
#names(sets) <- c("cca1", "lhy", "peakZT0")
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- intersection.genes
names(intersection.data) <- c("p-value", "enrichment", "genes")
return(intersection.data)
}
## Loop over TFs and circadian genes
tf.names <- colnames(network.data)[6:21]
i <- 1
j <- 2
k <- 0
l <- 4
tf.i <- tf.names[i]
tf.j <- tf.names[j]
targets.tf.i <- network.data$names[network.data[,tf.i] == 1]
targets.tf.j <- network.data$names[network.data[,tf.j] == 1]
circadian.gene.set <- subset(network.data, peak.zt == paste0("peak",k) & trough.zt == paste0("trough",l))$names
intersection.result <- intersectSets(tf1 = targets.tf.i, tf2 = targets.tf.j, set.of.genes = circadian.gene.set)
## Function to extract the significance between three sets
intersectSets <- function(tf1,tf2,set.of.genes){
intersection.data <- list()
sets <- list(tf1, tf2, set.of.genes)
#names(sets) <- c("cca1", "lhy", "peakZT0")
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.data <- list()
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- intersection.genes
names(intersection.data) <- c("p-value", "enrichment", "genes")
return(intersection.data)
}
targets.tf.i <- network.data$names[network.data[,tf.i] == 1]
targets.tf.j <- network.data$names[network.data[,tf.j] == 1]
circadian.gene.set <- subset(network.data, peak.zt == paste0("peak",k) & trough.zt == paste0("trough",l))$names
intersection.result <- intersectSets(tf1 = targets.tf.i, tf2 = targets.tf.j, set.of.genes = circadian.gene.set)
intersection.result$`p-value`
intersection.result$
}
intersection.result$enrichment
intersection.result$genes
paste0(intersection.result$genes)
paste(intersection.result$genes,collapse = ",")
(length(tf.names) -1)*length(tf.names)
(length(tf.names) -1)*length(tf.names)/2
6*5*(length(tf.names) -1)*length(tf.names)/2
number.of.test <- 6*5*(length(tf.names) -1)*length(tf.names)/2
tfs <- vector(mode="character",length=number.of.test)
tfs.1 <- vector(mode="character",length=number.of.test)
tfs.2 <- vector(mode="character",length=number.of.test)
peaks <- vector(mode="character",length=number.of.test)
tfs.1 <- vector(mode="character",length=number.of.test)
tfs.2 <- vector(mode="character",length=number.of.test)
peaks <- vector(mode="character",length=number.of.test)
troughs <- vector(mode="character",length=number.of.test)
enrichments <- vector(mode="numeric",length=number.of.test)
tfs.1 <- vector(mode="character",length=number.of.test)
tfs.2 <- vector(mode="character",length=number.of.test)
peaks <- vector(mode="character",length=number.of.test)
troughs <- vector(mode="character",length=number.of.test)
pvalues <- vector(mode="numeric",length=number.of.test)
enrichments <- vector(mode="numeric",length=number.of.test)
genes.in.intersection <- vector(mode="character",length=number.of.test)
n <- 1
for(i in 1:length(tf.names))
{
for(j in (i+1):length(tf.names))
{
for(k in seq(from=0,to=20,by=4))
{
for(l in seq(from=0,to=20,by=4))
{
tf.i <- tf.names[i]
tf.j <- tf.names[j]
if(k != l)
{
targets.tf.i <- network.data$names[network.data[,tf.i] == 1]
targets.tf.j <- network.data$names[network.data[,tf.j] == 1]
circadian.gene.set <- subset(network.data, peak.zt == paste0("peak",k) & trough.zt == paste0("trough",l))$names
intersection.result <- intersectSets(tf1 = targets.tf.i, tf2 = targets.tf.j, set.of.genes = circadian.gene.set)
tfs.1[n] <- tf.i
tfs.2[n] <- tf.j
pvalues[n] <- intersection.result$`p-value`
enrichments[n] <- intersection.result$enrichment
genes.in.intersection[n]  <- paste(intersection.result$genes,collapse = ",")
n <- n + 1
}
}
}
}
}
i
j
k
l
tf.i
tf.j
pvalues
number.of.test <- 6*5*(length(tf.names) -1)*length(tf.names)/2
tfs.1 <- vector(mode="character",length=number.of.test)
tfs.2 <- vector(mode="character",length=number.of.test)
peaks <- vector(mode="character",length=number.of.test)
troughs <- vector(mode="character",length=number.of.test)
pvalues <- vector(mode="numeric",length=number.of.test)
enrichments <- vector(mode="numeric",length=number.of.test)
genes.in.intersection <- vector(mode="character",length=number.of.test)
n <- 1
for(i in 1:(length(tf.names)-1))
{
for(j in (i+1):length(tf.names))
{
for(k in seq(from=0,to=20,by=4))
{
for(l in seq(from=0,to=20,by=4))
{
tf.i <- tf.names[i]
tf.j <- tf.names[j]
if(k != l)
{
targets.tf.i <- network.data$names[network.data[,tf.i] == 1]
targets.tf.j <- network.data$names[network.data[,tf.j] == 1]
circadian.gene.set <- subset(network.data, peak.zt == paste0("peak",k) & trough.zt == paste0("trough",l))$names
intersection.result <- intersectSets(tf1 = targets.tf.i, tf2 = targets.tf.j, set.of.genes = circadian.gene.set)
tfs.1[n] <- tf.i
tfs.2[n] <- tf.j
pvalues[n] <- intersection.result$`p-value`
enrichments[n] <- intersection.result$enrichment
genes.in.intersection[n]  <- paste(intersection.result$genes,collapse = ",")
n <- n + 1
}
}
}
}
}
pvalues
fdr.values <- p.adjust(p = pvalues,method = "BH")
fdr.values
pvalues
sum(fdr.values < 0.01)
significance.intersection <- data.frame(tf1 = tfs.1,
tf2 = tfs.2,
peak.zt = peaks,
trough.zt = troughs,
pvalues = pvalues,
fdr = frd.values,
enrichment = enrichments,
genes = genes.in.intersection)
significance.intersection <- data.frame(tf1 = tfs.1,
tf2 = tfs.2,
peak.zt = peaks,
trough.zt = troughs,
pvalues = pvalues,
fdr = fdr.values,
enrichment = enrichments,
genes = genes.in.intersection)
write.table(x = significance.intersection,file = "significance_intersection.tsv",quote = F,sep = "\t",row.names = F)
