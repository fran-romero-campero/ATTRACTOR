bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- NA
bed.intersections[i,5] <- "No intersection"
bed.intersections[i,6] <- NA
}
}
j
chromosomes.length <- read.table(file="../../../web_apps/peak_visualizer/data/bed_files/atha_chr_lengths.txt",as.is=T)[[1]]
number.randomisation <- 1000
bed.files <- list.files(path = "../../../web_apps/peak_visualizer/data/bed_files/", pattern = "peaks.narrowPeak")
combinations <- expand.grid(bed.files, bed.files)
bed.intersections <- matrix(ncol = 6, nrow = nrow(combinations))
colnames(bed.intersections) <- c("TF1", "TF2", "p-value", "fdr", "number of intersections", "Genes" )
txdb <- TxDb.Athaliana.BioMart.plantsmart28
i <- 26
total.tests <- nrow(combinations)
# total.tests <- 50
# Start the clock!
ptm <- proc.time()
for (i in 1:total.tests)
# for (i in 1:nrow(combinations))
{
# print(paste0("test number ", i, " of ", nrow(combinations)))
print(paste0((i/total.tests)*100, " %"))
peaks1 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,1]))
peaks2 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,2]))
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)
if (nrow(real.intersection) > 0)
{
random.intersections <- vector(mode = "numeric",length=number.randomisation) #Creating vector
for(j in 1:number.randomisation)
{
print(j)
random.peaks2 <- matrix(nrow=nrow(peaks2),ncol=3) #Matriz con 3 columnas, una para el cromosoma, otra para el comienzo y otra para el final de la región aleatoria.
for(k in 1:nrow(peaks2))
{
current.chr <- peaks2[k,1][[1]] #Chr de la iésima marca real
current.start <- peaks2[k,2] #Start de la iésima marca real
current.end <- peaks2[k,3] #End de la iésima marca real
current.length <- current.end - current.start #Longitud de la iésima marca real
chr.length <- chromosomes.length[current.chr] #Length del actual cromosoma
#Ahora genero los mismos datos para regiones aleatorias
random.start <- floor(runif(n = 1,min = 1,max = chr.length))
random.end <- random.start + current.length
random.peaks2[k,1] <- current.chr
random.peaks2[k,2] <- random.start
random.peaks2[k,3] <- random.end
}
random.intersections[j] <- nrow(intersectBed(peaks.set1 = peaks1, peaks.set2 = random.peaks2 ))
}
p.value <- sum(random.intersections > nrow(real.intersection)) / number.randomisation
if( p.value == 0)
{
p.value <- 1/number.randomisation
}
colnames(real.intersection) <- c("chromosome", "start", "end")
granges.intersection <- makeGRangesFromDataFrame(real.intersection,
keep.extra.columns=FALSE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field="chromosome",
start.field="start",
end.field="end",
starts.in.df.are.0based=FALSE)
peakAnno <- annotatePeak(granges.intersection, tssRegion=c(-2000, 2000),
TxDb=txdb, annoDb="org.At.tair.db")
annot.peaks <- as.data.frame(peakAnno)
target.genes <- subset(annot.peaks, distanceToTSS >= 2000 | distanceToTSS <= -2000)$geneId
target.genes <- paste(target.genes, collapse = ",")
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- p.value
bed.intersections[i,5] <- nrow(real.intersection)
bed.intersections[i,6] <- target.genes
} else
{
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- NA
bed.intersections[i,5] <- "No intersection"
bed.intersections[i,6] <- NA
}
}
chromosomes.length <- read.table(file="../../../web_apps/peak_visualizer/data/bed_files/atha_chr_lengths.txt",as.is=T)[[1]]
number.randomisation <- 1000
bed.files <- list.files(path = "../../../web_apps/peak_visualizer/data/bed_files/", pattern = "peaks.narrowPeak")
combinations <- expand.grid(bed.files, bed.files)
bed.intersections <- matrix(ncol = 6, nrow = nrow(combinations))
colnames(bed.intersections) <- c("TF1", "TF2", "p-value", "fdr", "number of intersections", "Genes" )
txdb <- TxDb.Athaliana.BioMart.plantsmart28
i <- 26
total.tests <- nrow(combinations)
# total.tests <- 50
# Start the clock!
ptm <- proc.time()
for (i in 1:total.tests)
# for (i in 1:nrow(combinations))
{
# print(paste0("test number ", i, " of ", nrow(combinations)))
print(paste0((i/total.tests)*100, " %"))
peaks1 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,1]))
peaks2 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,2]))
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)
if (nrow(real.intersection) > 0)
{
random.intersections <- vector(mode = "numeric",length=number.randomisation) #Creating vector
for(j in 1:number.randomisation)
{
print(j)
random.peaks2 <- matrix(nrow=nrow(peaks2),ncol=3) #Matriz con 3 columnas, una para el cromosoma, otra para el comienzo y otra para el final de la región aleatoria.
for(k in 1:nrow(peaks2))
{
current.chr <- peaks2[k,1][[1]] #Chr de la iésima marca real
current.start <- peaks2[k,2] #Start de la iésima marca real
current.end <- peaks2[k,3] #End de la iésima marca real
current.length <- current.end - current.start #Longitud de la iésima marca real
chr.length <- chromosomes.length[current.chr] #Length del actual cromosoma
#Ahora genero los mismos datos para regiones aleatorias
random.start <- floor(runif(n = 1,min = 1,max = chr.length))
random.end <- random.start + current.length
random.peaks2[k,1] <- current.chr
random.peaks2[k,2] <- random.start
random.peaks2[k,3] <- random.end
}
random.intersections[j] <- nrow(intersectBed(peaks.set1 = peaks1, peaks.set2 = random.peaks2 ))
}
p.value <- sum(random.intersections > nrow(real.intersection)) / number.randomisation
if( p.value == 0)
{
p.value <- 1/number.randomisation
}
colnames(real.intersection) <- c("chromosome", "start", "end")
granges.intersection <- makeGRangesFromDataFrame(real.intersection,
keep.extra.columns=FALSE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field="chromosome",
start.field="start",
end.field="end",
starts.in.df.are.0based=FALSE)
peakAnno <- annotatePeak(granges.intersection, tssRegion=c(-2000, 2000),
TxDb=txdb, annoDb="org.At.tair.db")
annot.peaks <- as.data.frame(peakAnno)
target.genes <- subset(annot.peaks, distanceToTSS >= 2000 | distanceToTSS <= -2000)$geneId
target.genes <- paste(target.genes, collapse = ",")
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- p.value
bed.intersections[i,5] <- nrow(real.intersection)
bed.intersections[i,6] <- target.genes
} else
{
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- NA
bed.intersections[i,5] <- "No intersection"
bed.intersections[i,6] <- NA
}
}
i
j
k
chromosomes.length <- read.table(file="../../../web_apps/peak_visualizer/data/bed_files/atha_chr_lengths.txt",as.is=T)[[1]]
number.randomisation <- 1000
bed.files <- list.files(path = "../../../web_apps/peak_visualizer/data/bed_files/", pattern = "peaks.narrowPeak")
combinations <- expand.grid(bed.files, bed.files)
bed.intersections <- matrix(ncol = 6, nrow = nrow(combinations))
colnames(bed.intersections) <- c("TF1", "TF2", "p-value", "fdr", "number of intersections", "Genes" )
txdb <- TxDb.Athaliana.BioMart.plantsmart28
i <- 26
total.tests <- nrow(combinations)
# total.tests <- 50
# Start the clock!
ptm <- proc.time()
for (i in 1:total.tests)
# for (i in 1:nrow(combinations))
{
# print(paste0("test number ", i, " of ", nrow(combinations)))
print(paste0((i/total.tests)*100, " %"))
peaks1 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,1]))
peaks2 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,2]))
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)
if (nrow(real.intersection) > 0)
{
random.intersections <- vector(mode = "numeric",length=number.randomisation) #Creating vector
for(j in 1:number.randomisation)
{
print(j)
random.peaks2 <- matrix(nrow=nrow(peaks2),ncol=3) #Matriz con 3 columnas, una para el cromosoma, otra para el comienzo y otra para el final de la región aleatoria.
for(k in 1:nrow(peaks2))
{
current.chr <- peaks2[k,1][[1]] #Chr de la iésima marca real
current.start <- peaks2[k,2] #Start de la iésima marca real
current.end <- peaks2[k,3] #End de la iésima marca real
current.length <- current.end - current.start #Longitud de la iésima marca real
chr.length <- chromosomes.length[current.chr] #Length del actual cromosoma
#Ahora genero los mismos datos para regiones aleatorias
random.start <- floor(runif(n = 1,min = 1,max = chr.length))
random.end <- random.start + current.length
random.peaks2[k,1] <- current.chr
random.peaks2[k,2] <- random.start
random.peaks2[k,3] <- random.end
}
random.intersections[j] <- nrow(intersectBed(peaks.set1 = peaks1, peaks.set2 = random.peaks2 ))
}
p.value <- sum(random.intersections > nrow(real.intersection)) / number.randomisation
if( p.value == 0)
{
p.value <- 1/number.randomisation
}
colnames(real.intersection) <- c("chromosome", "start", "end")
granges.intersection <- makeGRangesFromDataFrame(real.intersection,
keep.extra.columns=FALSE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field="chromosome",
start.field="start",
end.field="end",
starts.in.df.are.0based=FALSE)
peakAnno <- annotatePeak(granges.intersection, tssRegion=c(-2000, 2000),
TxDb=txdb, annoDb="org.At.tair.db")
annot.peaks <- as.data.frame(peakAnno)
target.genes <- subset(annot.peaks, distanceToTSS >= 2000 | distanceToTSS <= -2000)$geneId
target.genes <- paste(target.genes, collapse = ",")
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- p.value
bed.intersections[i,5] <- nrow(real.intersection)
bed.intersections[i,6] <- target.genes
} else
{
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- NA
bed.intersections[i,5] <- "No intersection"
bed.intersections[i,6] <- NA
}
}
k
shiny::runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
bed.files <- c("data/bed_files/PHYA_peaks.narrowPeak",
"data/bed_files/PHYB_peaks.narrowPeak",
"data/bed_files/PRR5_1_peaks.narrowPeak",
"data/bed_files/TOC1_1_peaks.narrowPeak",
"data/bed_files/CCA1_ZT02_peaks.narrowPeak",
"data/bed_files/CCA1_ZT14_peaks.narrowPeak",
"data/bed_files/LHY_1_peaks.narrowPeak",
"data/bed_files/CRY2_peaks.narrowPeak",
"data/bed_files/FHY1_peaks.narrowPeak",
"data/bed_files/LUX_ZT10_1_peaks.narrowPeak",
"data/bed_files/LUX_ZT12_1_peaks.narrowPeak",
"data/bed_files/PIF3_peaks.narrowPeak",
"data/bed_files/PIF4_peaks.narrowPeak",
"data/bed_files/PIF5_peaks.narrowPeak",
"data/bed_files/PRR7_peaks.narrowPeak",
"data/bed_files/PRR9_1_peaks.narrowPeak",
"data/bed_files/ELF3_ZT0_1_peaks.narrowPeak",
"data/bed_files/ELF3_ZT4_1_peaks.narrowPeak",
"data/bed_files/ELF4_1_peaks.narrowPeak")
names(bed.files) <- c("PHYA ZT00", "PHYB ZT00" ,"PRR5 ZT10", "TOC1 ZT15","CCA1 ZT02","CCA1 ZT14","LHY ZT02","CRY2 ZT08","FHY1 ZT04","LUX ZT10", "LUX ZT12", "PIF3 ZT08","PIF4 ZT04","PIF5 ZT04","PRR7 ZT12","PRR9 ZT??","ELF3 ZT00", "ELF3 ZT04", "ELF4 ZT10")
bed.files["PHYA ZT00"]
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
bed1 <- bed.files[input$tf1_bed] #Set the bed to read
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
read.table(file="data/bed_files/PHYA_peaks.narrowPeak",header = F, as.is = T)
setwd("~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev")
setwd("~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
chromosomes.length <- read.table(file="../../../web_apps/peak_visualizer/data/bed_files/atha_chr_lengths.txt",as.is=T)[[1]]
number.randomisation <- 1000
bed.files <- list.files(path = "../../../web_apps/peak_visualizer/data/bed_files/", pattern = "peaks.narrowPeak")
combinations <- expand.grid(bed.files, bed.files)
bed.intersections <- matrix(ncol = 6, nrow = nrow(combinations))
colnames(bed.intersections) <- c("TF1", "TF2", "p-value", "fdr", "number of intersections", "Genes" )
txdb <- TxDb.Athaliana.BioMart.plantsmart28
i <- 26
total.tests <- nrow(combinations)
# total.tests <- 50
# Start the clock!
ptm <- proc.time()
for (i in 1:total.tests)
# for (i in 1:nrow(combinations))
{
# print(paste0("test number ", i, " of ", nrow(combinations)))
print(paste0((i/total.tests)*100, " %"))
peaks1 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,1]))
peaks2 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,2]))
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)
if (nrow(real.intersection) > 0)
{
random.intersections <- vector(mode = "numeric",length=number.randomisation) #Creating vector
for(j in 1:number.randomisation)
{
print(j)
random.peaks2 <- matrix(nrow=nrow(peaks2),ncol=3) #Matriz con 3 columnas, una para el cromosoma, otra para el comienzo y otra para el final de la región aleatoria.
for(k in 1:nrow(peaks2))
{
current.chr <- peaks2[k,1][[1]] #Chr de la iésima marca real
current.start <- peaks2[k,2] #Start de la iésima marca real
current.end <- peaks2[k,3] #End de la iésima marca real
current.length <- current.end - current.start #Longitud de la iésima marca real
chr.length <- chromosomes.length[current.chr] #Length del actual cromosoma
#Ahora genero los mismos datos para regiones aleatorias
random.start <- floor(runif(n = 1,min = 1,max = chr.length))
random.end <- random.start + current.length
random.peaks2[k,1] <- current.chr
random.peaks2[k,2] <- random.start
random.peaks2[k,3] <- random.end
}
random.intersections[j] <- nrow(intersectBed(peaks.set1 = peaks1, peaks.set2 = random.peaks2 ))
}
p.value <- sum(random.intersections > nrow(real.intersection)) / number.randomisation
if( p.value == 0)
{
p.value <- 1/number.randomisation
}
colnames(real.intersection) <- c("chromosome", "start", "end")
granges.intersection <- makeGRangesFromDataFrame(real.intersection,
keep.extra.columns=FALSE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field="chromosome",
start.field="start",
end.field="end",
starts.in.df.are.0based=FALSE)
peakAnno <- annotatePeak(granges.intersection, tssRegion=c(-2000, 2000),
TxDb=txdb, annoDb="org.At.tair.db")
annot.peaks <- as.data.frame(peakAnno)
target.genes <- subset(annot.peaks, distanceToTSS >= 2000 | distanceToTSS <= -2000)$geneId
target.genes <- paste(target.genes, collapse = ",")
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- p.value
bed.intersections[i,5] <- nrow(real.intersection)
bed.intersections[i,6] <- target.genes
} else
{
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- NA
bed.intersections[i,5] <- "No intersection"
bed.intersections[i,6] <- NA
}
}
write.table(bed.intersections, file = "bed_intersections.txt", sep = "\t", row.names = FALSE)
# Stop the clock
proc.time() - ptm
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/intersections")
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/intersections")
chromosomes.length <- read.table(file="../../../web_apps/peak_visualizer/data/bed_files/atha_chr_lengths.txt",as.is=T)[[1]]
number.randomisation <- 1000
bed.files <- list.files(path = "../../../web_apps/peak_visualizer/data/bed_files/", pattern = "peaks.narrowPeak")
combinations <- expand.grid(bed.files, bed.files)
bed.intersections <- matrix(ncol = 6, nrow = nrow(combinations))
colnames(bed.intersections) <- c("TF1", "TF2", "p-value", "fdr", "number of intersections", "Genes" )
txdb <- TxDb.Athaliana.BioMart.plantsmart28
i <- 26
total.tests <- nrow(combinations)
# total.tests <- 50
# Start the clock!
ptm <- proc.time()
for (i in 1:total.tests)
# for (i in 1:nrow(combinations))
{
# print(paste0("test number ", i, " of ", nrow(combinations)))
print(paste0((i/total.tests)*100, " %"))
peaks1 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,1]))
peaks2 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,2]))
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)
if (nrow(real.intersection) > 0)
{
random.intersections <- vector(mode = "numeric",length=number.randomisation) #Creating vector
for(j in 1:number.randomisation)
{
print(j)
random.peaks2 <- matrix(nrow=nrow(peaks2),ncol=3) #Matriz con 3 columnas, una para el cromosoma, otra para el comienzo y otra para el final de la región aleatoria.
for(k in 1:nrow(peaks2))
{
current.chr <- peaks2[k,1][[1]] #Chr de la iésima marca real
current.start <- peaks2[k,2] #Start de la iésima marca real
current.end <- peaks2[k,3] #End de la iésima marca real
current.length <- current.end - current.start #Longitud de la iésima marca real
chr.length <- chromosomes.length[current.chr] #Length del actual cromosoma
#Ahora genero los mismos datos para regiones aleatorias
random.start <- floor(runif(n = 1,min = 1,max = chr.length))
random.end <- random.start + current.length
random.peaks2[k,1] <- current.chr
random.peaks2[k,2] <- random.start
random.peaks2[k,3] <- random.end
}
random.intersections[j] <- nrow(intersectBed(peaks.set1 = peaks1, peaks.set2 = random.peaks2 ))
}
p.value <- sum(random.intersections > nrow(real.intersection)) / number.randomisation
if( p.value == 0)
{
p.value <- 1/number.randomisation
}
colnames(real.intersection) <- c("chromosome", "start", "end")
granges.intersection <- makeGRangesFromDataFrame(real.intersection,
keep.extra.columns=FALSE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field="chromosome",
start.field="start",
end.field="end",
starts.in.df.are.0based=FALSE)
peakAnno <- annotatePeak(granges.intersection, tssRegion=c(-2000, 2000),
TxDb=txdb, annoDb="org.At.tair.db")
annot.peaks <- as.data.frame(peakAnno)
target.genes <- subset(annot.peaks, distanceToTSS >= 2000 | distanceToTSS <= -2000)$geneId
target.genes <- paste(target.genes, collapse = ",")
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- p.value
bed.intersections[i,5] <- nrow(real.intersection)
bed.intersections[i,6] <- target.genes
} else
{
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- NA
bed.intersections[i,5] <- "No intersection"
bed.intersections[i,6] <- NA
}
}
chromosomes.length <- read.table(file="../../../web_apps/peak_visualizer/data/bed_files/atha_chr_lengths.txt",as.is=T)[[1]]
number.randomisation <- 1000
bed.files <- list.files(path = "../../../web_apps/peak_visualizer/data/bed_files/", pattern = "peaks.narrowPeak")
combinations <- expand.grid(bed.files, bed.files)
bed.intersections <- matrix(ncol = 6, nrow = nrow(combinations))
colnames(bed.intersections) <- c("TF1", "TF2", "p-value", "fdr", "number of intersections", "Genes" )
txdb <- TxDb.Athaliana.BioMart.plantsmart28
i <- 26
total.tests <- nrow(combinations)
# total.tests <- 50
# Start the clock!
ptm <- proc.time()
for (i in 1:total.tests)
# for (i in 1:nrow(combinations))
{
# print(paste0("test number ", i, " of ", nrow(combinations)))
print(paste0((i/total.tests)*100, " %"))
peaks1 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,1]))
peaks2 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,2]))
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)
if (nrow(real.intersection) > 0)
{
random.intersections <- vector(mode = "numeric",length=number.randomisation) #Creating vector
for(j in 1:number.randomisation)
{
print(j)
random.peaks2 <- matrix(nrow=nrow(peaks2),ncol=3) #Matriz con 3 columnas, una para el cromosoma, otra para el comienzo y otra para el final de la región aleatoria.
for(k in 1:nrow(peaks2))
{
current.chr <- peaks2[k,1][[1]] #Chr de la iésima marca real
current.start <- peaks2[k,2] #Start de la iésima marca real
current.end <- peaks2[k,3] #End de la iésima marca real
current.length <- current.end - current.start #Longitud de la iésima marca real
chr.length <- chromosomes.length[current.chr] #Length del actual cromosoma
#Ahora genero los mismos datos para regiones aleatorias
random.start <- floor(runif(n = 1,min = 1,max = chr.length))
random.end <- random.start + current.length
random.peaks2[k,1] <- current.chr
random.peaks2[k,2] <- random.start
random.peaks2[k,3] <- random.end
}
random.intersections[j] <- nrow(intersectBed(peaks.set1 = peaks1, peaks.set2 = random.peaks2 ))
}
p.value <- sum(random.intersections > nrow(real.intersection)) / number.randomisation
if( p.value == 0)
{
p.value <- 1/number.randomisation
}
colnames(real.intersection) <- c("chromosome", "start", "end")
granges.intersection <- makeGRangesFromDataFrame(real.intersection,
keep.extra.columns=FALSE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field="chromosome",
start.field="start",
end.field="end",
starts.in.df.are.0based=FALSE)
peakAnno <- annotatePeak(granges.intersection, tssRegion=c(-2000, 2000),
TxDb=txdb, annoDb="org.At.tair.db")
annot.peaks <- as.data.frame(peakAnno)
target.genes <- subset(annot.peaks, distanceToTSS >= 2000 | distanceToTSS <= -2000)$geneId
target.genes <- paste(target.genes, collapse = ",")
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- p.value
bed.intersections[i,5] <- nrow(real.intersection)
bed.intersections[i,6] <- target.genes
} else
{
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- NA
bed.intersections[i,5] <- "No intersection"
bed.intersections[i,6] <- NA
}
}
