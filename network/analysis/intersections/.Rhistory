shiny::runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
install.packages("ggplot2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.At.tair.db", version = "3.8")
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
inputId$tf1 <- "PRR5"
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
intersectSets
result
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/intersections")
##Reading the two sets TF target genes
tf1 <- read.table(file = "../../../web_apps/peak_visualizer/data/targets_in_network/CCA1_ZT02_targets_in_network.txt",
header = FALSE, as.is = TRUE)
tf2 <- read.table(file="../../../web_apps/peak_visualizer/data/targets_in_network/LHY_targets_in_network.txt",
header = FALSE, as.is = TRUE)
#Reading the group of genes peaking at specific time
genes.peak.zt <- read.table(file = "../../../network/clusters/peak_ZT0.txt",
header = FALSE, as.is = TRUE)
intersectSets(tf1, tf2, genes.peak.zt)
intersectSets <- function(tf1,tf2,set.of.genes){
intersection.data <- list()
sets <- c(tf1, tf2, set.of.genes)
#names(sets) <- c("cca1", "lhy", "peakZT0")
results <- supertest(x = sets, n = 6830)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- intersection.genes #hay que meter gene.table con info
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
return(intersection.data)
}
intersectSets(tf1, tf2, genes.peak.zt)
intersect.genes <- result[3][[1]]
result <- intersectSets(tf1, tf2, genes.peak.zt)
intersect.genes <- result[3][[1]]
intersect.genes
# columns(org.At.tair.db)
my.key <- keys(org.At.tair.db, keytype="ENTREZID")
my.col <- c("SYMBOL", "TAIR")
my.key
my.col <- c("SYMBOL", "TAIR")
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
my.col
intersectSets(tf1, tf2, genes.peak.zt)
result <- intersectSets(tf1, tf2, genes.peak.zt)
intersect.genes <- result[3][[1]]
intersect.genes <- result[3][[1]]
intersect.genes
columns(org.At.tair.db)
my.key <- keys(org.At.tair.db, keytype="ENTREZID")
head(my.key)
my.key <- keys(org.At.tair.db, keytype="ENTREZID")
my.col <- c("SYMBOL", "TAIR")
my.col
?select
columns(org.At.tair.db)
my.key <- keys(org.At.tair.db, keytype="ENTREZID")
my.col <- c("SYMBOL", "TAIR")
alias2symbol.table <- select(org.At.tair.db, keys=my.key, columns=my.col, keytype="ENTREZID")
alias2symbol.table
alias <- alias2symbol.table$SYMBOL
names(alias) <- alias2symbol.table$TAIR
#target.alias <- alias[target.genes]
alias[is.na(alias)] <- ""
alias
agis <-alias2symbol.table$TAIR
names(agis) <- alias2symbol.table$SYMBOL
agis
agis[is.na(agis)] <- ""
agis(intersect.genes)
agis[intersect.genes]
intersect.genes
alias <- alias2symbol.table$SYMBOL
names(alias) <- alias2symbol.table$TAIR
alias[intersect.genes]
alias <- alias2symbol.table$SYMBOL
names(alias) <- alias2symbol.table$TAIR
alias[is.na(alias)] <- ""
alias[intersect.genes]
table.of.genes <- matrix(ncol=5, nrow = length(intersection.genes))
table.of.genes <- matrix(ncol=5, nrow = length(intersecti.genes))
table.of.genes <- matrix(ncol=5, nrow = length(intersect.genes))
table.of.genes
colnames(table.of.genes) <- c("Primary_Symbol", "AGI", "Description", "Peak", "Trough")
colnames(table.of.genes) <- c("Primary_Symbol", "AGI", "Description", "Peak", "Trough")
table.of.genes
table.of.genes[,"AGI"] <- intersect.genes
table.of.genes
table.of.genes[,"Primary_Symbol"] <- alias[intersect.genes]
table.of.genes
#Read expression data table
expression.data <- read.table(file="data/athaliana_neutral_circadian_genes.txt",
as.is = TRUE, header = TRUE, row.names = NULL)
#Read expression data table
expression.data <- read.table(file="../../../web_apps/network_visualizer/data/athaliana_neutral_circadian_genes.txt",
as.is = TRUE, header = TRUE, row.names = NULL)
head(expression.data)
expression.data[alias[intersect.genes],]
alias[intersect.genes]
alias[intersect.genes]
names(alias[intersect.genes])
expression.data[intersect.genes,]
expression.data[1,3]
head(expression.data)
subset(expression.data, genes == intersect.genes)
#Read expression data table
expression.data <- read.table(file="../../../web_apps/network_visualizer/data/athaliana_neutral_circadian_genes.txt",
as.is = TRUE, header = TRUE, row.names = NULL)
head(expression.data)
intersect.genes
subset(expression.data, genes == intersect.genes)
subset(expression.data, expression.data$genes == intersect.genes)
subset(expression.data, expression.data$genes == intersect.genes)
subset(expression.data, genes == intersect.genes)
intersect.genes
#Read expression data table
expression.data <- read.table(file="../../../web_apps/network_visualizer/data/athaliana_neutral_circadian_genes.txt",
as.is = TRUE, header = TRUE, row.names = NULL)
head(expression.data)
subset(expression.data, genes == intersect.genes)
length(intersect.genes)
head(expression.data)
subset(expression.data, genes == "ATMG00750")
subset(expression.data, genes == as.character(intersection.genes))
subset(expression.data, genes == as.character(intersect.genes))
subset(expression.data, genes == as.vector(intersect.genes))
expression.data$genes == intersect.genes
expression.data$peaks[expression.data$genes == intersect.genes]
length(expression.data$genes)
length(expression.data$peaks)
intersect.genes
class(intersect.genes)
as.vector(intersect.genes)
class(as.vector(intersect.genes))
class(as.list(intersect.genes))
subset(expression.data, genes == as.list(intersect.genes))
test <- c("AT1G13260", "AT2G18300")
class(test)
test
intersect.genes
intersect.genes[1]
subset(expression.data, genes == "AT1G01620")
result
result[3]
result[3][[1]]
intersect.genes
test
subset(expression.data, genes == intersect.genes)
