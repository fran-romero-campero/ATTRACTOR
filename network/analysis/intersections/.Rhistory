description <- network.data$description
names(description) <- network.data$names
description[1:3]
attractor.data <- read.table(file="../../attractor_network_representation.tsv",
sep = "\t", as.is = TRUE, row.names = NULL, header = TRUE)
head(attractor.data)
gene.names <- attractor.data$names
indegree.threshold <- quantile(attractor.data$indegree, prob=0.90)
indegree.top <- gene.names[attractor.data$indegree > indegree.threshold]
outdegree.threshold <- quantile(attractor.data$outdegree, prob=0.90)
outdegree.top <- gene.names[attractor.data$outdegree > outdegree.threshold]
attractor.degree <- attractor.data$indegree + attractor.data$outdegree
degree.threshold <- quantile(attractor.degree, prob=0.90)
degree.top <- gene.names[attractor.degree > degree.threshold]
attractor.data$transitivity[is.na(attractor.data$transitivity)] <- 0
trans.threshold <- quantile(attractor.data$transitivity, prob=0.90)
trans.top <- gene.names[attractor.data$trans > trans.threshold]
closeness.threshold <- quantile(attractor.data$closeness, prob=0.90)
closeness.top <- gene.names[attractor.data$closeness > closeness.threshold]
betweeness.threshold <- quantile(attractor.data$betweeness, prob=0.90)
betweeness.top <- gene.names[attractor.data$betweeness > betweeness.threshold]
eccentricity.threshold <- quantile(attractor.data$eccentricity, prob=0.90)
eccentricity.top <- gene.names[attractor.data$eccentricity > eccentricity.threshold]
##--Function to perform an intersection of TWO sets--##
intersect2sets <- function(set1, set2, alias, gene.descriptions){
sets <- list(set1, set2)
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes.agi <- intersection.genes
intersection.genes.primary.symbol <- alias[intersection.genes]
names(intersection.genes.primary.symbol) <- NULL
gene.table <- matrix(nrow=length(intersection.genes), ncol=3)
colnames(gene.table) <- c("AGI", "Primary Symbol", "Description")
gene.table[,1] <- intersection.genes.agi
gene.table[,2] <- intersection.genes.primary.symbol
#  gene.table[,3] <- description
intersection.genes.description <- gene.descriptions[intersection.genes]
names(intersection.genes.description) <- NULL
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- data.frame(intersection.genes,intersection.genes.primary.symbol,intersection.genes.description,stringsAsFactors = F)
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
return(intersection.data)
}
intersect2sets(set1=degree.top, set2 = genes.peak.zt, alias=alias, gene.descriptions = description)
description <- network.data$description
names(description) <- network.data$names
description[1:3]
set1=degree.top
set2 = genes.peak.zt
alias=alias
gene.descriptions = description
sets <- list(set1, set2)
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes.agi <- intersection.genes
intersection.genes.primary.symbol <- alias[intersection.genes]
names(intersection.genes.primary.symbol) <- NULL
gene.table <- matrix(nrow=length(intersection.genes), ncol=3)
colnames(gene.table) <- c("AGI", "Primary Symbol", "Description")
gene.table[,1] <- intersection.genes.agi
gene.table[,2] <- intersection.genes.primary.symbol
intersection.genes.description <- gene.descriptions[intersection.genes]
names(intersection.genes.description) <- NULL
intersection.data[[1]] <- p.value
##--Function to perform an intersection of TWO sets--##
intersect2sets <- function(set1, set2, alias, gene.descriptions){
intersection.data <- list()
sets <- list(set1, set2)
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes.agi <- intersection.genes
intersection.genes.primary.symbol <- alias[intersection.genes]
names(intersection.genes.primary.symbol) <- NULL
gene.table <- matrix(nrow=length(intersection.genes), ncol=3)
colnames(gene.table) <- c("AGI", "Primary Symbol", "Description")
gene.table[,1] <- intersection.genes.agi
gene.table[,2] <- intersection.genes.primary.symbol
#  gene.table[,3] <- description
intersection.genes.description <- gene.descriptions[intersection.genes]
names(intersection.genes.description) <- NULL
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- data.frame(intersection.genes,intersection.genes.primary.symbol,intersection.genes.description,stringsAsFactors = F)
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
return(intersection.data)
}
intersect2sets(set1=degree.top, set2 = genes.peak.zt, alias=alias, gene.descriptions = description)
#####---Loop to perform all possible intersection between clusters and high top values genes---#####
clusters.files <- list.files(path = "../../../web_apps/peak_visualizer/data/clusters", pattern = "txt")
top.genes <- list(degree.top, trans.top, closeness.top, betweeness.top, eccentricity.top)
names(top.genes) <- c("Degree", "Transitivity", "Closeness", "Betweeness", "Eccentricity")
#Initialize matrix to store the results
intersection.table <- matrix(ncol=5, nrow = length(clusters.files))
colnames(intersection.table) <- c("peak", "through", "p-value", "enrichment", "Intersection Genes")
head(intersection.table)
for (i in 1:length(top.genes))
{
for (j in 1:length(clusters.files))
{
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("../../../web_apps/peak_visualizer/data/clusters/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,4] <- enrichment
intersection.table[j,5] <- paste(intersect.genes, collapse= ",")
# intersection.table <- rbind(intersection.table, current.intersection)
}
write.table(intersection.table,
file=paste0("topvalues_clusters/intersections_", names(top.genes[i]),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
head(intersection.table)
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(clusters.files))
colnames(intersection.table) <- c("peak", "through", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
i <- 1
j <- 6
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("../../../web_apps/peak_visualizer/data/clusters/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,4] <- enrichment
intersection.table[j,5] <- paste(intersect.genes, collapse= ",")
i <- 1
for (j in 1:length(clusters.files))
{
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("../../../web_apps/peak_visualizer/data/clusters/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table$p-value, method = "BH")
intersection.table[[3]]
intersection.table[j,3]
intersection.table[,3]
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
fdr.values
intersection.table[j,4] <- fdr.values
length(fdr.values)
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("topvalues_clusters/intersections_", names(top.genes[i]),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
for (i in 1:length(top.genes))
{
for (j in 1:length(clusters.files))
{
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("../../../web_apps/peak_visualizer/data/clusters/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("topvalues_clusters/intersections_", names(top.genes[i]),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
paste0("topvalues_clusters/intersections_", names(top.genes[i]), as.character(threshold),".txt")
threshold <- 0.90
paste0("topvalues_clusters/intersections_", names(top.genes[i]), as.character(threshold),".txt")
threshold <- 0.90
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
indegree.top <- gene.names[attractor.data$indegree > indegree.threshold]
outdegree.threshold <- quantile(attractor.data$outdegree, prob=threshold)
outdegree.top <- gene.names[attractor.data$outdegree > outdegree.threshold]
attractor.degree <- attractor.data$indegree + attractor.data$outdegree
degree.threshold <- quantile(attractor.degree, prob=threshold)
degree.top <- gene.names[attractor.degree > degree.threshold]
attractor.data$transitivity[is.na(attractor.data$transitivity)] <- 0
trans.threshold <- quantile(attractor.data$transitivity, prob=threshold)
trans.top <- gene.names[attractor.data$trans > trans.threshold]
closeness.threshold <- quantile(attractor.data$closeness, prob=threshold)
closeness.top <- gene.names[attractor.data$closeness > closeness.threshold]
betweeness.threshold <- quantile(attractor.data$betweeness, prob=threshold)
betweeness.top <- gene.names[attractor.data$betweeness > betweeness.threshold]
eccentricity.threshold <- quantile(attractor.data$eccentricity, prob=threshold)
eccentricity.top <- gene.names[attractor.data$eccentricity > eccentricity.threshold]
##--Function to perform an intersection of TWO sets--##
intersect2sets <- function(set1, set2, alias, gene.descriptions){
intersection.data <- list()
sets <- list(set1, set2)
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes.agi <- intersection.genes
intersection.genes.primary.symbol <- alias[intersection.genes]
names(intersection.genes.primary.symbol) <- NULL
gene.table <- matrix(nrow=length(intersection.genes), ncol=3)
colnames(gene.table) <- c("AGI", "Primary Symbol", "Description")
gene.table[,1] <- intersection.genes.agi
gene.table[,2] <- intersection.genes.primary.symbol
#  gene.table[,3] <- description
intersection.genes.description <- gene.descriptions[intersection.genes]
names(intersection.genes.description) <- NULL
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- data.frame(intersection.genes,intersection.genes.primary.symbol,intersection.genes.description,stringsAsFactors = F)
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
return(intersection.data)
}
intersect2sets(set1=degree.top, set2 = genes.peak.zt, alias=alias, gene.descriptions = description)
#####---Loop to perform all possible intersection between clusters and high top values genes---#####
clusters.files <- list.files(path = "../../../web_apps/peak_visualizer/data/clusters", pattern = "txt")
top.genes <- list(degree.top, trans.top, closeness.top, betweeness.top, eccentricity.top)
names(top.genes) <- c("Degree", "Transitivity", "Closeness", "Betweeness", "Eccentricity")
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(clusters.files))
colnames(intersection.table) <- c("peak", "through", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
for (i in 1:length(top.genes))
{
for (j in 1:length(clusters.files))
{
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("../../../web_apps/peak_visualizer/data/clusters/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("topvalues_clusters/intersections_", names(top.genes[i]), as.character(threshold),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
indegree.top <- gene.names[attractor.data$indegree > indegree.threshold]
outdegree.threshold <- quantile(attractor.data$outdegree, prob=threshold)
outdegree.top <- gene.names[attractor.data$outdegree > outdegree.threshold]
attractor.degree <- attractor.data$indegree + attractor.data$outdegree
degree.threshold <- quantile(attractor.degree, prob=threshold)
degree.top <- gene.names[attractor.degree > degree.threshold]
attractor.data$transitivity[is.na(attractor.data$transitivity)] <- 0
trans.threshold <- quantile(attractor.data$transitivity, prob=threshold)
trans.top <- gene.names[attractor.data$trans > trans.threshold]
closeness.threshold <- quantile(attractor.data$closeness, prob=threshold)
closeness.top <- gene.names[attractor.data$closeness > closeness.threshold]
betweeness.threshold <- quantile(attractor.data$betweeness, prob=threshold)
betweeness.top <- gene.names[attractor.data$betweeness > betweeness.threshold]
eccentricity.threshold <- quantile(attractor.data$eccentricity, prob=threshold)
eccentricity.top <- gene.names[attractor.data$eccentricity > eccentricity.threshold]
##--Function to perform an intersection of TWO sets--##
intersect2sets <- function(set1, set2, alias, gene.descriptions){
intersection.data <- list()
sets <- list(set1, set2)
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes.agi <- intersection.genes
intersection.genes.primary.symbol <- alias[intersection.genes]
names(intersection.genes.primary.symbol) <- NULL
gene.table <- matrix(nrow=length(intersection.genes), ncol=3)
colnames(gene.table) <- c("AGI", "Primary Symbol", "Description")
gene.table[,1] <- intersection.genes.agi
gene.table[,2] <- intersection.genes.primary.symbol
#  gene.table[,3] <- description
intersection.genes.description <- gene.descriptions[intersection.genes]
names(intersection.genes.description) <- NULL
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- data.frame(intersection.genes,intersection.genes.primary.symbol,intersection.genes.description,stringsAsFactors = F)
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
return(intersection.data)
}
intersect2sets(set1=degree.top, set2 = genes.peak.zt, alias=alias, gene.descriptions = description)
#####---Loop to perform all possible intersection between clusters and high top values genes---#####
clusters.files <- list.files(path = "../../../web_apps/peak_visualizer/data/clusters", pattern = "txt")
top.genes <- list(degree.top, trans.top, closeness.top, betweeness.top, eccentricity.top)
names(top.genes) <- c("Degree", "Transitivity", "Closeness", "Betweeness", "Eccentricity")
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(clusters.files))
colnames(intersection.table) <- c("peak", "through", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
for (i in 1:length(top.genes))
{
for (j in 1:length(clusters.files))
{
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("../../../web_apps/peak_visualizer/data/clusters/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("topvalues_clusters/intersections_", names(top.genes[i]), as.character(threshold),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
threshold
threshold <- 0.70
indegree.threshold <- quantile(attractor.data$indegree, prob=threshold)
indegree.top <- gene.names[attractor.data$indegree > indegree.threshold]
outdegree.threshold <- quantile(attractor.data$outdegree, prob=threshold)
outdegree.top <- gene.names[attractor.data$outdegree > outdegree.threshold]
attractor.degree <- attractor.data$indegree + attractor.data$outdegree
degree.threshold <- quantile(attractor.degree, prob=threshold)
degree.top <- gene.names[attractor.degree > degree.threshold]
attractor.data$transitivity[is.na(attractor.data$transitivity)] <- 0
trans.threshold <- quantile(attractor.data$transitivity, prob=threshold)
trans.top <- gene.names[attractor.data$trans > trans.threshold]
closeness.threshold <- quantile(attractor.data$closeness, prob=threshold)
closeness.top <- gene.names[attractor.data$closeness > closeness.threshold]
betweeness.threshold <- quantile(attractor.data$betweeness, prob=threshold)
betweeness.top <- gene.names[attractor.data$betweeness > betweeness.threshold]
eccentricity.threshold <- quantile(attractor.data$eccentricity, prob=threshold)
eccentricity.top <- gene.names[attractor.data$eccentricity > eccentricity.threshold]
##--Function to perform an intersection of TWO sets--##
intersect2sets <- function(set1, set2, alias, gene.descriptions){
intersection.data <- list()
sets <- list(set1, set2)
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes.agi <- intersection.genes
intersection.genes.primary.symbol <- alias[intersection.genes]
names(intersection.genes.primary.symbol) <- NULL
gene.table <- matrix(nrow=length(intersection.genes), ncol=3)
colnames(gene.table) <- c("AGI", "Primary Symbol", "Description")
gene.table[,1] <- intersection.genes.agi
gene.table[,2] <- intersection.genes.primary.symbol
#  gene.table[,3] <- description
intersection.genes.description <- gene.descriptions[intersection.genes]
names(intersection.genes.description) <- NULL
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- data.frame(intersection.genes,intersection.genes.primary.symbol,intersection.genes.description,stringsAsFactors = F)
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
return(intersection.data)
}
intersect2sets(set1=degree.top, set2 = genes.peak.zt, alias=alias, gene.descriptions = description)
#####---Loop to perform all possible intersection between clusters and high top values genes---#####
clusters.files <- list.files(path = "../../../web_apps/peak_visualizer/data/clusters", pattern = "txt")
top.genes <- list(degree.top, trans.top, closeness.top, betweeness.top, eccentricity.top)
names(top.genes) <- c("Degree", "Transitivity", "Closeness", "Betweeness", "Eccentricity")
#Initialize matrix to store the results
intersection.table <- matrix(ncol=6, nrow = length(clusters.files))
colnames(intersection.table) <- c("peak", "through", "p-value", "fdr", "enrichment", "Intersection Genes")
head(intersection.table)
for (i in 1:length(top.genes))
{
for (j in 1:length(clusters.files))
{
current.top <- top.genes[i][[1]]
set.of.genes <- read.table(file=paste0("../../../web_apps/peak_visualizer/data/clusters/",clusters.files[j]),
header = FALSE, as.is = TRUE)[[1]]
print("TEST")
result <- intersect2sets(set1 = current.top, set2 = set.of.genes, alias = alias, gene.descriptions = description)
p.value <- result[1][[1]]
enrichment <- result[2][[1]]
intersect.genes <- result[3][[1]]$intersection.genes
circadian.info <- strsplit(clusters.files[j], split = "peak_")[[1]][2]
trough.info <- strsplit(circadian.info, split = "_")[[1]][3]
intersection.table[j,1]<- strsplit(circadian.info, split = "_")[[1]][1]
intersection.table[j,2] <- strsplit(trough.info, split = ".txt")[[1]][1]
intersection.table[j,3] <- p.value
intersection.table[j,5] <- enrichment
intersection.table[j,6] <- paste(intersect.genes, collapse= ",")
}
fdr.values <- p.adjust(intersection.table[,3], method = "BH")
intersection.table[,4] <- fdr.values
write.table(intersection.table,
file=paste0("topvalues_clusters/intersections_", names(top.genes[i]), as.character(threshold),".txt"),
sep="\t", row.names = FALSE, quote = FALSE)
}
#install.packages("SuperExactTest")
library(SuperExactTest)
##Reading the two sets TF target genes
tf1 <- read.table(file = "../../../web_apps/peak_visualizer/data/targets_in_network/CCA1_ZT02_targets_in_network.txt",
header = FALSE, as.is = TRUE)[[1]]
tf2 <- read.table(file="../../../web_apps/peak_visualizer/data/targets_in_network/LHY_targets_in_network.txt",
header = FALSE, as.is = TRUE)[[1]]
#Reading the group of genes peaking at specific time
genes.peak.zt <- read.table(file = "../../../network/clusters/peak_ZT0.txt",
header = FALSE, as.is = TRUE)[[1]]
#Establishing the list of sets to test
sets <- list(tf1, tf2, genes.peak.zt)
##Get translation between AGI and primary symbol
library(org.At.tair.db)
columns(org.At.tair.db)
my.key <- keys(org.At.tair.db, keytype="ENTREZID")
my.col <- c("SYMBOL", "TAIR")
alias2symbol.table <- select(org.At.tair.db, keys=my.key, columns=my.col, keytype="ENTREZID")
alias <- alias2symbol.table$SYMBOL
names(alias) <- alias2symbol.table$TAIR
alias[is.na(alias)] <- ""
## Get description of each AGI symbol
network.data <- read.table(file="../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
description <- network.data$description
names(description) <- network.data$names
description[1:3]
#This is the function, called intersectSets
intersectSets <- function(tf1,tf2,set.of.genes, alias,gene.descriptions){
intersection.data <- list()
sets <- list(tf1, tf2, set.of.genes)
#names(sets) <- c("cca1", "lhy", "peakZT0")
results <- supertest(x = sets, n = 5778)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.genes.agi <- intersection.genes
intersection.genes.primary.symbol <- alias[intersection.genes]
names(intersection.genes.primary.symbol) <- NULL
gene.table <- matrix(nrow=length(intersection.genes), ncol=3)
colnames(gene.table) <- c("AGI", "Primary Symbol", "Description")
gene.table[,1] <- intersection.genes.agi
gene.table[,2] <- intersection.genes.primary.symbol
#  gene.table[,3] <- description
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- gene.table
intersection.genes.description <- gene.descriptions[intersection.genes]
names(intersection.genes.description) <- NULL
intersection.data[[3]] <- data.frame(intersection.genes,intersection.genes.primary.symbol,intersection.genes.description,stringsAsFactors = F)
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
return(intersection.data)
}
