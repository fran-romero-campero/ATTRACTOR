time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/network_motives")
## Transcription factors AGI ids and names
tfs.names <- c("CCA1","LHY", "TOC1", "PRR5", "PRR7", "PRR9", "PHYA","PHYB",
"CRY2","FHY1","LUX","PIF3","PIF4","PIF5","ELF4","ELF3")
tf.ids <- c("AT2G46830", "AT1G01060", "AT5G61380", "AT5G24470", "AT5G02810", "AT2G46790",
"AT1G09570", "AT2G18790", "AT1G04400", "AT2G37678", "AT3G46640", "AT1G09530",
"AT2G43010", "AT3G59060", "AT2G40080", "AT2G25930")
names(tf.ids) <- tfs.names
names(tfs.names) <- tf.ids
## Function to extract the TF names of all the different instances associated with
## a motif
extract.different.maps <- function(motif.maps,tfs.names)
{
motifs.instances <- list(tfs.names[sort(names(motif.maps[[1]]))])
motif.size <- length(motifs.instances[[1]])
number.different.motifs <- 2
for(i in 2:length(motif.maps))
{
new.motif <- TRUE
current.motif <- tfs.names[sort(names(motif.maps[[i]]))]
print(current.motif)
for(j in 1:length(motifs.instances))
{
if(sum(motifs.instances[[j]] == current.motif) == motif.size)
{
new.motif <- FALSE
break
}
}
if(new.motif)
{
motifs.instances[[number.different.motifs]] <- current.motif
number.different.motifs <- number.different.motifs + 1
}
}
return(motifs.instances)
}
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
attractor.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
## Load three nodes motifs indeces
motifs.3.ind <- read.table(file="indeces_significant_motifs_3.txt")[[1]]
## Load three nodes motifs occurences in attractor
occurrences.3 <- read.table(file="occurency_subgraph_three_nodes_in_attractor.txt")[[1]]
## Motif number 1
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[1]))
occurrences.3[motifs.3.ind[1] + 1]
## Motif number 2
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[2]))
## Motif number 3
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[3]))
occurrences.3[motifs.3.ind[3] + 1]
## Motif number 4
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[4]))
occurrences.3[motifs.3.ind[4] + 1]
## Motif number 5
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[5]))
occurrences.3[motifs.3.ind[5] + 1]
## Motif number 6
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[6]))
occurrences.3[motifs.3.ind[6] + 1]
maps.motif.6 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[6]),
attractor.graph, all.maps=TRUE)[["maps"]]
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[7]))
occurrences.3[motifs.3.ind[7] + 1]
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[8]))
occurrences.3[motifs.3.ind[8] + 1]
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[9]))
occurrences.3[motifs.3.ind[9] + 1]
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[9]))
## Motif number 6
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[6]))
## Motif number 8
plot.igraph(graph.isocreate(size=3, number=motifs.3.ind[8]))
occurrences.3[motifs.3.ind[8] + 1]
maps.motif.8 <- graph.subisomorphic.lad(graph.isocreate(size=3, number=motifs.3.ind[8]),
attractor.graph, all.maps=TRUE)[["maps"]]
length(maps.motif.8)
length(maps.motif.8)
maps.motif.8[1:3]
names(maps.motifs[[1]])
maps.motif.8[1:3]
names(maps.motif[[1]])
names(maps.motif.8[[1]])
names(maps.motif.8[[1]])
first.intance <- names(maps.motif.8[[1]])
tfs.names[c(first.intance[c(1,3)])]
tfs.names[c(first.intance[c(1,3)])]
tfs.names[c(first.intance[c(1,3)])]
motifs.instances <- list(c(tfs.names[c(first.intance[c(1,3)])]))
motifs.instances
motifs.instances <- list(c(tfs.names[c(first.intance[c(1,3)])], tfs.names[first.intance[2]]))
motifs.instances
first.intance <- names(maps.motif.8[[1]])
first.intance
first.intance[2]
tfs.names[first.intance[2]]
tfs.names
first.intance[2]
motifs.instances <- list(c(tfs.names[c(first.intance[c(1,3)])], first.intance[2]))
motifs.instances
number.different.motifs <- 2
i <- 2
new.motif <- TRUE
i <- 2
new.motif <- TRUE
current.regulators <- tfs.names[names(motif.maps[[i]])[c(1,3)]]
current.regulators <- tfs.names[names(maps.motif.8[[i]])[c(1,3)]]
current.regulators
current.regulators <- sort(tfs.names[names(maps.motif.8[[i]])[c(1,3)]])
motifs.instances <- list(c(sort(tfs.names[c(first.intance[c(1,3)])]), first.intance[2]))
number.different.motifs <- 2
motifs.instances
i <- 2
new.motif <- TRUE
current.regulators <- sort(tfs.names[names(maps.motif.8[[i]])[c(1,3)]])
current.regulators
current.target <- names(maps.motif.8[[i]])[2]]
current.target <- names(maps.motif.8[[i]])[2]
current.target
current.regulators
j <- 1
sum(motifs.instances[[j]][1:2]
== current.regulators)
strsplit(motifs.instances[[j]][3],split=",")
current.target
first.intance <- names(maps.motif.8[[1]])
tfs.names[c(first.intance[c(1,3)])]
motifs.instances <- list(c(sort(tfs.names[c(first.intance[c(1,3)])]), first.intance[2]))
number.different.motifs <- 2
for(i in 2:length(motif.maps))
{
print(i)
new.motif <- TRUE
current.regulators <- sort(tfs.names[names(maps.motif.8[[i]])[c(1,3)]])
current.target <- names(maps.motif.8[[i]])[2]
#print(current.motif)
for(j in 1:length(motifs.instances))
{
if(sum(motifs.instances[[j]][1:2] == current.regulators) == 2)
{
if(!(current.target %in% strsplit(motifs.instances[[j]][3],split=",")[[1]]))
{
motifs.instances[[j]][3] <- paste(motifs.instances[[j]][3],current.target)
}
new.motif <- FALSE
break
}
}
if(new.motif)
{
motifs.instances[[number.different.motifs]] <- c(current.regulator,current.target)
number.different.motifs <- number.different.motifs + 1
}
}
for(i in 2:length(maps.motif.8))
{
print(i)
new.motif <- TRUE
current.regulators <- sort(tfs.names[names(maps.motif.8[[i]])[c(1,3)]])
current.target <- names(maps.motif.8[[i]])[2]
#print(current.motif)
for(j in 1:length(motifs.instances))
{
if(sum(motifs.instances[[j]][1:2] == current.regulators) == 2)
{
if(!(current.target %in% strsplit(motifs.instances[[j]][3],split=",")[[1]]))
{
motifs.instances[[j]][3] <- paste(motifs.instances[[j]][3],current.target)
}
new.motif <- FALSE
break
}
}
if(new.motif)
{
motifs.instances[[number.different.motifs]] <- c(current.regulator,current.target)
number.different.motifs <- number.different.motifs + 1
}
}
print(i)
new.motif <- TRUE
current.regulators <- sort(tfs.names[names(maps.motif.8[[i]])[c(1,3)]])
current.regulators
current.target <- names(maps.motif.8[[i]])[2]
current.target
length(motifs.instances)
motifs.instances
first.intance <- names(maps.motif.8[[1]])
tfs.names[c(first.intance[c(1,3)])]
motifs.instances <- list(c(sort(tfs.names[c(first.intance[c(1,3)])]), first.intance[2]))
number.different.motifs <- 2
for(i in 2:length(maps.motif.8))
{
print(i)
new.motif <- TRUE
current.regulators <- sort(tfs.names[names(maps.motif.8[[i]])[c(1,3)]])
current.target <- names(maps.motif.8[[i]])[2]
#print(current.motif)
for(j in 1:length(motifs.instances))
{
if(sum(motifs.instances[[j]][1:2] == current.regulators) == 2)
{
if(!(current.target %in% strsplit(motifs.instances[[j]][3],split=",")[[1]]))
{
motifs.instances[[j]][3] <- paste(motifs.instances[[j]][3],current.target,sep=",")
}
new.motif <- FALSE
break
}
}
if(new.motif)
{
motifs.instances[[number.different.motifs]] <- c(current.regulators,current.target)
number.different.motifs <- number.different.motifs + 1
}
}
length(maps.motif.8)
number.different.motifs
motifs.instances
motifs.instances[1]
write.table(x = motifs.instances,file = "motifs_instances_feedbackloop_multiple_output.txt",quote = F,sep = "\t",row.names = F,col.names = F)
get.first <- function(x)
{
return(x[[1]])
}
get.second <- function(x)
{
return(x[[2]])
}
get.third <- function(x)
{
return(x[[3]])
}
sapply(motifs.instances,get.first)
sapply(motifs.instances,get.second)
sapply(motifs.instances,get.third)
res.motif.instances <- data.frame(sapply(motifs.instances,get.first), sapply(motifs.instances,get.second), sapply(motifs.instances,get.third))
head(res.motif.instances)
write.table(x = res.motif.instances,file = "motifs_instances_feedbackloop_multiple_output.txt",quote = F,sep = "\t",row.names = F,col.names = F)
