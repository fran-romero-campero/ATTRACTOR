#   random.start <- floor(runif(n = 1,min = 1,max = chr.length))
#   random.end <- random.start + current.length
#
#   random.peaks2[k,1] <- current.chr
#   random.peaks2[k,2] <- random.start
#   random.peaks2[k,3] <- random.end
# }
random.peaks2 <- randomize.peaks(input.peaks = peaks2, chr.lengths = chromosomes.length)
random.intersections[j] <- intersectBed(peaks.set1 = peaks1, peaks.set2 = random.peaks2 )[[2]]
}
number.randomisation <- 100
for(j in 1:number.randomisation)
{
print(j)
# random.peaks2 <- matrix(nrow=nrow(peaks2),ncol=3) #Matriz con 3 columnas, una para el cromosoma, otra para el comienzo y otra para el final de la región aleatoria.
# for(k in 1:nrow(peaks2))
# {
#   current.chr <- peaks2[k,1][[1]] #Chr de la iésima marca real
#   current.start <- peaks2[k,2] #Start de la iésima marca real
#   current.end <- peaks2[k,3] #End de la iésima marca real
#   current.length <- current.end - current.start #Longitud de la iésima marca real
#
#   chr.length <- chromosomes.length[current.chr] #Length del actual cromosoma
#   #Ahora genero los mismos datos para regiones aleatorias
#   random.start <- floor(runif(n = 1,min = 1,max = chr.length))
#   random.end <- random.start + current.length
#
#   random.peaks2[k,1] <- current.chr
#   random.peaks2[k,2] <- random.start
#   random.peaks2[k,3] <- random.end
# }
random.peaks2 <- randomize.peaks(input.peaks = peaks2, chr.lengths = chromosomes.length)
random.intersections[j] <- intersectBed(peaks.set1 = peaks1, peaks.set2 = random.peaks2 )[[2]]
}
p.value <- sum(random.intersections > nrow(real.intersection)) / number.randomisation
random.intersections > nrow(real.intersection)
sum(random.intersections > nrow(real.intersection))
if( p.value == 0)
{
p.value <- 1/number.randomisation
}
p.value
colnames(real.intersection) <- c("chromosome", "start", "end")
granges.intersection <- makeGRangesFromDataFrame(real.intersection,
keep.extra.columns=FALSE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field="chromosome",
start.field="start",
end.field="end",
starts.in.df.are.0based=FALSE)
peakAnno <- annotatePeak(granges.intersection, tssRegion=c(-2000, 0),
TxDb=txdb, annoDb="org.At.tair.db")
annot.peaks <- as.data.frame(peakAnno)
# target.genes <- subset(annot.peaks, distanceToTSS >= 2000 | distanceToTSS <= -2000)$geneId
target.genes <- subset(annot.peaks, annotation != "Downstream (<1kb)" & annotation != "Downstream (1-2kb)"
& annotation != "Distal Intergenic" & annotation != "Downstream (2-3kb)")$geneId
target.genes <- paste(target.genes, collapse = ",")
target.genes
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- p.value
bed.intersections[i,5] <- nrow(real.intersection)
bed.intersections[i,6] <- target.genes
bed.intersections
bed.intersections[i,1
]
bed.intersections[i,]
bed.intersections[i,2]
bed.intersections[i,3]
bed.intersections[i,5]
bed.intersections[i,6]
i <- 79
# print(paste0("test number ", i, " of ", nrow(combinations)))
print(paste0((i/total.tests)*100, " %"))
peaks1 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,1]))
peaks2 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,2]))
peaks1
peaks2
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)[[1]]
real.intersection[[2]]
bed.intersections[79,]
combinations[79,]
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)[[1]]
real.intersection[[2]]
nrow(peaks1)
nrow(peaks2)
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)[[1]]
real.intersection
i <- 78
# print(paste0("test number ", i, " of ", nrow(combinations)))
print(paste0((i/total.tests)*100, " %"))
peaks1 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,1]))
peaks2 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,2]))
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)[[1]]
real.intersection[[2]]
real.intersection
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)[[1]]
real.intersection
i <- 79
# print(paste0("test number ", i, " of ", nrow(combinations)))
print(paste0((i/total.tests)*100, " %"))
peaks1 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,1]))
peaks2 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,2]))
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)[[1]]
if (real.intersection[[2]] > 0)
{
random.intersections <- vector(mode = "numeric",length=number.randomisation) #Creating vector
for(j in 1:number.randomisation)
{
print(j)
# random.peaks2 <- matrix(nrow=nrow(peaks2),ncol=3) #Matriz con 3 columnas, una para el cromosoma, otra para el comienzo y otra para el final de la región aleatoria.
# for(k in 1:nrow(peaks2))
# {
#   current.chr <- peaks2[k,1][[1]] #Chr de la iésima marca real
#   current.start <- peaks2[k,2] #Start de la iésima marca real
#   current.end <- peaks2[k,3] #End de la iésima marca real
#   current.length <- current.end - current.start #Longitud de la iésima marca real
#
#   chr.length <- chromosomes.length[current.chr] #Length del actual cromosoma
#   #Ahora genero los mismos datos para regiones aleatorias
#   random.start <- floor(runif(n = 1,min = 1,max = chr.length))
#   random.end <- random.start + current.length
#
#   random.peaks2[k,1] <- current.chr
#   random.peaks2[k,2] <- random.start
#   random.peaks2[k,3] <- random.end
# }
random.peaks2 <- randomize.peaks(input.peaks = peaks2, chr.lengths = chromosomes.length)
random.intersections[j] <- intersectBed(peaks.set1 = peaks1, peaks.set2 = random.peaks2 )[[2]]
}
p.value <- sum(random.intersections > nrow(real.intersection)) / number.randomisation
if( p.value == 0)
{
p.value <- 1/number.randomisation
}
colnames(real.intersection) <- c("chromosome", "start", "end")
granges.intersection <- makeGRangesFromDataFrame(real.intersection,
keep.extra.columns=FALSE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field="chromosome",
start.field="start",
end.field="end",
starts.in.df.are.0based=FALSE)
peakAnno <- annotatePeak(granges.intersection, tssRegion=c(-2000, 0),
TxDb=txdb, annoDb="org.At.tair.db")
annot.peaks <- as.data.frame(peakAnno)
# target.genes <- subset(annot.peaks, distanceToTSS >= 2000 | distanceToTSS <= -2000)$geneId
target.genes <- subset(annot.peaks, annotation != "Downstream (<1kb)" & annotation != "Downstream (1-2kb)"
& annotation != "Distal Intergenic" & annotation != "Downstream (2-3kb)")$geneId
target.genes <- paste(target.genes, collapse = ",")
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- p.value
bed.intersections[i,5] <- nrow(real.intersection)
bed.intersections[i,6] <- target.genes
} else
{
bed.intersections[i,1] <- strsplit(x = as.character(combinations[i,1]), split = "_peaks")[[1]][1]
bed.intersections[i,2] <- strsplit(x = as.character(combinations[i,2]), split = "_peaks")[[1]][1]
bed.intersections[i,3] <- NA
bed.intersections[i,5] <- "No intersection"
bed.intersections[i,6] <- NA
}
random.intersections <- vector(mode = "numeric",length=number.randomisation) #Creating vector
random.intersections
for(j in 1:number.randomisation)
{
print(j)
# random.peaks2 <- matrix(nrow=nrow(peaks2),ncol=3) #Matriz con 3 columnas, una para el cromosoma, otra para el comienzo y otra para el final de la región aleatoria.
# for(k in 1:nrow(peaks2))
# {
#   current.chr <- peaks2[k,1][[1]] #Chr de la iésima marca real
#   current.start <- peaks2[k,2] #Start de la iésima marca real
#   current.end <- peaks2[k,3] #End de la iésima marca real
#   current.length <- current.end - current.start #Longitud de la iésima marca real
#
#   chr.length <- chromosomes.length[current.chr] #Length del actual cromosoma
#   #Ahora genero los mismos datos para regiones aleatorias
#   random.start <- floor(runif(n = 1,min = 1,max = chr.length))
#   random.end <- random.start + current.length
#
#   random.peaks2[k,1] <- current.chr
#   random.peaks2[k,2] <- random.start
#   random.peaks2[k,3] <- random.end
# }
random.peaks2 <- randomize.peaks(input.peaks = peaks2, chr.lengths = chromosomes.length)
random.intersections[j] <- intersectBed(peaks.set1 = peaks1, peaks.set2 = random.peaks2 )[[2]]
}
p.value <- sum(random.intersections > nrow(real.intersection)) / number.randomisation
if( p.value == 0)
{
p.value <- 1/number.randomisation
}
p.value
real.intersection
colnames(real.intersection) <- c("chromosome", "start", "end")
i <- 5
# print(paste0("test number ", i, " of ", nrow(combinations)))
print(paste0((i/total.tests)*100, " %"))
peaks1 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,1]))
peaks2 <- read.table(file = paste0("../../../web_apps/peak_visualizer/data/bed_files/", combinations[i,2]))
intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)[[1]]
real.intersection
real.intersection[[2]]
real.intersection <- intersectBed(peaks.set1 = peaks1, peaks.set2 = peaks2)
real.intersection
real.intersection[[2]]
nrow(real.intersection)
real.intersection[[2]]
sum(random.intersections > real.intersection[[2]])
colnames(real.intersection) <- c("chromosome", "start", "end")
colnames(real.intersection[[1]]) <- c("chromosome", "start", "end")
colnames(real.intersection[[1]]) <- c("chromosome", "start", "end")
granges.intersection <- makeGRangesFromDataFrame(real.intersection[[1]],
keep.extra.columns=FALSE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field="chromosome",
start.field="start",
end.field="end",
starts.in.df.are.0based=FALSE)
peakAnno <- annotatePeak(granges.intersection, tssRegion=c(-2000, 0),
TxDb=txdb, annoDb="org.At.tair.db")
annot.peaks <- as.data.frame(peakAnno)
# target.genes <- subset(annot.peaks, distanceToTSS >= 2000 | distanceToTSS <= -2000)$geneId
target.genes <- subset(annot.peaks, annotation != "Downstream (<1kb)" & annotation != "Downstream (1-2kb)"
& annotation != "Distal Intergenic" & annotation != "Downstream (2-3kb)")$geneId
target.genes <- paste(target.genes, collapse = ",")
target.genes
shiny::runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
metadata
MetaData
load("/tmp/mozilla_pedro0/MetaData-1.rda")
myMetadata
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TFEA.ChIP", version = "3.8")
library(TFEA.ChIP)
setwd("~/Desktop")
bed <- read.table(file = "PIF3_peaks.narrowPeak")
head(metadata())
head(metadata)
metadata <- read.table(file = "metadata.txt", header = T)
head(metadata)
metadata <- read.table(file = "metadata.txt", header = T)
head(metadata)
bed <- read.table(file = "PIF3_peaks.narrowPeak")
head(bed)
txt2GR(fileTable = bed, format = narrowpeak, fileMetaData = metadata)
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = metadata)
metadata <- read.table(file = "metadata.txt", header = T)
head(metadata)
bed <- read.table(file = "PIF3_peaks.narrowPeak")
head(bed)
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = metadata)
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = metadata)
setwd("~/Dropbox/estudio/R_packages")
folder<-"bed_files/"
File.list<-dir(folder)
format<-"narrowpeak"
myMetaData <- read.table(file = "metadata.txt", header = T)
head(myMetaData)
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( File.list[i], ..., stringsAsFactors = FALSE )
file.metadata <- myMetaData[ myMetaData$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetadata = myMetadata,
format = format
)
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = metadata)
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( File.list[i], stringsAsFactors = FALSE )
file.metadata <- myMetaData[ myMetaData$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetadata = myMetadata,
format = format
)
myMetadata <- read.table(file = "metadata.txt", header = T)
head(myMetadata)
bed <- read.table(file = "PIF3_peaks.narrowPeak")
bed <- read.table(file = "bed_files/PIF3_peaks.narrowPeak")
head(bed)
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = metadata)
folder<-"bed_files/"
File.list<-dir(folder)
format<-"narrowpeak"
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( File.list[i], stringsAsFactors = FALSE )
file.metadata <- myMetaData[ myMetaData$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetadata = myMetadata,
format = format
)
myMetadata
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = myMetadata)
txt2GR(tmp, format, file.metadata)
tmp
tmp<-read.table( File.list[i], stringsAsFactors = FALSE )
File.list
i <- 1
tmp<-read.table( File.list[i], stringsAsFactors = FALSE )
setwd("~/Dropbox/estudio/R_packages")
File.list[i]
tmp<-read.table( File.list[i], stringsAsFactors = FALSE )
tmp<-read.table( file = File.list[i], stringsAsFactors = FALSE )
read.table( File.list[i], stringsAsFactors = FALSE )
read.table( File.list[i])
File.list
setwd("~/Dropbox/estudio/R_packages/bed_files")
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( File.list[i], stringsAsFactors = FALSE )
file.metadata <- myMetaData[ myMetaData$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetadata = myMetadata,
format = format
)
myMetadata <- read.table(file = "metadata.txt", header = T)
read.table( File.list[i], stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
file.metadata
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( File.list[i], stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetadata = myMetadata,
format = format
)
file.metadata
tmp
tmp<-read.table( File.list[i], stringsAsFactors = FALSE )
tmp
format
file.metadata
txt2GR(tmp, format, file.metadata)
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( File.list[i], stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetadata = myMetadata,
format = format
)
myMetadata <- read.table(file = "metadata.txt", header = T)
head(myMetadata)
myMetadata <- read.table(file = "../metadata.txt", header = T)
folder<-"bed_files/"
File.list<-dir(folder)
format<-"narrowpeak"
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( File.list[i], stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetadata = myMetadata,
format = format
)
setwd("~/Dropbox/estudio/R_packages")
folder<-"bed_files/"
File.list<-dir(folder)
format<-"narrowpeak"
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( file = paste0(folder,File.list[i]), stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetadata = myMetadata,
format = format
)
myMetadata <- read.table(file = "metadata.txt", header = T)
head(myMetadata)
setwd("~/Dropbox/estudio/R_packages")
myMetadata <- read.table(file = "metadata.txt", header = T)
head(myMetadata)
myMetadata <- read.table(file = "metadata.txt", header = T)
head(myMetadata)
bed <- read.table(file = "bed_files/PIF3_peaks.narrowPeak")
head(bed)
folder<-"bed_files/"
File.list<-dir(folder)
format<-"narrowpeak"
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( file = paste0(folder,File.list[i]), stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetadata = myMetadata,
format = format
)
myMetadata
myMetadata$Name == File.list[i]
file.metadata
myMetadata[ myMetadata$Name == File.list[i], ]
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
file.metadata
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( file = paste0(folder,File.list[i]), stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetadata = myMetadata,
format = format
)
gr.list <- lapply(
seq_along(File.list),
function( File.list, myMetaData, format ){
tmp<-read.table( file = paste0(folder,File.list[i]), stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
},
File.list = File.list,
myMetaData = myMetadata,
format = format
)
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = myMetadata)
seq_along(File.list)
tmp<-read.table( file = paste0(folder,File.list[i]), stringsAsFactors = FALSE )
tmp
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
file.metadata
tmp
format
file.metadata
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = myMetadata)
folder<-"bed_files/"
File.list<-dir(folder)
folder
File.list
format<-"narrowpeak"
tmp<-read.table( file = paste0(folder,File.list[i]), stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
file.metadata
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
head(myMetadata)
head(bed)
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = myMetadata)
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/TFBS_enrichment")
folder<-"bed_files/"
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/TFBS_enrichment")
#Read the metadata table
# A Metadata table (storing at least, Accession ID, name of the file,
# and TF tested in the ChIP-Seq experiment). The metadata table included
# with this package has the following fields: “Name”, “Accession”, “Cell”,
# “Cell Type”, “Treatment”, “Antibody”, and “TF”.
myMetadata <- read.table(file = "metadata.txt", header = T)
head(myMetadata)
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = myMetadata)
folder<-"bed_files/"
File.list<-dir(folder)
format<-"narrowpeak"
tmp<-read.table( file = paste0(folder,File.list[i]), stringsAsFactors = FALSE )
tmp
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
file.metadata
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
paste0(folder,File.list[i])
i <- 3
tmp<-read.table( file = paste0(folder,File.list[i]), stringsAsFactors = FALSE )
paste0(folder,File.list[i])
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
ChIP.dataset.gr
