runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/ChlamyNET')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
gene.expression[zts.to.consider(zt.point = current.time.point) %in% seq(from=,to=24,by=4)]
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
library(igraph)
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
1+1
genotype.1 <- "resistant"
genotype.1
fecundity.1 <- 12.8
fecundity.1
FALSE
genotype.2 <- "resistant"
fecundity.2 <- 21.6
genotype.3 <- "control"
fecundity.3 <- 35.4
genotype.4 <- "control"
fecundity.4 <- 27.4
genotype.1
## Los tipos de datos simples en R son numérico, carácter y lógico.
is.numeric(genotype.1)
genotype.1
is.character(genotype.1)
res <- is.character(fecundity.1)   # El resultado de una función puede almacenarse en una variable
res
res
is.logical(res)
fecundity.1
fecundity.2
resistant.mean <- (fecundity.1 + fecundity.2) / 2
resistant.mean
fecundity.1
fecundity.3
fecundity.1 > fecundity.3
fecundity.2
fecundity.4
fecundity.2 <= fecundity.4
genotype.4
genotype.4 == "control"
fecundity.resistant <- c(12.8, 21.6, 14.8, 23.1, 34.6, 19.7, 22.6, 29.6, 16.4, 20.3, 29.3,
14.9, 27.3, 22.4, 27.5, 20.3, 38.7, 26.4, 23.7, 26.1, 29.5, 38.6,
44.4, 23.2, 23.6)
fecundity.resistant
1:25
25:1
1:25+1
1:2500+1
1:(25+1)
myvar <- 1:(25+1)
myvar
seq(from = 0,to = 20,by = 2)
seq(to = 20,by = 2,from = 0)
rep("resistant",25)
fecundity.susceptible <- c(38.4, 32.9, 48.5, 20.9, 11.6, 22.3, 30.2, 33.4, 26.7, 39, 12.8, 14.6, 12.2, 23.1,
29.4, 16, 20.1, 23.3, 22.9, 22.5, 15.1, 31, 16.9, 16.1, 10.8)
fecundity.control <- c(35.4, 27.4, 19.3, 41.8, 20.3, 37.6, 36.9)
fecundity.control
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
fecundity.control.names
names(fecundity.control) <- fecundity.control.names
fecundity.control
fecundity.control
fecundity.control[2]
fecundity.control[Mar]
fecundity.control["Mar"]
fecundity.control[["Mar"]]
fecundity.control[1:3]
fecundity.control[c(1,2,3)]
fecundity.control[c("Lun","Mar","Mie")]
fecundity.control[c("Lun","Mie","Mar")]
fecundity.control["Sab"]
fecundity.control["sab"]
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
names(fecundity.control) <- fecundity.control.names
fecundity.control
my.logical <-
fecundity.control > 30
fecundity.control > 30
my.logical <- fecundity.control > 30
fecundity.control[my.logical]
fecundity.control[fecundity.control < 20]
fecundity.control["Lun"]
fecundity.control["Lun"] <- 34.5
fecundity.control["Lun"]
fecundity.control
fecundity.control < 20
fecundity.control[fecundity.control < 20]
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
library(seqinr)
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/TFBS_enrichment/homer_like")
## Load Position Weight Matrices
## Open file connection
con <- file("../../../../web_apps/peak_visualizer/data/jaspar_motifs/pfm_plants_20180911.txt",open = "r")
## Empty list for storing PWM
motifs.pwm <- vector(mode="list",length = 453)
motif.ids <- vector(mode="character",length=453)
motif.names <- vector(mode="character",length=453)
## Load 64 PWM
for(j in 1:453)
{
## First line contains motif id and name
first.line <- readLines(con,1)
motif.ids[j] <- strsplit(first.line,split=" ")[[1]][1]
motif.names[j] <- strsplit(first.line,split=" ")[[1]][2]
## Next four line contians probabilites for each nucleotide
a.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
c.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
g.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
t.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
## Construct PWM
motif.pwm <- matrix(nrow = 4,ncol=length(a.row))
motif.pwm[1,] <- a.row
motif.pwm[2,] <- c.row
motif.pwm[3,] <- g.row
motif.pwm[4,] <- t.row
rownames(motif.pwm) <- c("A","C","G","T")
motifs.pwm[[j]] <- prop.table(motif.pwm,2)
}
## Close file connection
close(con)
motif.names
## Naming list with PWM
names(motifs.pwm) <- motif.names
names(motif.ids) <- motif.names
number.motifs <- 454
## Empty list for storing PWM
motifs.pwm <- vector(mode="list",length = number.motifs)
motif.ids <- vector(mode="character",length=number.motifs)
motif.names <- vector(mode="character",length=number.motifs)
## Load 64 PWM
for(j in 1:number.motifs)
{
## First line contains motif id and name
first.line <- readLines(con,1)
motif.ids[j] <- strsplit(first.line,split=" ")[[1]][1]
motif.names[j] <- strsplit(first.line,split=" ")[[1]][2]
## Next four line contians probabilites for each nucleotide
a.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
c.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
g.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
t.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
## Construct PWM
motif.pwm <- matrix(nrow = 4,ncol=length(a.row))
motif.pwm[1,] <- a.row
motif.pwm[2,] <- c.row
motif.pwm[3,] <- g.row
motif.pwm[4,] <- t.row
rownames(motif.pwm) <- c("A","C","G","T")
motifs.pwm[[j]] <- prop.table(motif.pwm,2)
}
number.motifs <- 453
## Load Position Weight Matrices
## Open file connection
con <- file("../../../../web_apps/peak_visualizer/data/jaspar_motifs/pfm_plants_20180911.txt",open = "r")
## Empty list for storing PWM
motifs.pwm <- vector(mode="list",length = number.motifs)
motif.ids <- vector(mode="character",length=number.motifs)
motif.names <- vector(mode="character",length=number.motifs)
## Load 64 PWM
for(j in 1:number.motifs)
{
## First line contains motif id and name
first.line <- readLines(con,1)
motif.ids[j] <- strsplit(first.line,split=" ")[[1]][1]
motif.names[j] <- strsplit(first.line,split=" ")[[1]][2]
## Next four line contians probabilites for each nucleotide
a.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
c.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
g.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
t.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
## Construct PWM
motif.pwm <- matrix(nrow = 4,ncol=length(a.row))
motif.pwm[1,] <- a.row
motif.pwm[2,] <- c.row
motif.pwm[3,] <- g.row
motif.pwm[4,] <- t.row
rownames(motif.pwm) <- c("A","C","G","T")
motifs.pwm[[j]] <- prop.table(motif.pwm,2)
}
## Close file connection
close(con)
## Naming list with PWM
names(motifs.pwm) <- motif.names
names(motif.ids) <- motif.names
motif.ids
motif.ids[1:3]
## Close file connection
close(con)
## Close file connection
close(con)
number.motifs <- 453
## Load Position Weight Matrices
## Open file connection
con <- file("../../../../web_apps/peak_visualizer/data/jaspar_motifs/pfm_plants_20180911.txt",open = "r")
## Empty list for storing PWM
motifs.pwm <- vector(mode="list",length = number.motifs)
motif.ids <- vector(mode="character",length=number.motifs)
motif.names <- vector(mode="character",length=number.motifs)
## Load 64 PWM
for(j in 1:number.motifs)
{
## First line contains motif id and name
first.line <- readLines(con,1)
motif.ids[j] <- strsplit(first.line,split=" ")[[1]][1]
motif.names[j] <- strsplit(first.line,split=" ")[[1]][2]
## Next four line contians probabilites for each nucleotide
a.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
c.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
g.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
t.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
## Construct PWM
motif.pwm <- matrix(nrow = 4,ncol=length(a.row))
motif.pwm[1,] <- a.row
motif.pwm[2,] <- c.row
motif.pwm[3,] <- g.row
motif.pwm[4,] <- t.row
rownames(motif.pwm) <- c("A","C","G","T")
motifs.pwm[[j]] <- prop.table(motif.pwm,2)
}
## Close file connection
close(con)
## Naming list with PWM
names(motifs.pwm) <- motif.names
names(motif.ids) <- motif.names
sequences.file <- "background_1000_500_5778.fa"
sequences.file
## Read sequences file
sequences.data <- read.fasta(file = sequences.file,seqtype = "AA")
sequences <- getSequence(sequences.data)
seq.names <- getName(sequences.data)
seq.names
i <- 1
sequences[[i]]
c2s(sequences[[i]])
motif.pwm
motifs.pwm[[j]]
motif.ids[[j]]
motif.names[[j]]
j <- 1
motifs.pwm[[j]]
motif.ids[[j]]
motif.names[[j]]
library(Biostrings)
j <- 1
motifs.pwm[[j]]
motif.ids[[j]]
motif.names[[j]]
c2s(sequences[[i]])
current.seq <- c2s(sequences[[i]])
j <- 1
motifs.pwm[[j]]
motif.ids[[j]]
motif.names[[j]]
min.score <- "95%"
sequences.file <- "background_1000_500_5778.fa"
min.score <- "95%"
sequences.file <- "background_1000_500_5778.fa"
score.value <- "95%"
matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value)
as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value))
nrow(as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value)))
number.motifs
for(j in 1:number.motifs)
{
print(nrow(as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value))))
}
motif.names
multiplicities <- vector(mode = "numeric",length=number.motifs)
names(multiplicities) <- seq.names
multiplicities <- vector(mode = "numeric",length=number.motifs)
names(multiplicities) <- motif.names
multiplicities
multiplicities <- matrix(nrow=length(sequences),ncol=number.motifs)
#multiplicities <- vector(mode = "numeric",length=number.motifs)
multiplicities <- matrix(nrow=length(sequences),ncol=number.motifs)
rownames(multiplicities) <- seq.names
head(multiplicities)
i <- 1
current.seq <- c2s(sequences[[i]])
current.seq
seq.names[i]
multiplicities[current.seq.name, motif.names[[j]]]
current.seq.name <- seq.names[i]
multiplicities[current.seq.name, motif.names[[j]]]
motif.names[[j]]
#multiplicities <- vector(mode = "numeric",length=number.motifs)
multiplicities <- matrix(nrow=length(sequences),ncol=number.motifs)
rownames(multiplicities) <- seq.names
colnames(multiplicities) <- motif.names
i <- 1
current.seq <- c2s(sequences[[i]])
current.seq.name <- seq.names[i]
j <- 1
motifs.pwm[[j]]
motif.ids[[j]]
motif.names[[j]]
for(j in 1:number.motifs)
{
multiplicities[current.seq.name, motif.names[[j]]] <- nrow(as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value)))
}
head(multiplicities)
for(i in 1:length(seq.names))
{
current.seq <- c2s(sequences[[i]])
current.seq.name <- seq.names[i]
#motifs.pwm[[j]]
#motif.ids[[j]]
#motif.names[[j]]
for(j in 1:number.motifs)
{
multiplicities[current.seq.name, motif.names[[j]]] <- nrow(as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value)))
}
}
head(multiplicities)
write.table(x = multiplicities,file = "precomputed_network.tsv",sep = "\t",quote = F)
