tfs.intersections.data$trough.zt[j], "_", "intersection.txt")
)
}
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/intersections")
#####--FIlter bed_intersections.txt ----####
bed.intersections <- read.table(file = "bed_intersections.txt", header = TRUE, as.is = TRUE)
nrow(bed.intersections)
head(bed.intersections)
filter <-subset(x = bed.intersections, subset = fdr < 0.05)
filter <- subset(x = bed.intersections, subset = fdr < 0.05)
nrow(filter)
write.table(filter, file = "bed_intersections_filtered.txt", sep = "\t")
write.table(filter, file = "bed_intersections_filtered.txt", sep = "\t", row.names = FALSE)
bed.intersections.data <- read.table(file = "../intersections/bed_intersections_filtered.txt",
sep = "\t", header = TRUE, as.is=TRUE)
nrow(bed.intersections.data)
j <- 5
print(j)
target.genes <- strsplit(x = bed.intersections.data$Genes[j], split = ",")[[1]]
target.genes
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
which(q.values < input$motif_significance)
## Compute enrichments
enrichments <- (x / k) / (m / nrow(precomputed.result))
## Final motifs
sig.enrich.motifs <- names(which(q.values < input$motif_significance & enrichments > input$enrichment_threshold))
final.q.values <- q.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.p.values <- p.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.enrichments <- enrichments[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
store.data <- data.frame(sig.enrich.motifs, final.p.values, final.q.values, final.enrichments)
write.table(store.data, sep = "\t", row.names = FALSE,
file = paste0("TFBS_enrichment_intersections/beds/TFBS_enrichment_of_",
bed.intersections.data$TF1[j], "_and_",
bed.intersections.data$TF2[j], "_beds_intersection.txt")
)
write.table(store.data, sep = "\t", row.names = FALSE,
file = paste0("TFBS_enrichment_intersections/beds/TFBS_enrichment_of_",
bed.intersections.data$TF1[j], "_and_",
bed.intersections.data$TF2[j], "_beds_intersection.txt")
)
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/TFBS_enrichment/homer_like")
write.table(store.data, sep = "\t", row.names = FALSE,
file = paste0("TFBS_enrichment_intersections/beds/TFBS_enrichment_of_",
bed.intersections.data$TF1[j], "_and_",
bed.intersections.data$TF2[j], "_beds_intersection.txt")
)
bed.intersections.data <- read.table(file = "../intersections/bed_intersections_filtered.txt",
sep = "\t", header = TRUE, as.is=TRUE)
for (j in 1:nrow(bed.intersections.data))
bed.intersections.data <- read.table(file = "../../intersections/bed_intersections_filtered.txt",
sep = "\t", header = TRUE, as.is=TRUE)
for (j in 1:nrow(bed.intersections.data))
{
print(j)
target.genes <- strsplit(x = bed.intersections.data$Genes[j], split = ",")[[1]]
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
# which(p.values < input$motif_significance)
# p.values[which(p.values < input$motif_significance)]
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
which(q.values < input$motif_significance)
## Compute enrichments
enrichments <- (x / k) / (m / nrow(precomputed.result))
## Final motifs
sig.enrich.motifs <- names(which(q.values < input$motif_significance & enrichments > input$enrichment_threshold))
final.q.values <- q.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.p.values <- p.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.enrichments <- enrichments[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
##Store data
store.data <- data.frame(sig.enrich.motifs, final.p.values, final.q.values, final.enrichments)
write.table(store.data, sep = "\t", row.names = FALSE,
file = paste0("TFBS_enrichment_intersections/beds/TFBS_enrichment_of_",
bed.intersections.data$TF1[j], "_and_",
bed.intersections.data$TF2[j], "_beds_intersection.txt")
)
}
j <- 1
print(j)
target.genes <- strsplit(x = tfs.intersections.data$genes[j], split = ",")[[1]]
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
which(q.values < input$motif_significance)
## Compute enrichments
enrichments <- (x / k) / (m / nrow(precomputed.result))
## Final motifs
sig.enrich.motifs <- names(which(q.values < input$motif_significance & enrichments > input$enrichment_threshold))
sig.enrich.motifs
all.sig.enrich.motifs <- vector(mode="numeric", length=nrow(tfs.intersections.data))
paste(sig.enrich.motifs, sep = ",")
paste(sig.enrich.motifs, collapse = ",")
for (j in 1:nrow(tfs.intersections.data))
{
print(j)
target.genes <- strsplit(x = tfs.intersections.data$genes[j], split = ",")[[1]]
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
# which(p.values < input$motif_significance)
# p.values[which(p.values < input$motif_significance)]
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
which(q.values < input$motif_significance)
## Compute enrichments
enrichments <- (x / k) / (m / nrow(precomputed.result))
## Final motifs
sig.enrich.motifs <- names(which(q.values < input$motif_significance & enrichments > input$enrichment_threshold))
final.q.values <- q.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.p.values <- p.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.enrichments <- enrichments[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
##Store data
store.data <- data.frame(sig.enrich.motifs, final.p.values, final.q.values, final.enrichments)
write.table(store.data, sep = "\t", row.names = FALSE,
file = paste0("TFBS_enrichment_intersections/TFBS_enrichment_of_", tfs.intersections.data$tf1[j], "_",
tfs.intersections.data$tf2[j], "_",
tfs.intersections.data$peak.zt[j],"_",
tfs.intersections.data$trough.zt[j], "_", "intersection.txt"))
all.sig.enrich.motifs[j] <- paste(sig.enrich.motifs, collapse = ",")
}
global.data <- data.frame(tfs.intersections.data$tf1, tfs.intersections.data$tf2,all.sig.enrich.motifs)
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/TFBS_enrichment/homer_like")
head(global.data)
colnames(global.data) <- c("TF1", "TF2" "Peak ZT", "Trough ZT", "Significant enriched Motifs")
colnames(global.data) <- c("TF1", "TF2", "Peak ZT", "Trough ZT", "Significant enriched Motifs")
global.data <- data.frame(tfs.intersections.data$tf1, tfs.intersections.data$tf2,
tfs.intersections.data$peak.zt, tfs.intersections.data$trough.zt,
all.sig.enrich.motifs)
head(global.data)
colnames(global.data) <- c("TF1", "TF2", "Peak ZT", "Trough ZT", "Significant enriched Motifs")
write.table(global.data, file = "TFBS_enrichment_intersections/all_results.txt", sep = "\t")
colnames(global.data) <- c("TF1", "TF2", "Peak ZT", "Trough ZT", "Significant enriched Motifs")
write.table(global.data, file = "TFBS_enrichment_intersections/TFS_cluster_genes/all_results.txt", sep = "\t")
write.table(global.data, file = "TFBS_enrichment_intersections/TFS_cluster_genes/all_results.txt",
sep = "\t", row.names = FALSE)
all.sig.enrich.motifs <- vector(mode="numeric", length=nrow(bed.intersections.data))
for (j in 1:nrow(bed.intersections.data))
{
print(j)
target.genes <- strsplit(x = bed.intersections.data$Genes[j], split = ",")[[1]]
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
# which(p.values < input$motif_significance)
# p.values[which(p.values < input$motif_significance)]
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
which(q.values < input$motif_significance)
## Compute enrichments
enrichments <- (x / k) / (m / nrow(precomputed.result))
## Final motifs
sig.enrich.motifs <- names(which(q.values < input$motif_significance & enrichments > input$enrichment_threshold))
final.q.values <- q.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.p.values <- p.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.enrichments <- enrichments[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
##Store data
store.data <- data.frame(sig.enrich.motifs, final.p.values, final.q.values, final.enrichments)
write.table(store.data, sep = "\t", row.names = FALSE,
file = paste0("TFBS_enrichment_intersections/beds/TFBS_enrichment_of_",
bed.intersections.data$TF1[j], "_and_",
bed.intersections.data$TF2[j], "_beds_intersection.txt"))
all.sig.enrich.motifs[j] <- paste(sig.enrich.motifs, collapse = ",")
}
global.data <- data.frame(bed.intersections.data$TF1, bed.intersections.data$TF2,all.sig.enrich.motifs)
head(global.data)
colnames(global.data) <- c("TF1", "TF2", "Significant enriched Motifs")
write.table(global.data, file = "TFBS_enrichment_intersections/beds/all_results.txt",
sep = "\t", row.names = FALSE)
j <- 297
print(j)
target.genes <- strsplit(x = bed.intersections.data$Genes[j], split = ",")[[1]]
target.genes
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
q.values
length(x)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
p.values
length(target.genes)
colSums(precomputed.result[target.genes,] > 0)
target.genes
target.genes <- strsplit(x = tfs.intersections.data$genes[j], split = ",")[[1]]
target.genes
j <- 10
target.genes <- strsplit(x = tfs.intersections.data$genes[j], split = ",")[[1]]
target.genes
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
p.values
target.genes
bed.intersections.data$Genes[j]
strsplit(x = bed.intersections.data$Genes[j], split = ",")
target.genes <- strsplit(x = bed.intersections.data$Genes[j], split = ",")[[1]]
k <- length(target.genes)
length(target.genes)
precomputed.result[target.genes,]
target.genes <- strsplit(x = tfs.intersections.data$genes[j], split = ",")[[1]]
colSums(precomputed.result[target.genes,]
)
precomputed.result[target.genes,]
target.genes
target.genes <- strsplit(x = bed.intersections.data$Genes[j], split = ",")[[1]]
length(target.genes)
precomputed.result[target.genes,]
target.genes
precomputed.result["AT1G04570",]
rownames(precomputed.result)
#SInce there are genes that are not present in our network, i have to filter them:
target.genes <- intersect(target.genes, rownames(precomputed.result))
length(target.genes)
bed.intersections.data <- read.table(file = "../../intersections/bed_intersections_filtered.txt",
sep = "\t", header = TRUE, as.is=TRUE)
all.sig.enrich.motifs <- vector(mode="numeric", length=nrow(bed.intersections.data))
for (j in 1:nrow(bed.intersections.data))
{
print(j)
target.genes <- strsplit(x = bed.intersections.data$Genes[j], split = ",")[[1]]
#SInce there are genes that are not present in our network, i have to filter them:
target.genes <- intersect(target.genes, rownames(precomputed.result))
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
# which(p.values < input$motif_significance)
# p.values[which(p.values < input$motif_significance)]
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
which(q.values < input$motif_significance)
## Compute enrichments
enrichments <- (x / k) / (m / nrow(precomputed.result))
## Final motifs
sig.enrich.motifs <- names(which(q.values < input$motif_significance & enrichments > input$enrichment_threshold))
final.q.values <- q.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.p.values <- p.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.enrichments <- enrichments[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
##Store data
store.data <- data.frame(sig.enrich.motifs, final.p.values, final.q.values, final.enrichments)
write.table(store.data, sep = "\t", row.names = FALSE,
file = paste0("TFBS_enrichment_intersections/beds/TFBS_enrichment_of_",
bed.intersections.data$TF1[j], "_and_",
bed.intersections.data$TF2[j], "_beds_intersection.txt"))
all.sig.enrich.motifs[j] <- paste(sig.enrich.motifs, collapse = ",")
}
j
#SInce there are genes that are not present in our network, i have to filter them:
target.genes <- intersect(target.genes, rownames(precomputed.result))
target.genes
target.genes <- strsplit(x = bed.intersections.data$Genes[j], split = ",")[[1]]
target.genes
#SInce there are genes that are not present in our network, i have to filter them:
target.genes <- intersect(target.genes, rownames(precomputed.result))
target.genes
target.genes>0
length(target.genes) > 0
j
#SInce there are genes that are not present in our network, i have to filter them:
target.genes <- intersect(target.genes, rownames(precomputed.result))
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
print(j)
target.genes <- strsplit(x = bed.intersections.data$Genes[j], split = ",")[[1]]
#SInce there are genes that are not present in our network, i have to filter them:
target.genes <- intersect(target.genes, rownames(precomputed.result))
if (length(target.genes) > 0)
{
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
# which(p.values < input$motif_significance)
# p.values[which(p.values < input$motif_significance)]
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
which(q.values < input$motif_significance)
## Compute enrichments
enrichments <- (x / k) / (m / nrow(precomputed.result))
## Final motifs
sig.enrich.motifs <- names(which(q.values < input$motif_significance & enrichments > input$enrichment_threshold))
final.q.values <- q.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.p.values <- p.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.enrichments <- enrichments[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
##Store data
store.data <- data.frame(sig.enrich.motifs, final.p.values, final.q.values, final.enrichments)
write.table(store.data, sep = "\t", row.names = FALSE,
file = paste0("TFBS_enrichment_intersections/beds/TFBS_enrichment_of_",
bed.intersections.data$TF1[j], "_and_",
bed.intersections.data$TF2[j], "_beds_intersection.txt"))
} else
{
sig.enrich.motifs <- "N,A"
}
sig.enrich.motifs
paste(sig.enrich.motifs, collapse = ",")
sig.enrich.motifs <- "NA"
paste(sig.enrich.motifs, collapse = ",")
bed.intersections.data <- read.table(file = "../../intersections/bed_intersections_filtered.txt",
sep = "\t", header = TRUE, as.is=TRUE)
all.sig.enrich.motifs <- vector(mode="numeric", length=nrow(bed.intersections.data))
for (j in 1:nrow(bed.intersections.data))
{
print(j)
target.genes <- strsplit(x = bed.intersections.data$Genes[j], split = ",")[[1]]
#SInce there are genes that are not present in our network, i have to filter them:
target.genes <- intersect(target.genes, rownames(precomputed.result))
if (length(target.genes) > 0)
{
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
# which(p.values < input$motif_significance)
# p.values[which(p.values < input$motif_significance)]
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
which(q.values < input$motif_significance)
## Compute enrichments
enrichments <- (x / k) / (m / nrow(precomputed.result))
## Final motifs
sig.enrich.motifs <- names(which(q.values < input$motif_significance & enrichments > input$enrichment_threshold))
final.q.values <- q.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.p.values <- p.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.enrichments <- enrichments[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
##Store data
store.data <- data.frame(sig.enrich.motifs, final.p.values, final.q.values, final.enrichments)
write.table(store.data, sep = "\t", row.names = FALSE,
file = paste0("TFBS_enrichment_intersections/beds/TFBS_enrichment_of_",
bed.intersections.data$TF1[j], "_and_",
bed.intersections.data$TF2[j], "_beds_intersection.txt"))
} else
{
sig.enrich.motifs <- "The genes that are target of this intersection are not present in ATTRACTOR"
}
all.sig.enrich.motifs[j] <- paste(sig.enrich.motifs, collapse = ",")
}
global.data <- data.frame(bed.intersections.data$TF1, bed.intersections.data$TF2,all.sig.enrich.motifs)
head(global.data)
colnames(global.data) <- c("TF1", "TF2", "Significant enriched Motifs")
write.table(global.data, file = "TFBS_enrichment_intersections/beds/all_results.txt",
sep = "\t", row.names = FALSE)
bed.intersections.data <- read.table(file = "../../intersections/topvalues_clusters_OK/intersections_Degree0.95.txt",
sep = "\t", header = TRUE, as.is=TRUE)
degree.clusters <- read.table(file = "../../intersections/topvalues_clusters_OK/intersections_Degree0.95.txt",
sep = "\t", header = TRUE, as.is=TRUE)
head(degree.clusters)
nrow(degree.clusters)
degree.clusters$Intersection.Genes[j]
j <- 2
degree.clusters$Intersection.Genes[j]
strsplit(x = degree.clusters$Intersection.Genes[j], split = ",")
target.genes <- strsplit(x = degree.clusters$Intersection.Genes[j], split = ",")[[1]]
target.genes
target.genes <- strsplit(x = degree.clusters$Intersection.Genes[j], split = ",")[[1]]
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
which(q.values < input$motif_significance)
## Compute enrichments
enrichments <- (x / k) / (m / nrow(precomputed.result))
## Final motifs
sig.enrich.motifs <- names(which(q.values < input$motif_significance & enrichments > input$enrichment_threshold))
final.q.values <- q.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.p.values <- p.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.enrichments <- enrichments[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
store.data <- data.frame(sig.enrich.motifs, final.p.values, final.q.values, final.enrichments)
paste0("TFBS_enrichment_intersections/Degree095_clusters/TFBS_enrichment_of_cluster_",
degree.clusters$peak[j], "_",
degree.clusters$through[j], "_and_degree095_genes_intersection.txt"))
paste0("TFBS_enrichment_intersections/Degree095_clusters/TFBS_enrichment_of_cluster_",
degree.clusters$peak[j], "_",
degree.clusters$through[j], "_and_degree095_genes_intersection.txt")
paste0("TFBS_enrichment_intersections/Degree095_clusters/TFBS_enrichment_of_cluster_peak",
degree.clusters$peak[j], "_trough",
degree.clusters$through[j], "_and_degree095_genes_intersection.txt")
degree.clusters <- subset(x = degree.clusters, subset = fdr<0.05 & enrichment>2)
nrow(degree.clusters)
degree.clusters <- subset(x = degree.clusters, subset = fdr<0.05 & enrichment>1.5)
degree.clusters <- read.table(file = "../../intersections/topvalues_clusters_OK/intersections_Degree0.95.txt",
sep = "\t", header = TRUE, as.is=TRUE)
degree.clusters <- subset(x = degree.clusters, subset = fdr<0.05 & enrichment>1.5)
nrow(degree.clusters)
degree.clusters <- read.table(file = "../../intersections/topvalues_clusters_OK/intersections_Degree0.95.txt",
sep = "\t", header = TRUE, as.is=TRUE)
degree.clusters <- subset(x = degree.clusters, subset = fdr<0.05 & enrichment>1.5)
all.sig.enrich.motifs <- vector(mode="numeric", length=nrow(degree.clusters))
for (j in 1:nrow(degree.clusters))
{
print(j)
target.genes <- strsplit(x = degree.clusters$Intersection.Genes[j], split = ",")[[1]]
k <- length(target.genes)
x <- colSums(precomputed.result[target.genes,] > 0)
## Compute p-values for enrichment aocording to a hypergeometric distribution
p.values <- vector(mode="numeric", length=length(x))
names(p.values) <- colnames(precomputed.result)
for(i in 1:length(x))
{
p.values[i] <- phyper(q = x[i] - 1, m = m[i], n = n[i], k = k, lower.tail = F)
}
# which(p.values < input$motif_significance)
# p.values[which(p.values < input$motif_significance)]
## Adjust p-values using Benjamini Hochberg
q.values <- p.adjust(p = p.values,method = "BH")
names(q.values) <- names(p.values)
which(q.values < input$motif_significance)
## Compute enrichments
enrichments <- (x / k) / (m / nrow(precomputed.result))
## Final motifs
sig.enrich.motifs <- names(which(q.values < input$motif_significance & enrichments > input$enrichment_threshold))
final.q.values <- q.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.p.values <- p.values[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
final.enrichments <- enrichments[which(q.values < input$motif_significance & enrichments > input$enrichment_threshold)]
##Store data
store.data <- data.frame(sig.enrich.motifs, final.p.values, final.q.values, final.enrichments)
write.table(store.data, sep = "\t", row.names = FALSE,
file = paste0("TFBS_enrichment_intersections/Degree095_clusters/TFBS_enrichment_of_cluster_peak",
degree.clusters$peak[j], "_trough",
degree.clusters$through[j], "_and_degree095_genes_intersection.txt"))
all.sig.enrich.motifs[j] <- paste(sig.enrich.motifs, collapse = ",")
}
global.data <- data.frame(degree.clusters$peak, degree.clusters$through,all.sig.enrich.motifs)
head(global.data)
colnames(global.data) <- c("Peak", "Trough", "Significant enriched Motifs")
write.table(global.data, file = "TFBS_enrichment_intersections/Degree095_clusters/all_results.txt",
sep = "\t", row.names = FALSE)
