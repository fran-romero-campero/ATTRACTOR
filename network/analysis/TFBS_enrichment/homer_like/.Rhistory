motifs.pwm[[j]] <- prop.table(motif.pwm,2)
}
number.motifs <- 453
## Load Position Weight Matrices
## Open file connection
con <- file("../../../../web_apps/peak_visualizer/data/jaspar_motifs/pfm_plants_20180911.txt",open = "r")
## Empty list for storing PWM
motifs.pwm <- vector(mode="list",length = number.motifs)
motif.ids <- vector(mode="character",length=number.motifs)
motif.names <- vector(mode="character",length=number.motifs)
## Load 64 PWM
for(j in 1:number.motifs)
{
## First line contains motif id and name
first.line <- readLines(con,1)
motif.ids[j] <- strsplit(first.line,split=" ")[[1]][1]
motif.names[j] <- strsplit(first.line,split=" ")[[1]][2]
## Next four line contians probabilites for each nucleotide
a.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
c.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
g.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
t.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
## Construct PWM
motif.pwm <- matrix(nrow = 4,ncol=length(a.row))
motif.pwm[1,] <- a.row
motif.pwm[2,] <- c.row
motif.pwm[3,] <- g.row
motif.pwm[4,] <- t.row
rownames(motif.pwm) <- c("A","C","G","T")
motifs.pwm[[j]] <- prop.table(motif.pwm,2)
}
## Close file connection
close(con)
## Naming list with PWM
names(motifs.pwm) <- motif.names
names(motif.ids) <- motif.names
motif.ids
motif.ids[1:3]
## Close file connection
close(con)
## Close file connection
close(con)
number.motifs <- 453
## Load Position Weight Matrices
## Open file connection
con <- file("../../../../web_apps/peak_visualizer/data/jaspar_motifs/pfm_plants_20180911.txt",open = "r")
## Empty list for storing PWM
motifs.pwm <- vector(mode="list",length = number.motifs)
motif.ids <- vector(mode="character",length=number.motifs)
motif.names <- vector(mode="character",length=number.motifs)
## Load 64 PWM
for(j in 1:number.motifs)
{
## First line contains motif id and name
first.line <- readLines(con,1)
motif.ids[j] <- strsplit(first.line,split=" ")[[1]][1]
motif.names[j] <- strsplit(first.line,split=" ")[[1]][2]
## Next four line contians probabilites for each nucleotide
a.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
c.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
g.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
t.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
## Construct PWM
motif.pwm <- matrix(nrow = 4,ncol=length(a.row))
motif.pwm[1,] <- a.row
motif.pwm[2,] <- c.row
motif.pwm[3,] <- g.row
motif.pwm[4,] <- t.row
rownames(motif.pwm) <- c("A","C","G","T")
motifs.pwm[[j]] <- prop.table(motif.pwm,2)
}
## Close file connection
close(con)
## Naming list with PWM
names(motifs.pwm) <- motif.names
names(motif.ids) <- motif.names
sequences.file <- "background_1000_500_5778.fa"
sequences.file
## Read sequences file
sequences.data <- read.fasta(file = sequences.file,seqtype = "AA")
sequences <- getSequence(sequences.data)
seq.names <- getName(sequences.data)
seq.names
i <- 1
sequences[[i]]
c2s(sequences[[i]])
motif.pwm
motifs.pwm[[j]]
motif.ids[[j]]
motif.names[[j]]
j <- 1
motifs.pwm[[j]]
motif.ids[[j]]
motif.names[[j]]
library(Biostrings)
j <- 1
motifs.pwm[[j]]
motif.ids[[j]]
motif.names[[j]]
c2s(sequences[[i]])
current.seq <- c2s(sequences[[i]])
j <- 1
motifs.pwm[[j]]
motif.ids[[j]]
motif.names[[j]]
min.score <- "95%"
sequences.file <- "background_1000_500_5778.fa"
min.score <- "95%"
sequences.file <- "background_1000_500_5778.fa"
score.value <- "95%"
matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value)
as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value))
nrow(as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value)))
number.motifs
for(j in 1:number.motifs)
{
print(nrow(as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value))))
}
motif.names
multiplicities <- vector(mode = "numeric",length=number.motifs)
names(multiplicities) <- seq.names
multiplicities <- vector(mode = "numeric",length=number.motifs)
names(multiplicities) <- motif.names
multiplicities
multiplicities <- matrix(nrow=length(sequences),ncol=number.motifs)
#multiplicities <- vector(mode = "numeric",length=number.motifs)
multiplicities <- matrix(nrow=length(sequences),ncol=number.motifs)
rownames(multiplicities) <- seq.names
head(multiplicities)
i <- 1
current.seq <- c2s(sequences[[i]])
current.seq
seq.names[i]
multiplicities[current.seq.name, motif.names[[j]]]
current.seq.name <- seq.names[i]
multiplicities[current.seq.name, motif.names[[j]]]
motif.names[[j]]
#multiplicities <- vector(mode = "numeric",length=number.motifs)
multiplicities <- matrix(nrow=length(sequences),ncol=number.motifs)
rownames(multiplicities) <- seq.names
colnames(multiplicities) <- motif.names
i <- 1
current.seq <- c2s(sequences[[i]])
current.seq.name <- seq.names[i]
j <- 1
motifs.pwm[[j]]
motif.ids[[j]]
motif.names[[j]]
for(j in 1:number.motifs)
{
multiplicities[current.seq.name, motif.names[[j]]] <- nrow(as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value)))
}
head(multiplicities)
for(i in 1:length(seq.names))
{
current.seq <- c2s(sequences[[i]])
current.seq.name <- seq.names[i]
#motifs.pwm[[j]]
#motif.ids[[j]]
#motif.names[[j]]
for(j in 1:number.motifs)
{
multiplicities[current.seq.name, motif.names[[j]]] <- nrow(as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value)))
}
}
head(multiplicities)
write.table(x = multiplicities,file = "precomputed_network.tsv",sep = "\t",quote = F)
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/TFBS_enrichment/homer_like")
read.table(file = "peak_ZT0_trough_ZT12.txt",as.is = T)[[1]]
target.genes <- read.table(file = "peak_ZT0_trough_ZT12.txt",as.is = T)[[1]]
length(target.genes)
number.randomisations <- 10
i <- 1
read.table(file = "precomputed_network_1000_500_5778.tsv",header=T)
background <- read.table(file = "precomputed_network_1000_500_5778.tsv",header=T)
head(background)
nrow(background)
sample(x = 1:nrow(background),size = length(target.genes))
random.selection <- sample(x = 1:nrow(background),size = length(target.genes))
background[random.selection,]
1:nrow(background)
help(sample)
random.selection <- sample(x = 1:nrow(background),size = length(target.genes))
random.set <- background[random.selection,]
head(random.set)
colSums(random.set)
background[target.genes,]
colSums(background[target.genes,])
intersect(rownames(background),target.genes)
target.genes <- intersect(rownames(background),target.genes)
target.genes <- read.table(file = "peak_ZT0_trough_ZT12.txt",as.is = T)[[1]]
background <- read.table(file = "precomputed_network_1000_500_5778.tsv",header=T)
head(background)
target.genes <- intersect(rownames(background),target.genes)
colSums(background[target.genes,])
target.motif.multiplicity<- colSums(background[target.genes,])
target.motif.multiplicity
random.mutiplicities <- matrix(nrow=number.randomisations,ncol=ncol(background))
random.multiplicities <- matrix(nrow=number.randomisations,ncol=ncol(background))
random.multiplicities <- matrix(nrow=number.randomisations,ncol=ncol(background))
colnames(random.multiplicities) <- colnames(background)
target.genes <- read.table(file = "peak_ZT0_trough_ZT12.txt",as.is = T)[[1]]
background <- read.table(file = "precomputed_network_1000_500_5778.tsv",header=T)
head(background)
target.genes <- intersect(rownames(background),target.genes)
target.motif.multiplicity <- colSums(background[target.genes,])
number.randomisations <- 10
random.multiplicities <- matrix(nrow=number.randomisations,ncol=ncol(background))
colnames(random.multiplicities) <- colnames(background)
i <- 1
for(i in 1:number.randomisations)
{
random.selection <- sample(x = 1:nrow(background),size = length(target.genes))
random.set <- background[random.selection,]
random.multiplicities[i,] <- colSums(random.set)
}
head(random.multiplicities)
random.multiplicities[i]
random.multiplicities[,i]
target.motif.multiplicity
target.motif.multiplicity[i]
target.motif.multiplicity[i] < random.multiplicities[,i]
(target.motif.multiplicity[i] > random.multiplicities[,i])
target.motif.multiplicity[i]
random.multiplicities[,i]
(target.motif.multiplicity[i] < random.multiplicities[,i])
sum(target.motif.multiplicity[i] < random.multiplicities[,i]) / number.randomisations
p.values <- vector(mode = "numeric", length = ncol(background))
number.randomisations <- 1000
random.multiplicities <- matrix(nrow=number.randomisations,ncol=ncol(background))
colnames(random.multiplicities) <- colnames(background)
i <- 1
for(i in 1:number.randomisations)
{
random.selection <- sample(x = 1:nrow(background),size = length(target.genes))
random.set <- background[random.selection,]
random.multiplicities[i,] <- colSums(random.set)
}
p.values <- vector(mode = "numeric", length = ncol(background))
for(i in 1:ncol(ncol(background)))
{
p.values[i] <- sum(target.motif.multiplicity[i] < random.multiplicities[,i]) / number.randomisations
}
for(i in 1:ncol(background))
{
p.values[i] <- sum(target.motif.multiplicity[i] < random.multiplicities[,i]) / number.randomisations
}
p.values
help("p.adjust")
p.adjust(p = p.values,method = "BH")
q.values <- p.adjust(p = p.values,method = "BH")
q.values
q.values < 0.01
colnames(background)[q.values < 0.01]
colnames(background)[q.values < 0.001]
setwd("~/Dropbox/github_repos/AlgaeFun/data/vocar/preprocessing")
remove.packages("org.Vcarteri.eg.db")
setwd("~/Dropbox/github_repos/AlgaeFun/data/vocar/preprocessing")
## Documentation on how to generate org.db packages can be found on these links:
## http://bioconductor.org/packages/release/bioc/vignettes/AnnotationForge/inst/doc/MakingNewOrganismPackages.html
##
vocar.info <- read.table(file="Vcarteri_317_v2.1.annotation_info.txt",header=T,comment.char = "",sep = "\t",as.is=T, fill=T)
head(vocar.info)
head(vocar.info)
nrow(vocar.info)
## Generate and write output data frame
id.vocar.name <- data.frame(GID=vocar.info$locusName,GENENAME=vocar.info$locusName,stringsAsFactors = FALSE)
head(id.vocar.name)
## Generate SYMBOL data frame
symbol.data.frame <- data.frame(GID=vocar.info$locusName,
SYMBOL=vocar.info$locusName,stringsAsFactors = FALSE)
head(symbol.data.frame)
nrow(symbol.data.frame)
symbol.data.frame[1:20,]
## Remove duplicated rows
symbol.data.frame <- symbol.data.frame[!duplicated(symbol.data.frame),]
nrow(symbol.data.frame)
sum(duplicated(symbol.data.frame))
head(symbol.data.frame)
gid <- vocar.info$locusName
go <- vocar.info$GO
evidence <- rep("ISS",length(gid))
go.data.frame <- data.frame(GID=gid,GO=go,EVIDENCE=evidence,stringsAsFactors = FALSE)
head(go.data.frame)
go.data.frame <- subset(go.data.frame, GO != "")
head(go.data.frame)
go.expanded.data.frame <- c()
for(i in 1:nrow(go.data.frame))
{
go.splitted <- strsplit(go.data.frame$GO[i],split=",")[[1]]
if(length(go.splitted) > 0)
{
for(j in 1:length(go.splitted))
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],go.splitted[j]))
}
} else
{
go.expanded.data.frame <- rbind(go.expanded.data.frame,c(go.data.frame[i,1],""))
}
}
head(go.expanded.data.frame)
go.data.frame <- data.frame(GID=go.expanded.data.frame[,1],
GO=go.expanded.data.frame[,2],
EVIDENCE=rep("ISS",nrow(go.expanded.data.frame)),stringsAsFactors = FALSE)
head(go.data.frame)
## Remove duplicated rows
go.data.frame <- go.data.frame[!duplicated(go.data.frame),]
go.data.frame[1:10,]
nrow(go.data.frame)
length(unique(go.data.frame$GID))
sum(duplicated(go.data.frame))
enzyme <- vocar.info$KEGG.ec
enzyme.data.frame <- data.frame(GID=gid,ENZYME=enzyme,stringsAsFactors = FALSE)
head(enzyme.data.frame)
## Remove duplicated rows
enzyme.data.frame <- enzyme.data.frame[!duplicated(enzyme.data.frame),]
head(enzyme.data.frame)
nrow(enzyme.data.frame)
duplicated(enzyme.data.frame)
sum(duplicated(enzyme.data.frame))
length(unique(enzyme.data.frame$GID))
## Generate KOG data.frame
kog <- vocar.info$KOG
kog.data.frame <- data.frame(GID=gid,KOG=kog,stringsAsFactors = FALSE)
head(kog.data.frame)
## Remove duplicated rows
kog.data.frame <- kog.data.frame[!duplicated(kog.data.frame),]
sum(duplicated(kog.data.frame))
nrow(kog.data.frame)
head(kog.data.frame)
length(unique(kog.data.frame$GID))
##Generate KO data frame
ko <- vocar.info$KO
ko.data.frame <- data.frame(GID=gid, KO=ko, stringsAsFactors = F)
head(ko.data.frame)
ko.data.frame[1:20,]
ko.data.frame <- ko.data.frame[!duplicated(ko.data.frame),]
nrow(ko.data.frame)
sum(duplicated(ko.data.frame))
panther <- vocar.info$Panther
panther.data.frame <- data.frame(GID=gid, PANTHER=panther, stringsAsFactors = F)
nrow(panther.data.frame)
head(panther.data.frame)
panther.data.frame <- panther.data.frame[!duplicated(panther.data.frame),]
nrow(panther.data.frame)
sum(duplicated(panther.data.frame))
#     for(j in 1:length(panther.splitted))
#     {
#       panther.expanded.data.frame <- rbind(panther.expanded.data.frame,c(panther.data.frame[i,1],panther.splitted[j]))
#     }
#   } else
#   {
#     panther.expanded.data.frame <- rbind(panther.expanded.data.frame,c(panther.data.frame[i,1],""))
#   }
# }
# head (panther.expanded.data.frame)
panther.data.frame <- data.frame(GID=panther.data.frame[,1],
PANTHER=panther.data.frame[,2],
stringsAsFactors = FALSE)
head(panther.data.frame)
## Load require package
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("AnnotationForge", version = "3.8")
# BiocManager::install("GO.db", version = "3.8")
library(AnnotationForge)
library(GO.db)
makeOrgPackage(go=go.data.frame,
SYMBOL=symbol.data.frame,
ENZYME=enzyme.data.frame,
KOG=kog.data.frame,
KO=ko.data.frame,
PANTHER=panther.data.frame,
version = "0.1",
maintainer = "Francisco J. Romero-Campero <fran@us.es>",
author = "Ana B. Romero-Losada",
outputDir = ".",
tax_id = "3067",
genus = "Volvox",
species = "carteri",
goTable = "go",
verbose = TRUE)
install.packages("./org.Vcarteri.eg.db/", repos=NULL)
library(org.Vcarteri.eg.db)
columns(org.Vcarteri.eg.db)
shiny::runApp('~/Dropbox/github_repos/AlgaeFun/web_app')
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/TFBS_enrichment/homer_like")
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/TFBS_enrichment/homer_like")
library(seqinr)
library(TxDb.Athaliana.BioMart.plantsmart28)
promoter.length <- 500
downstream.promoter <- 500
txdb <- TxDb.Athaliana.BioMart.plantsmart28
network.data <- read.table(file="../../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
head(network.data)
network.genes <- network.data$names
#genes.data <- subset(genes(txdb,columns=c("tx_id", "tx_name","gene_id")), seqnames %in% 1:5)
genes.data <- subset(genes(txdb,columns=c("tx_id", "tx_name","gene_id")), seqnames %in% 1:5)
genes.tss <- resize(genes.data, width=1, fix='start')
genes.tss <- as.data.frame(genes.tss)
genes.tss  <- genes.tss[network.genes,]
head(genes.tss)
genes.promoters.coordinates <- genes.tss[,c(1:3,5)]
head(genes.promoters.coordinates)
for(i in 1:nrow(genes.promoters.coordinates))
{
print(i)
current.strand <- as.character(genes.promoters.coordinates$strand[i])
if(current.strand == "+")
{
genes.promoters.coordinates$start[i] <- genes.promoters.coordinates$start[i] - 1000
genes.promoters.coordinates$end[i] <- genes.promoters.coordinates$end[i] + 500
} else if(current.strand == "-")
{
genes.promoters.coordinates$start[i] <- genes.promoters.coordinates$start[i] - 500
genes.promoters.coordinates$end[i] <- genes.promoters.coordinates$end[i] + 1000
} else
{
print("no strand!!!!")
}
}
chr1 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr1.fa",seqtype = "AA"))[[1]]
chr2 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr2.fa",seqtype = "AA"))[[1]]
chr3 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr3.fa",seqtype = "AA"))[[1]]
chr4 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr4.fa",seqtype = "AA"))[[1]]
chr5 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr5.fa",seqtype = "AA"))[[1]]
background.sequences <- vector(mode = "list",length = nrow(genes.promoters.coordinates))
for(i in 1:nrow(genes.promoters.coordinates))
{
print(i)
current.chr <- as.numeric(genes.promoters.coordinates$seqnames[i])
if(current.chr == 1)
{
background.sequences[[i]] <- chr1[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 2)
{
background.sequences[[i]] <- chr2[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 3)
{
background.sequences[[i]] <- chr3[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 4)
{
background.sequences[[i]] <- chr4[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 5)
{
background.sequences[[i]] <- chr5[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
}
}
paste(paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates))
paste(paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_"),".fa",sep="")
paste(paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_"),".fa",sep="")
write.fasta(sequences = background.sequences,names = rownames(genes.promoters.coordinates),
file.out = paste(paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_"),".fa",sep=""))
library(seqinr)
library(Biostrings)
sequences.file <- "background_500_500_5778.fa"
score.value <- "95%"
number.motifs <- 453
## Load Position Weight Matrices
## Open file connection
con <- file("../../../../web_apps/peak_visualizer/data/jaspar_motifs/pfm_plants_20180911.txt",open = "r")
## Empty list for storing PWM
motifs.pwm <- vector(mode="list",length = number.motifs)
motif.ids <- vector(mode="character",length=number.motifs)
motif.names <- vector(mode="character",length=number.motifs)
## Load 64 PWM
for(j in 1:number.motifs)
{
## First line contains motif id and name
first.line <- readLines(con,1)
motif.ids[j] <- strsplit(first.line,split=" ")[[1]][1]
motif.names[j] <- strsplit(first.line,split=" ")[[1]][2]
## Next four line contians probabilites for each nucleotide
a.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
c.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
g.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
t.row <- as.numeric(strsplit(readLines(con,1),split="( )+")[[1]])
## Construct PWM
motif.pwm <- matrix(nrow = 4,ncol=length(a.row))
motif.pwm[1,] <- a.row
motif.pwm[2,] <- c.row
motif.pwm[3,] <- g.row
motif.pwm[4,] <- t.row
rownames(motif.pwm) <- c("A","C","G","T")
motifs.pwm[[j]] <- prop.table(motif.pwm,2)
}
## Close file connection
close(con)
## Naming list with PWM
names(motifs.pwm) <- motif.names
names(motif.ids) <- motif.names
## Read sequences file
sequences.data <- read.fasta(file = sequences.file,seqtype = "AA")
sequences <- getSequence(sequences.data)
seq.names <- getName(sequences.data)
#multiplicities <- vector(mode = "numeric",length=number.motifs)
multiplicities <- matrix(nrow=length(sequences),ncol=number.motifs)
rownames(multiplicities) <- seq.names
colnames(multiplicities) <- motif.names
head(multiplicities)
i <- 1
for(i in 1:length(seq.names))
{
print(i)
current.seq <- c2s(sequences[[i]])
current.seq.name <- seq.names[i]
for(j in 1:number.motifs)
{
multiplicities[current.seq.name, motif.names[[j]]] <- nrow(as.data.frame(matchPWM(pwm = motifs.pwm[[j]],subject = current.seq,min.score = score.value)))
}
}
