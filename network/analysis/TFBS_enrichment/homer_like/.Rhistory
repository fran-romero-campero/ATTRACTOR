factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/ChlamyNET')
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
gene.expression[zts.to.consider(zt.point = current.time.point) %in% seq(from=,to=24,by=4)]
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
library(igraph)
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
1+1
genotype.1 <- "resistant"
genotype.1
fecundity.1 <- 12.8
fecundity.1
FALSE
genotype.2 <- "resistant"
fecundity.2 <- 21.6
genotype.3 <- "control"
fecundity.3 <- 35.4
genotype.4 <- "control"
fecundity.4 <- 27.4
genotype.1
## Los tipos de datos simples en R son numérico, carácter y lógico.
is.numeric(genotype.1)
genotype.1
is.character(genotype.1)
res <- is.character(fecundity.1)   # El resultado de una función puede almacenarse en una variable
res
res
is.logical(res)
fecundity.1
fecundity.2
resistant.mean <- (fecundity.1 + fecundity.2) / 2
resistant.mean
fecundity.1
fecundity.3
fecundity.1 > fecundity.3
fecundity.2
fecundity.4
fecundity.2 <= fecundity.4
genotype.4
genotype.4 == "control"
fecundity.resistant <- c(12.8, 21.6, 14.8, 23.1, 34.6, 19.7, 22.6, 29.6, 16.4, 20.3, 29.3,
14.9, 27.3, 22.4, 27.5, 20.3, 38.7, 26.4, 23.7, 26.1, 29.5, 38.6,
44.4, 23.2, 23.6)
fecundity.resistant
1:25
25:1
1:25+1
1:2500+1
1:(25+1)
myvar <- 1:(25+1)
myvar
seq(from = 0,to = 20,by = 2)
seq(to = 20,by = 2,from = 0)
rep("resistant",25)
fecundity.susceptible <- c(38.4, 32.9, 48.5, 20.9, 11.6, 22.3, 30.2, 33.4, 26.7, 39, 12.8, 14.6, 12.2, 23.1,
29.4, 16, 20.1, 23.3, 22.9, 22.5, 15.1, 31, 16.9, 16.1, 10.8)
fecundity.control <- c(35.4, 27.4, 19.3, 41.8, 20.3, 37.6, 36.9)
fecundity.control
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
fecundity.control.names
names(fecundity.control) <- fecundity.control.names
fecundity.control
fecundity.control
fecundity.control[2]
fecundity.control[Mar]
fecundity.control["Mar"]
fecundity.control[["Mar"]]
fecundity.control[1:3]
fecundity.control[c(1,2,3)]
fecundity.control[c("Lun","Mar","Mie")]
fecundity.control[c("Lun","Mie","Mar")]
fecundity.control["Sab"]
fecundity.control["sab"]
fecundity.control.names <- c("Lun", "Mar", "Mie", "Jue", "Vie", "Sab", "Dom")
names(fecundity.control) <- fecundity.control.names
fecundity.control
my.logical <-
fecundity.control > 30
fecundity.control > 30
my.logical <- fecundity.control > 30
fecundity.control[my.logical]
fecundity.control[fecundity.control < 20]
fecundity.control["Lun"]
fecundity.control["Lun"] <- 34.5
fecundity.control["Lun"]
fecundity.control
fecundity.control < 20
fecundity.control[fecundity.control < 20]
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/network_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
shiny::runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/data')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
shiny::runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
runApp('Dropbox/github_repos/AlgaeFun/web_app')
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/TFBS_enrichment/homer_like")
library(seqinr)
library(TxDb.Athaliana.BioMart.plantsmart28)
promoter.length <- 1000
promoter.length <- 1000
downstream.promoter <- 500
txdb <- TxDb.Athaliana.BioMart.plantsmart28
genes.data <- subset(genes(txdb,columns=c("tx_id", "tx_name","gene_id")), seqnames %in% 1:5)
genes.tss <- resize(genes.data, width=1, fix='start')
genes.tss <- as.data.frame(genes.tss)
head(genes.tss)
genes.promoters.coordinates <- genes.tss[,c(1:3,5)]
head(genes.promoters.coordinates)
for(i in 1:nrow(genes.promoters.coordinates))
{
print(i)
current.strand <- as.character(genes.promoters.coordinates$strand[i])
if(current.strand == "+")
{
genes.promoters.coordinates$start[i] <- genes.promoters.coordinates$start[i] - 1000
genes.promoters.coordinates$end[i] <- genes.promoters.coordinates$end[i] + 500
} else if(current.strand == "-")
{
genes.promoters.coordinates$start[i] <- genes.promoters.coordinates$start[i] - 500
genes.promoters.coordinates$end[i] <- genes.promoters.coordinates$end[i] + 1000
} else
{
print("no strand!!!!")
}
}
chr1 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr1.fa",seqtype = "DNA"))[[1]]
chr2 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr2.fa",seqtype = "DNA"))[[1]]
chr3 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr3.fa",seqtype = "DNA"))[[1]]
chr4 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr4.fa",seqtype = "DNA"))[[1]]
chr5 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr5.fa",seqtype = "DNA"))[[1]]
i <- 1
as.numeric(genes.promoters.coordinates$seqnames[i])
current.chr <- as.numeric(genes.promoters.coordinates$seqnames[i])
chr1[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
chr1[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
nrow(genes.promoters.coordinates)
background.sequences <- vector(mode = "list",length = nrow(genes.promoters.coordinates))
library(seqinr)
library(TxDb.Athaliana.BioMart.plantsmart28)
promoter.length <- 1000
downstream.promoter <- 500
txdb <- TxDb.Athaliana.BioMart.plantsmart28
genes.data <- subset(genes(txdb,columns=c("tx_id", "tx_name","gene_id")), seqnames %in% 1:5)
genes.tss <- resize(genes.data, width=1, fix='start')
genes.tss <- as.data.frame(genes.tss)
head(genes.tss)
genes.promoters.coordinates <- genes.tss[,c(1:3,5)]
head(genes.promoters.coordinates)
for(i in 1:nrow(genes.promoters.coordinates))
{
print(i)
current.strand <- as.character(genes.promoters.coordinates$strand[i])
if(current.strand == "+")
{
genes.promoters.coordinates$start[i] <- genes.promoters.coordinates$start[i] - 1000
genes.promoters.coordinates$end[i] <- genes.promoters.coordinates$end[i] + 500
} else if(current.strand == "-")
{
genes.promoters.coordinates$start[i] <- genes.promoters.coordinates$start[i] - 500
genes.promoters.coordinates$end[i] <- genes.promoters.coordinates$end[i] + 1000
} else
{
print("no strand!!!!")
}
}
chr1 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr1.fa",seqtype = "AA"))[[1]]
chr2 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr2.fa",seqtype = "AA"))[[1]]
chr3 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr3.fa",seqtype = "AA"))[[1]]
chr4 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr4.fa",seqtype = "AA"))[[1]]
chr5 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr5.fa",seqtype = "AA"))[[1]]
background.sequences <- vector(mode = "list",length = nrow(genes.promoters.coordinates))
for(i in 1:nrow(genes.promoters.coordinates))
{
print(i)
current.chr <- as.numeric(genes.promoters.coordinates$seqnames[i])
if(current.chr == 1)
{
background.sequences[[i]] <- chr1[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 2)
{
background.sequences[[i]] <- chr2[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 3)
{
background.sequences[[i]] <- chr3[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 4)
{
background.sequences[[i]] <- chr4[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 5)
{
background.sequences[[i]] <- chr5[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
}
}
rownames(genes.promoters.coordinates)
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates), collapse="_")
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates), collapse="_"))
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates), collapse="_"))
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_"))
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_"))
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_")
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates), collapse="_")
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates), collapse="_"))
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates), collapse="_"))
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_"))
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_"))
paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_")
paste(paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_"),".fa",sep="")
write.fasta(sequences = background.sequences,names = rownames(genes.promoters.coordinates),
file.out = paste(paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_"),".fa",sep=""))
res <- read.table(file="../../../attractor_network.tsv",header = T)
head(res)
res <- read.table(file="../../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = T)
network.data <- read.table(file="../attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
network.data <- read.table(file="../../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
head(network.data)
network.data$names
network.genes <- network.data$names
genes(txdb,columns=c("tx_id", "tx_name","gene_id"))
genes.tss
genes.tss  <- genes.tss[network.genes,]
head(genes.tss)
genes.promoters.coordinates <- genes.tss[,c(1:3,5)]
head(genes.promoters.coordinates)
for(i in 1:nrow(genes.promoters.coordinates))
{
print(i)
current.strand <- as.character(genes.promoters.coordinates$strand[i])
if(current.strand == "+")
{
genes.promoters.coordinates$start[i] <- genes.promoters.coordinates$start[i] - 1000
genes.promoters.coordinates$end[i] <- genes.promoters.coordinates$end[i] + 500
} else if(current.strand == "-")
{
genes.promoters.coordinates$start[i] <- genes.promoters.coordinates$start[i] - 500
genes.promoters.coordinates$end[i] <- genes.promoters.coordinates$end[i] + 1000
} else
{
print("no strand!!!!")
}
}
chr1 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr1.fa",seqtype = "AA"))[[1]]
chr2 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr2.fa",seqtype = "AA"))[[1]]
chr3 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr3.fa",seqtype = "AA"))[[1]]
chr4 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr4.fa",seqtype = "AA"))[[1]]
chr5 <- getSequence(read.fasta(file = "../../../../web_apps/peak_visualizer/data/athaliana_genome/chr5.fa",seqtype = "AA"))[[1]]
background.sequences <- vector(mode = "list",length = nrow(genes.promoters.coordinates))
for(i in 1:nrow(genes.promoters.coordinates))
{
print(i)
current.chr <- as.numeric(genes.promoters.coordinates$seqnames[i])
if(current.chr == 1)
{
background.sequences[[i]] <- chr1[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 2)
{
background.sequences[[i]] <- chr2[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 3)
{
background.sequences[[i]] <- chr3[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 4)
{
background.sequences[[i]] <- chr4[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
} else if (current.chr == 5)
{
background.sequences[[i]] <- chr5[genes.promoters.coordinates$start[i]:genes.promoters.coordinates$end[i]]
}
}
write.fasta(sequences = background.sequences,names = rownames(genes.promoters.coordinates),
file.out = paste(paste(c("background",promoter.length,downstream.promoter,nrow(genes.promoters.coordinates)), collapse="_"),".fa",sep=""))
