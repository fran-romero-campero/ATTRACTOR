Matrix2 <- Mat01[rownames(Mat01) %in% control_list, colnames(Mat01) %in%
chip_index$Accession]
contMatrix_list <- lapply(1:(nrow(myMetadata)-1), matrix, data= NA, nrow=2, ncol=2) #Create an empty list of matrices
chip.vector1 <- Matrix1[, accs[i] ]
test_list <- my.list
control_list <- control.list
help("contingency_matrix")
control_list <- control_list[!(control_list %in% test_list)]
Mat01
rownames(Mat01) %in% test_list
chip_index$Accession
Matrix1 <- Mat01[rownames(Mat01) %in% test_list, colnames(Mat01) %in%
chip_index$Accession]
Matrix2 <- Mat01[rownames(Mat01) %in% control_list, colnames(Mat01) %in%
chip_index$Accession]
Matrix1 <- Mat01[rownames(Mat01) %in% test_list, colnames(Mat01) %in%
chip_index$Accession]
Matrix2 <- Mat01[rownames(Mat01) %in% control_list, colnames(Mat01) %in%
chip_index$Accession]
contMatrix_list <- lapply(1:nrow(myMetadata), matrix, data= NA, nrow=2, ncol=2) #Create an empty list of matrices
chip.vector1 <- Matrix1[, accs[i] ]
rm(accs)
chip.vector1 <- Matrix1[, accs[i] ]
chip_index$Accession
chip.vector1 <- Matrix1[, chip_index$Accession[i] ]
chip.vector2 <- Matrix2[, chip_index$Accession[i] ]
chip.vector1
chip.vector2
pos1 <- sum( chip.vector1 == 1 )
pos2 <- sum(chip.vector2 == 1 )
neg1 <- sum( chip.vector1 == 0 )
neg2 <- sum( chip.vector2 == 0 )
contMatrix <- cbind(c(pos1, pos2), c(neg1, neg2))
contMatrix
rownames(contMatrix) <- c("Test", "Control")
colnames(contMatrix) <- c("Positive", "Negative")
contMatrix_list[[i]] <- contMatrix
i <- 8
control_list <- control_list[!(control_list %in% test_list)]
Matrix1 <- Mat01[rownames(Mat01) %in% test_list, colnames(Mat01) %in%
chip_index$Accession]
Matrix2 <- Mat01[rownames(Mat01) %in% control_list, colnames(Mat01) %in%
chip_index$Accession]
chip.vector1 <- Matrix1[, chip_index$Accession[i] ]
chip.vector2 <- Matrix2[, chip_index$Accession[i] ]
pos1 <- sum( chip.vector1 == 1 )
pos2 <- sum(chip.vector2 == 1 )
neg1 <- sum( chip.vector1 == 0 )
neg2 <- sum( chip.vector2 == 0 )
contMatrix <- cbind(c(pos1, pos2), c(neg1, neg2))
contMatrix
i <- 20
control_list <- control_list[!(control_list %in% test_list)]
Matrix1 <- Mat01[rownames(Mat01) %in% test_list, colnames(Mat01) %in%
chip_index$Accession]
Matrix2 <- Mat01[rownames(Mat01) %in% control_list, colnames(Mat01) %in%
chip_index$Accession]
contMatrix_list <- lapply(1:nrow(myMetadata), matrix, data= NA, nrow=2, ncol=2) #Create an empty list of matrices
chip.vector1 <- Matrix1[, chip_index$Accession[i] ]
chip.vector2 <- Matrix2[, chip_index$Accession[i] ]
chip_index$Accession[i]
Matrix1
myMetadata
chip_index <- myMetadata
control_list <- control_list[!(control_list %in% test_list)]
Matrix1 <- Mat01[rownames(Mat01) %in% test_list, colnames(Mat01) %in%
chip_index$Accession]
Matrix1
ncol(Matrix1)
ncol(Matrix2)
head(myMetadata)
Matrix1 <- Mat01[rownames(Mat01) %in% test_list, colnames(Mat01) %in%
chip_index$Accession]
Matrix2 <- Mat01[rownames(Mat01) %in% control_list, colnames(Mat01) %in%
chip_index$Accession]
if (!exists("Mat01")) {
Mat01 <- NULL
data("Mat01", package = "TFEA.ChIP", envir = environment())
}
if (missing(control_list)) {
# Generating control gene list in case is not provided.
control_list <- rownames(Mat01)
}
control_list <- control_list[!(control_list %in% test_list)]
Matrix1 <- Mat01[rownames(Mat01) %in% test_list, colnames(Mat01) %in%
chip_index$Accession]
Matrix2 <- Mat01[rownames(Mat01) %in% control_list, colnames(Mat01) %in%
chip_index$Accession]
ncol(Matrix1)
colnames(Mat01) %in%
chip_index$Accession
chip_index$Accession
colnames(Mat01)
data("Mat01", package = "TFEA.ChIP", envir = environment())
Mat01
!exists("Mat01")
rm(Mat01)
if (!exists("Mat01")) {
Mat01 <- NULL
data("Mat01", package = "TFEA.ChIP", envir = environment())
}
head(Mat01)
rownames(Mat01)
colnames(Mat01)
test_list <- my.list
control_list <- control.list
chip_index <- myMetadata
if (!exists("Mat01")) {
Mat01 <- NULL
data("Mat01", package = "TFEA.ChIP", envir = environment())
}
if (missing(control_list)) {
# Generating control gene list in case is not provided.
control_list <- rownames(Mat01)
}
Mat01
rm(Mat01)
control_list <- control_list[!(control_list %in% test_list)]
Matrix1 <- Mat01[rownames(Mat01) %in% test_list, colnames(Mat01) %in%
chip_index$Accession]
Mat01 <- myTFBSmatrix
control_list <- control_list[!(control_list %in% test_list)]
Matrix1 <- Mat01[rownames(Mat01) %in% test_list, colnames(Mat01) %in%
chip_index$Accession]
Matrix2 <- Mat01[rownames(Mat01) %in% control_list, colnames(Mat01) %in%
chip_index$Accession]
ncol(Matrix1)
ncol(Mat01)
head(Mat01)
gen.list
TF.gene.binding.db
gr.list
i <- 1
gr.list[i]
#Load package
library(TFEA.ChIP)
#Read the metadata table
# A Metadata table (storing at least, Accession ID, name of the file,
# and TF tested in the ChIP-Seq experiment). The metadata table included
# with this package has the following fields: “Name”, “Accession”, “Cell”,
# “Cell Type”, “Treatment”, “Antibody”, and “TF”.
myMetadata <- read.table(file = "metadata.txt", header = T)
head(myMetadata)
bed <- read.table(file = "CCA1_peaks.narrowPeak")
head(bed)
#txt2GR is the function to convert a file.txt with peaks to GRanges object
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = myMetadata)
folder<-"../bed_files/"
File.list<-dir(folder)
format<-"narrowpeak"
#This function read the bed file, select the info from myMetaData and apply the txt2GR function
txt2GR.fun <- function( File.list, myMetaData, format ){
tmp<-read.table( file = paste0(folder,File.list[i]), stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
}
#For loop
gr.list <- list()
for (i in 1:length(File.list))
{
gr.list[i] <- txt2GR.fun(File.list = File.list, myMetaData = myMetadata, format="narrowpeak")
}
library(GSEABase)
library(TxDb.Athaliana.BioMart.plantsmart28)
txdb <- TxDb.Athaliana.BioMart.plantsmart28
atha.genes <- genes(txdb)
TF.gene.binding.db <- GR2tfbs_db(atha.genes, gr.list, distanceMargin = 0) #asignation of peaks to genes
str(TF.gene.binding.db)
gen.list <- genes(txdb)$gene_id # selecting all the genes in knownGene
myTFBSmatrix <- makeTFBSmatrix(gen.list,TF.gene.binding.db)
myTFBSmatrix[2530:2531,] # The gene AT1G23080 has TFBS for this five ChIP-Seq datasets
set_user_data(binary_matrix = myTFBSmatrix, metadata = myMetadata)
help("set_user_data")
zt0.peak <- read.table("../../../clusters/peak_ZT0_trough_ZT12.txt", as.is = T)[[1]]
length(zt0.peak)
network.data <- read.table(file="../../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
head(network.data)
all.genes <- network.data$names
length(all.genes)
my.list <- intersect(zt0.peak, all.genes)
length(my.list)
control.list <- setdiff(all.genes, my.list)
length(control.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
CM.list
pvalues <- getCMstats(CM.list)
pvalues
head(pvalues)
plot_CM(pvalues)
install.packages(plotly)
install.packages("plotly")
library(plotly)
plot_CM(pvalues)
plot_CM(pvalues)
head(pvalues)
#Load package
library(TFEA.ChIP)
#Read the metadata table
# A Metadata table (storing at least, Accession ID, name of the file,
# and TF tested in the ChIP-Seq experiment). The metadata table included
# with this package has the following fields: “Name”, “Accession”, “Cell”,
# “Cell Type”, “Treatment”, “Antibody”, and “TF”.
myMetadata <- read.table(file = "metadata.txt", header = T)
head(myMetadata)
#txt2GR is the function to convert a file.txt with peaks to GRanges object
txt2GR(fileTable = bed, format = "narrowpeak", fileMetaData = myMetadata)
folder<-"../bed_files/"
File.list<-dir(folder)
format<-"narrowpeak"
#This function read the bed file, select the info from myMetaData and apply the txt2GR function
txt2GR.fun <- function( File.list, myMetaData, format ){
tmp<-read.table( file = paste0(folder,File.list[i]), stringsAsFactors = FALSE )
file.metadata <- myMetadata[ myMetadata$Name == File.list[i], ]
ChIP.dataset.gr<-txt2GR(tmp, format, file.metadata)
return(ChIP.dataset.gr)
}
#For loop
gr.list <- list()
for (i in 1:length(File.list))
{
gr.list[i] <- txt2GR.fun(File.list = File.list, myMetaData = myMetadata, format="narrowpeak")
}
library(GSEABase)
library(TxDb.Athaliana.BioMart.plantsmart28)
txdb <- TxDb.Athaliana.BioMart.plantsmart28
atha.genes <- genes(txdb)
TF.gene.binding.db <- GR2tfbs_db(atha.genes, gr.list, distanceMargin = 0) #asignation of peaks to genes
str(TF.gene.binding.db)
gen.list <- genes(txdb)$gene_id # selecting all the genes in knownGene
myTFBSmatrix <- makeTFBSmatrix(gen.list,TF.gene.binding.db)
myTFBSmatrix[2530:2531,] # The gene AT1G23080 has TFBS for this five ChIP-Seq datasets
set_user_data(binary_matrix = myTFBSmatrix, metadata = myMetadata)
zt0.peak <- read.table("../../../clusters/peak_ZT0_trough_ZT12.txt", as.is = T)[[1]]
length(zt0.peak)
network.data <- read.table(file="../../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
head(network.data)
all.genes <- network.data$names
length(all.genes)
my.list <- intersect(zt0.peak, all.genes)
length(my.list)
control.list <- setdiff(all.genes, my.list)
length(control.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
head(pvalues)
plot_CM(pvalues)  #plot p-values against ORs (odd-ratios)
zt0.peak <- read.table("../../../clusters/peak_ZT0.txt", as.is = T)[[1]]
length(zt0.peak)
network.data <- read.table(file="../../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
head(network.data)
all.genes <- network.data$names
length(all.genes)
my.list <- intersect(zt0.peak, all.genes)
length(my.list)
control.list <- setdiff(all.genes, my.list)
length(control.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
head(pvalues)
plot_CM(pvalues)  #plot p-values against ORs (odd-ratios)
zt0.peak <- read.table("../../../clusters/peak_ZT12_trough_ZT0.txt", as.is = T)[[1]]
length(zt0.peak)
network.data <- read.table(file="../../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
head(network.data)
all.genes <- network.data$names
length(all.genes)
my.list <- intersect(zt0.peak, all.genes)
length(my.list)
control.list <- setdiff(all.genes, my.list)
length(control.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
head(pvalues)
plot_CM(pvalues)  #plot p-values against ORs (odd-ratios)
zt0.peak <- read.table("../../../clusters/peak_ZT0_trough_ZT16.txt", as.is = T)[[1]]
length(zt0.peak)
network.data <- read.table(file="../../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
zt0.peak <- read.table("../../../clusters/peak_ZT0_trough_ZT12.txt", as.is = T)[[1]]
length(zt0.peak)
network.data <- read.table(file="../../../../web_apps/attractor_dev/data/attractor_network_representation.tsv",header = TRUE,as.is=TRUE,sep="\t",quote = "")
head(network.data)
all.genes <- network.data$names
length(all.genes)
my.list <- intersect(zt0.peak, all.genes)
length(my.list)
control.list <- setdiff(all.genes, my.list)
length(control.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
head(pvalues)
plot_CM(pvalues)  #plot p-values against ORs (odd-ratios)
subset(x = pvalues, ... = adj.p.value < 0.001)
help(subset)
subset(x = pvalues, subset = adj.p.value < 0.001)
length(File.list)
File.list
clusters.folder<-"../../../clusters/"
File.list<-dir(clusters.folder)
cluster.list<-dir(clusters.folder)
length(cluster.list)
paste0("../../../clusters/", cluster.list[i])
i <- 5
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
gene.list
my.list <- intersect(gene.peak, all.genes)
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
CM.list
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
cluster.list[i]
strsplit(x = cluster.list[i], split = "peak_")
strsplit(x = cluster.list[i], split = "peak_")[[1]][2]
i <- 1
split.1 <- strsplit(x = cluster.list[i], split = "peak_")[[1]][2]
split.1
cluster.list
split.1 <- strsplit(x = cluster.list[i], split = "_peak")[[1]][2]
i <- 7
split.1 <- strsplit(x = cluster.list[i], split = "_peak")[[1]][2]
split.1
split.1 <- strsplit(x = cluster.list[i], split = "peak_")[[1]][2]
split.1
strsplit(x = split.1, split = "ZT")
cluster.list[i]
strsplit(x = cluster.list[i], split = "peak_ZT")
i <- 8
strsplit(x = cluster.list[i], split = "peak_ZT")
strsplit(x = cluster.list[i], split = ".txt")
split.1 <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep, file=paste0("TFEA_tests/TFBS_enrichment",split.name))
}
setwd("~/Dropbox/github_repos/ATTRACTOR/network/analysis/TFBS_enrichment/TFEA")
i
paste0("../../../clusters/", cluster.list[i])
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep, file=paste0("TFEA_tests/TFBS_enrichment",split.name))
}
clusters.folder<-"../../../clusters/"
cluster.list<-dir(clusters.folder)
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep, file=paste0("TFEA_tests/TFBS_enrichment",split.name))
}
i
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
cluster.list[i]
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep,
file=paste0("TFEA_tests/TFBS_enrichment",split.name),
sep="\t", header=TRUE)
}
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep,
file=paste0("TFEA_tests/TFBS_enrichment",split.name),
sep="\t")
}
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep,
file=paste0("TFEA_tests/TFBS_enrichment",split.name),
sep="\t", row.names = FALSE)
}
i
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
gene.list
cluster.list[i]
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep,
file=paste0("TFEA_tests/TFBS_enrichment",split.name),
sep="\t", row.names = FALSE)
}
clusters.folder<-"../../../clusters/"
cluster.list<-dir(clusters.folder)
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep,
file=paste0("TFEA_tests/TFBS_enrichment",split.name),
sep="\t", row.names = FALSE)
}
i
cluster.list[i]
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep,
file=paste0("TFEA_tests/TFBS_enrichment",split.name),
sep="\t", row.names = FALSE)
}
clusters.folder<-"../../../clusters/"
cluster.list<-dir(clusters.folder)
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep,
file=paste0("TFEA_tests/TFBS_enrichment",split.name),
sep="\t", row.names = FALSE)
}
i
cluster.list[i]
clusters.folder<-"../../../clusters/"
cluster.list<-dir(clusters.folder)
for (i in 1:length(cluster.list))
{
gene.list <- read.table(paste0("../../../clusters/", cluster.list[i]), as.is = T)[[1]]
my.list <- intersect(gene.list, all.genes)
control.list <- setdiff(all.genes, my.list)
CM.list <- contingency_matrix(test_list = my.list,
control_list = control.list, chip_index = myMetadata)
pvalues <- getCMstats(CM.list)
rows.to.keep <- subset(x = pvalues, subset = adj.p.value < 0.001)
split.name <- strsplit(x = cluster.list[i], split = ".txt")[[1]]
write.table(rows.to.keep,
file=paste0("TFEA_tests/TFBS_enrichment",split.name),
sep="\t", row.names = FALSE)
}
