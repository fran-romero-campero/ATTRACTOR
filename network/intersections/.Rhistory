colour="white",
data=na.omit(points)) +
coord_fixed(ratio = 1) +
theme(legend.position="none",
panel.background = element_rect(fill="black"),
panel.grid=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
library(SuperExactTest)
SuperExactTest::intersect(x = c("A","B","C"),y = c("A","B","C"))
SuperExactTest::intersect(x = c("A","B","C"),y = c("A","C"))
library(SuperExactTest)
cca1.targets <- read.table(file = "../../data/targets_in_network/CCA1_ZT02_targets_in_network.txt",
header = FALSE, as.is = TRUE)
setwd("~/Dropbox/arabidopsis_thaliana_clock_network/network/intersections")
cca1.targets <- read.table(file = "../../data/targets_in_network/CCA1_ZT02_targets_in_network.txt",
header = FALSE, as.is = TRUE)
lhy.targets <- read.table(file="../../data/targets_in_network/LHY_targets_in_network.txt",
header = FALSE, as.is = TRUE)
genes.peak.zt0 <- read.table(file = "../../data/clusters/peak_ZT4.txt",
header = FALSE, as.is = TRUE)
tf1 <- read.table(file = "../../data/targets_in_network/CCA1_ZT02_targets_in_network.txt",
header = FALSE, as.is = TRUE)
tf2 <- read.table(file="../../data/targets_in_network/LHY_targets_in_network.txt",
header = FALSE, as.is = TRUE)
genes.peak.zt0 <- read.table(file = "../../data/clusters/peak_ZT4.txt",
header = FALSE, as.is = TRUE)
sets <- c(cca1.targets, lhy.targets, genes.peak.zt0)
names(sets) <- c("cca1", "lhy", "peakZT0")
results <- supertest(x = sets, n = 6830)
help("plot.msets")
par(mar=c(3,3,3,3))
plot(results, sort.by = "size")
plot(results, Layout = "landscape")
results.table <- summary(results)
typeof(results.table)
length(results.table)
names(results.table)
results.table$Barcode
results.table$otab
typeof(results.table$otab)
final.intersection <- results.table$otab[["111"]]
results.table$etab
results.table$P.value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes
length(sets)
length.gene.sets <- sapply(X = sets,FUN = length)
length.gene.sets
cpsets(x = 43 -1, L = length.gene.sets, n = 6830, lower.tail = FALSE)
peaks1 <- read.table(file = "bed.files/PRR5_1_peaks.narrowPeak")
head(peaks1)
peaks2 <- read.table(file = "bed.files/PRR7_peaks.narrowPeak")
head(peaks2)
peaks3 <- read.table(file = "bed.files/PRR9_1_peaks.narrowPeak")
head(peaks3)
peaks.list <- list(peaks1, peaks2, peaks3)
length.sets <- sapply(X = peaks.list, FUN = nrow)
peaks.set1 <- peaks1
peaks.set2 <- peaks3
intersection <- matrix(ncol = 2 )
current.intersection <- matrix(ncol = 2 )
for (i in 1:nrow(peaks.set1))
{
#Set the current peak values of set1
current.chr <- peaks.set1[i,1]
current.start <- peaks.set1[i,2]
current.end <- peaks.set1[i,3]
#Checking if there is intersection between the current peak and any peak of set2
option1 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start))
option2 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end))
print(i)
if(option1+option2 > 0)
{
print("HIT")
if(option2>0)
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end)
current.intersection[1,1] <- current.start
current.intersection[1,2] <- hit.peak2$V2
}else
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start)
intersection[1,1] <- hit.peak2$V2
intersection[1,2] <- current.start
}
intersection <- rbind(intersection, current.intersection)
}
}
intersection
#Initialize matrix
intersection <- matrix(ncol = 3 )
current.intersection <- matrix(ncol = 3 )
for (i in 1:nrow(peaks.set1))
{
#Set the current peak values of set1
current.chr <- peaks.set1[i,1]
current.start <- peaks.set1[i,2]
current.end <- peaks.set1[i,3]
#Checking if there is intersection between the current peak and any peak of set2
option1 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start))
option2 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end))
print(i)
if(option1+option2 > 0)
{
print("HIT")
if(option2>0)
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end)
current.intersection[1,1] <- current.chr
current.intersection[1,2] <- current.start
current.intersection[1,3] <- hit.peak2$V2
}else
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start)
current.intersection[1,1] <- current.chr
intersection[1,1] <- hit.peak2$V2
intersection[1,2] <- current.start
}
intersection <- rbind(intersection, current.intersection)
}
}
intersection
i <- 89
current.chr <- peaks.set1[i,1]
current.start <- peaks.set1[i,2]
current.end <- peaks.set1[i,3]
current.chr
current.start
current.end
option1 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start))
option2 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end))
option1
option2
option1+option2 > 0
option2>0
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end)
hit.peak2
current.intersection[1,1] <- current.chr
current.chr
current.intersection[1,2] <- current.start
current.start
current.intersection[1,3] <- hit.peak2$V2
hit.peak2$V2
intersection <- matrix(ncol = 3 )
current.intersection <- matrix(ncol = 3 )
intersection
current.intersection
intersection <- matrix(ncol = 3 )
current.intersection <- matrix(ncol = 3 )
for (i in 1:nrow(peaks.set1))
{
#Set the current peak values of set1
current.chr <- peaks.set1[i,1]
current.start <- peaks.set1[i,2]
current.end <- peaks.set1[i,3]
#Checking if there is intersection between the current peak and any peak of set2
option1 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start))
option2 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end))
print(i)
if(option1+option2 > 0)
{
print("HIT")
if(option1>0)
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start)
current.intersection[1,1] <- current.chr
intersection[1,1] <- current.start
intersection[1,2] <- hit.peak2$V3
}else
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end)
current.intersection[1,1] <- current.chr
current.intersection[1,2] <- hit.peak2$V2
current.intersection[1,3] <- current.end
}
intersection <- rbind(intersection, current.intersection)
}
}
intersection
intersection <- matrix(ncol = 3 )
current.intersection <- matrix(ncol = 3 )
for (i in 1:nrow(peaks.set1))
{
#Set the current peak values of set1
current.chr <- peaks.set1[i,1]
current.start <- peaks.set1[i,2]
current.end <- peaks.set1[i,3]
#Checking if there is intersection between the current peak and any peak of set2
option1 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start))
option2 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end))
print(i)
if(option1+option2 > 0)
{
print("HIT")
if(option1>0)
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start)
current.intersection[1,1] <- current.chr
current.intersection[1,2] <- current.start
current.intersection[1,3] <- hit.peak2$V3
}else
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end)
current.intersection[1,1] <- current.chr
current.intersection[1,2] <- hit.peak2$V2
current.intersection[1,3] <- current.end
}
intersection <- rbind(intersection, current.intersection)
}
}
intersection
intersection <- matrix(ncol = 3 )
current.intersection <- matrix(ncol = 3 )
for (i in 1:nrow(peaks.set1))
{
#Set the current peak values of set1
current.chr <- peaks.set1[i,1]
current.start <- peaks.set1[i,2]
current.end <- peaks.set1[i,3]
#Checking if there is intersection between the current peak and any peak of set2
option1 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start))
option2 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end))
print(i)
if(option1+option2 > 0)
{
print("HIT")
if(option1>0)
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start)
current.intersection[1,1] <- current.chr
current.intersection[1,2] <- current.start
current.intersection[1,3] <- hit.peak2$V3
}else
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end)
current.intersection[1,1] <- current.chr
current.intersection[1,2] <- hit.peak2$V2
current.intersection[1,3] <- current.end
}
intersection <- rbind(intersection, current.intersection)
}
}
intersection
intersection
intersection <- matrix(ncol = 3 )
intersection
intersection <- matrix(ncol = 3, nrow=0 )
intersection
intersection <- matrix(ncol = 3, nrow=0 )
current.intersection <- matrix(ncol = 3 )
for (i in 1:nrow(peaks.set1))
{
#Set the current peak values of set1
current.chr <- peaks.set1[i,1]
current.start <- peaks.set1[i,2]
current.end <- peaks.set1[i,3]
#Checking if there is intersection between the current peak and any peak of set2
option1 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start))
option2 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end))
print(i)
if(option1+option2 > 0)
{
print("HIT")
if(option1>0)
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start)
current.intersection[1,1] <- current.chr
current.intersection[1,2] <- current.start
current.intersection[1,3] <- hit.peak2$V3
}else
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end)
current.intersection[1,1] <- current.chr
current.intersection[1,2] <- hit.peak2$V2
current.intersection[1,3] <- current.end
}
intersection <- rbind(intersection, current.intersection)
}
}
intersectBed <- function(peaks.set1, peaks.set2)
{
intersection <- matrix(ncol = 3, nrow=0 )
current.intersection <- matrix(ncol = 3 )
for (i in 1:nrow(peaks.set1))
{
#Set the current peak values of set1
current.chr <- peaks.set1[i,1]
current.start <- peaks.set1[i,2]
current.end <- peaks.set1[i,3]
#Checking if there is intersection between the current peak and any peak of set2
option1 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start))
option2 <- nrow(subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end))
print(i)
if(option1+option2 > 0)
{
print("HIT")
if(option1>0)
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.start & V3>=current.start)
current.intersection[1,1] <- current.chr
current.intersection[1,2] <- current.start
current.intersection[1,3] <- hit.peak2$V3
}else
{
hit.peak2 <- subset(peaks.set2, V1==current.chr & V2<=current.end & V3>=current.end)
current.intersection[1,1] <- current.chr
current.intersection[1,2] <- hit.peak2$V2
current.intersection[1,3] <- current.end
}
intersection <- rbind(intersection, current.intersection)
}
}
return(intersection)
}
intersectBed(peaks1, peaks2)
first <- intersectBed(peaks1, peaks2)
peaks1
second <- intersectBed(first, peaks3)
second
length.sets
second
setwd("~/Dropbox/arabidopsis_thaliana_clock_network/data")
circadian.data <- read.table(file="athaliana_neutral_circadian_genes.txt", header = TRUE)
head(circadian.data)
circadian.data$genes=="AT5G61380"
circadian.data[circadian.data$genes=="AT5G61380",]
genes <- circadian.data$genes
atm.rows <- which(grepl("ATM", genes))
atc.rows <- which(grepl("ATC", genes))
unknown.rows <- which(grepl("unkn", genes))
rows.to.remove <- c(atm.rows, atc.rows, unknown.rows)
circadian.data <- read.table(file = "athaliana_neutral_circadian_genes_filtered.txt", header = FALSE)
head(circadian.data)
circadian.data[circadian.data$genes=="AT5G61380",]
circadian.data[circadian.data$V1=="AT5G61380",]
genes <- as.vector(circadian.data$V1)
peaks <- c(0,4,8,12,16,20)
troughs <- c(0,4,8,12,16,20)
groups <- expand.grid(peaks, troughs)
clusters <- paste0("peak_ZT", groups$Var1, "_trough_ZT", groups$Var2)
clusters
length(clusters)
j <- 10
cluster <- c()
print(j)
circadian.data[circadian.data$V1=="AT5G61380",]
i <- 812
peak <- strsplit(as.character(circadian.data[i,]$V2), "ZT")[[1]][2]
peak
trough <- strsplit(as.character(circadian.data[i,]$V3), "ZT")[[1]][2]
trough
circadian.data <- read.table(file="athaliana_neutral_circadian_genes.txt", header = TRUE)
head(circadian.data)
circadian.data <- read.table(file = "athaliana_neutral_circadian_genes_filtered.txt", header = FALSE)
head(circadian.data)
circadian.data[circadian.data$V1=="AT5G61380",]
genes <- as.vector(circadian.data$V1)
peaks <- c(0,4,8,12,16,20)
troughs <- c(0,4,8,12,16,20)
groups <- expand.grid(peaks, troughs)
clusters <- paste0("peak_ZT", groups$Var1, "_trough_ZT", groups$Var2)
for (j in 1:length(clusters))
{
cluster <- c()
print(j)
for (i in 1:nrow(circadian.data))
{
peak <- strsplit(as.character(circadian.data[i,]$V3), "ZT")[[1]][2]
trough <- strsplit(as.character(circadian.data[i,]$V2), "ZT")[[1]][2]
current.cluster <- paste0("peak_ZT", peak, "_trough_ZT", trough)
if (current.cluster == clusters[j])
{
cluster <- c(cluster,genes[i])
}
}
write.table(cluster, file=paste0("clusters/", clusters[j],".txt"),
quote = FALSE, row.names = FALSE, col.names = FALSE )
}
clusters <- paste0("peak_ZT", peaks)
for (j in 1:length(clusters))
{
cluster <- c()
print(j)
for (i in 1:nrow(circadian.data))
{
peak <- strsplit(as.character(circadian.data[i,]$V3), "ZT")[[1]][2]
current.cluster <- paste0("peak_ZT", peak)
if (current.cluster == clusters[j])
{
cluster <- c(cluster,genes[i])
}
}
write.table(cluster, file=paste0("clusters/", clusters[j],".txt"),
quote = FALSE, row.names = FALSE, col.names = FALSE )
}
length.gene.sets
final.intersection
results.table$P.value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
enrichment
p.value
p.value <- results.table$P.value
p.value
results.table$P.value
length(results.table$P.value)
typeof(results.table$P.value)
tail(results.table$P.value)
tail(results.table$P.value, n=1)
p.value <- tail(results.table$P.value, n=1)
intersection.data[[1]] <- p.value
intersection.data <- list()
intersection.data[[1]] <- p.value
intersection.data
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
gene.table <- "prueba"
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- gene.table
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
intersection.data
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- intersection.genes #hay que meter gene.table con info
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
intersection.data
intersectSets <- function(tf1,tf2,set.of.genes){
intersection.data <- list()
sets <- c(tf1, tf2, set.of.genes)
#names(sets) <- c("cca1", "lhy", "peakZT0")
results <- supertest(x = sets, n = 6830)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.data[[1]] <- p.value
intersection.data[[2]] <- enrichment
intersection.data[[3]] <- intersection.genes #hay que meter gene.table con info
names(intersection.data) <- c("p-value", "enrichment", "gene.table")
return(intersection.data)
}
tf1 <- read.table(file = "../../data/targets_in_network/CCA1_ZT02_targets_in_network.txt",
header = FALSE, as.is = TRUE)
setwd("~/Dropbox/arabidopsis_thaliana_clock_network/network/intersections")
tf1 <- read.table(file = "../../data/targets_in_network/CCA1_ZT02_targets_in_network.txt",
header = FALSE, as.is = TRUE)
tf2 <- read.table(file="../../data/targets_in_network/LHY_targets_in_network.txt",
header = FALSE, as.is = TRUE)
genes.peak.zt <- read.table(file = "../../data/clusters/peak_ZT4.txt",
header = FALSE, as.is = TRUE)
intersectSets(tf1, tf2, genes.peak.zt)
genes.peak.zt <- read.table(file = "../../data/clusters/peak_ZT0.txt",
header = FALSE, as.is = TRUE)
intersectSets(tf1, tf2, genes.peak.zt)
tf1 <- read.table(file = "../../data/targets_in_network/CCA1_ZT02_targets_in_network.txt",
header = FALSE, as.is = TRUE)
tf2 <- read.table(file="../../data/targets_in_network/LHY_targets_in_network.txt",
header = FALSE, as.is = TRUE)
genes.peak.zt <- read.table(file = "../../data/clusters/peak_ZT20.txt",
header = FALSE, as.is = TRUE)
intersectSets(tf1, tf2, genes.peak.zt)
genes.peak.zt <- read.table(file = "../../data/clusters/peak_ZT0.txt",
header = FALSE, as.is = TRUE)
intersectSets(tf1, tf2, genes.peak.zt)
intersection.data <- list()
sets <- c(tf1, tf2, set.of.genes)
set.of.genes <- read.table(file = "../../data/clusters/peak_ZT0.txt",
header = FALSE, as.is = TRUE)
sets <- c(tf1, tf2, set.of.genes)
results <- supertest(x = sets, n = 6830)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
p.value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
enrichment
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
intersection.genes
set.of.genes <- read.table(file = "../../data/clusters/peak_ZT16.txt",
header = FALSE, as.is = TRUE)
set.of.genes
intersection.data <- list()
sets <- c(tf1, tf2, set.of.genes)
length.gene.sets <- sapply(X = sets,FUN = length)
length.gene.sets
results <- supertest(x = sets, n = 6830)
results.table <- summary(results)
p.value <- tail(results.table$P.value, n=1) #Get the last p-value
p.value
enrichment <- (results.table$Table)[["FE"]][nrow(results.table$Table)]
enrichment
intersection.genes <- (results.table$Table)[["Elements"]][nrow(results.table$Table)]
intersection.genes
length(intersection.genes)
intersection.genes <- strsplit(intersection.genes, split = ", ")[[1]]
length(intersection.genes)
tf1 <- read.table(file = "../../data/targets_in_network/CCA1_ZT02_targets_in_network.txt",
header = FALSE, as.is = TRUE)
tf2 <- read.table(file="../../data/targets_in_network/LHY_targets_in_network.txt",
header = FALSE, as.is = TRUE)
set.of.genes <- read.table(file = "../../data/clusters/peak_ZT16.txt",
header = FALSE, as.is = TRUE)
intersectSets(tf1, tf2, genes.peak.zt)
setwd("~/Dropbox/arabidopsis_thaliana_clock_network/network/intersections")
