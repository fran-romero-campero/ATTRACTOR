}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
day.length <- (24 - start.time) + end.time
day.length
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
max.time
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 + hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - 24 - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 9
end.time <- 1
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
start.time <- 10
end.time <- 2
if(end.time > start.time)
{
factor.hora <- 180/(end.time - start.time)
max.time <- (start.time + end.time)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time && hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
} else
{
day.length <- (24 - start.time) + end.time
factor.hora <- 180/(day.length)
max.time <- start.time + (day.length)/2
hora <- 0
time.points <- c()
var.cosw <- c()
increment <- 0.01
i <- 1
while(hora < 24)
{
if(hora >= start.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - hora)/360)
} else if(hora <= end.time)
{
var.cosw[i] <- cos(2*pi*factor.hora*(max.time - (hora+24))/360)
} else
{
var.cosw[i] <- 0
}
time.points[i] <- hora
i <- i + 1
hora <- hora + increment
}
}
plot(time.points,var.cosw)
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/network_visualizer')
runApp('Dropbox/Pedro_de_los_Reyes/arabidopsis_thaliana_clock_network/web_apps/peak_visualizer')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
shiny::runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
runApp('Dropbox/chlamynet/ChlamyNET')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
BiocManager::install("ChIPseeker", version = "3.8")
library("ChIPSeeker")
library("ChIPseeker")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
rsconnect::appDependencies()
options(rsconnect.max.bundle.size=3145728000)
rsconnect::appDependencies()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocGenerics", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocInstaller", version = "3.8")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
??????????????
?
""
??????????????""
?????????""
install.packages("PopGenome")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/BRC1_transcriptional_network')
runApp('Dropbox/github_repos/BRC1_transcriptional_network')
options(repos = BiocInstaller::biocinstallRepos())
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
output.selected.genes.df <- data.frame(matrix(nrow=nrow(selected.genes.df), ncol=6))
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
## Load library and graph
library(igraph)
## Load ATTRACTOR network and extract gene names
atha.graph <- read.graph(file="../../attractor.graphml", format = "graphml")
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/attractor_dev')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
shiny::runApp('Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
setwd("~/Nextcloud/Microalgas/Plan Nacional 2017/minotauro/experimentos/ShortDay/medicion_clorofila")
abs.data <- read.table(file="absorbancias_clorofilas.txt",header = TRUE,as.is=TRUE)
head(abs.data)
days <- unique(abs.data$date)
Qs.data <- matrix(0,nrow=length(days),ncol=6)
rownames(Qs.data) <- days
colnames(Qs.data) <- paste0("Q",1:6)
for(i in 1:length(days))
{
current.day <- days[i]
current.day.abs <- subset(abs.data,date == current.day)
current.chl1 <- current.day.abs$V_methanol*current.day.abs$Dil_Fact*(16.5*current.day.abs$A665 - 8.3*current.day.abs$A650)/current.day.abs$V_culture
current.chl2 <- current.day.abs$V_methanol*current.day.abs$Dil_Fact*(33.76*current.day.abs$A650 - 12.5*current.day.abs$A665)/current.day.abs$V_culture
current.chl <- current.chl1 + current.chl2
Qs.mean <- c(mean(current.chl[current.day.abs$Q == "Q1"]), mean(current.chl[current.day.abs$Q == "Q2"]), mean(current.chl[current.day.abs$Q == "Q3"]),
mean(current.chl[current.day.abs$Q == "Q4"]), mean(current.chl[current.day.abs$Q == "Q5"]), mean(current.chl[current.day.abs$Q == "Q6"]))
Qs.sd <- c(sd(current.chl[current.day.abs$Q == "Q1"]), sd(current.chl[current.day.abs$Q == "Q2"]), sd(current.chl[current.day.abs$Q == "Q3"]),
sd(current.chl[current.day.abs$Q == "Q4"]), sd(current.chl[current.day.abs$Q == "Q5"]), sd(current.chl[current.day.abs$Q == "Q6"]))
Qs.data[i,] <- Qs.mean
}
Qs.data
Qs.colours <- rainbow(6)
Date <- as.Date(days,"%d-%m-%Y")
plot(Date, Qs.data[,1],ylim=c(2,17),type="o",col=Qs.colours[1],lwd=2,cex=1.2,pch=ceiling(1/3),ylab="Chlorophyll (ug/ul)",cex.lab=1.3)
for(i in 2:6)
{
lines(Date,Qs.data[,i],type="o",col=Qs.colours[i],lwd=2,cex=1.2,pch=ceiling(i/3))
}
plot(Date, Qs.data[,1],ylim=c(2,20),type="o",col=Qs.colours[1],lwd=2,cex=1.2,pch=ceiling(1/3),ylab="Chlorophyll (ug/ul)",cex.lab=1.3)
for(i in 2:6)
{
lines(Date,Qs.data[,i],type="o",col=Qs.colours[i],lwd=2,cex=1.2,pch=ceiling(i/3))
}
legend("bottomright",legend=paste("Q",1:6,sep=""),pch=c(rep(1,3),rep(2,3)),col=rainbow(6),lwd=2)
png(filename = "chorophyll.png")
plot(Date, Qs.data[,1],ylim=c(2,20),type="o",col=Qs.colours[1],lwd=2,cex=1.2,pch=ceiling(1/3),ylab="Chlorophyll (ug/ul)",cex.lab=1.3)
for(i in 2:6)
{
lines(Date,Qs.data[,i],type="o",col=Qs.colours[i],lwd=2,cex=1.2,pch=ceiling(i/3))
}
legend("bottomright",legend=paste("Q",1:6,sep=""),pch=c(rep(1,3),rep(2,3)),col=rainbow(6),lwd=2)
dev.off()
plot(Date, Qs.data[,1],ylim=c(0,20),type="o",col=Qs.colours[1],lwd=2,cex=1.2,pch=ceiling(1/3),ylab="Chlorophyll (ug/ul)",cex.lab=1.3)
for(i in 2:6)
{
lines(Date,Qs.data[,i],type="o",col=Qs.colours[i],lwd=2,cex=1.2,pch=ceiling(i/3))
}
legend("bottomright",legend=paste("Q",1:6,sep=""),pch=c(rep(1,3),rep(2,3)),col=rainbow(6),lwd=2)
runApp('~/Dropbox/github_repos/ATTRACTOR/web_apps/peak_visualizer')
setwd("~/Dropbox/github_repos/ATTRACTOR/network")
## Load previous network representation
network.representation <- read.table(file="../web_apps/attractor_dev/data/attractor_network_representation.tsv",header=T,sep = "\t",as.is = T,quote = "")
head(network.representation)
## Extract gene expression profiles
expression.profiles <- as.matrix(network.representation[,c("ZT0","ZT4","ZT8","ZT12","ZT16","ZT20")])
rownames(expression.profiles) <- network.representation$names
head(expression.profiles)
## Extract regulatory matrix
regularoty.matrix <- network.representation[,35:53]
rownames(regularoty.matrix) <- network.representation$names
head(regularoty.matrix)
target.gene <- "AT1G22770"
gene.expression.profile <- expression.profiles[target.gene,]
gene.expression.profile
## Extract regulatory matrix
regulatory.matrix <- network.representation[,35:53]
## Extract regulatory matrix
regulatory.matrix <- network.representation[,35:53]
rownames(regulatory.matrix) <- network.representation$names
head(regulatory.matrix)
target.gene <- "AT1G22770"
gene.expression.profile <- expression.profiles[target.gene,]
gene.regulators <- regulatory.matrix[target.gene,]
gene.regulators
gene.regulators <- gene.regulators[gene.regulators != 0]
gene.regulators
gene.regulators <- regulatory.matrix[target.gene,]
gene.regulators.names <- names(gene.regulators)
gene.regulators.names
j <- 1
gene.regulators[j] != 0
strsplit(gene.regulators.names[j],split="_")
strsplit(gene.regulators.names[j],split="_")[[1]][2]
current.regulator.zt <- strsplit(gene.regulators.names[j],split="_")[[1]][2]
zt.point = current.regulator.zt
zts <- c("ZT00","ZT04","ZT08","ZT12","ZT16","ZT20")
zts.numeric <- seq(from=0,to=20,by=4)
zts.numeric
current.regulator.zt
current.regulator.zt <- "ZT00"
current.regulator.zt %in% zts
zts == current.regulator.zt
which(zts == current.regulator.zt)
zts[which(zts == current.regulator.zt) + 1]
current.regulator.zt
substr(current.regulator.zt,start=3,stop=nchar(current.regulator.zt))
as.numeric(substr(current.regulator.zt,start=3,stop=nchar(current.regulator.zt)))
as.numeric(substr(current.regulator.zt,start=3,stop=nchar(current.regulator.zt)))
current.zt.numeric <- as.numeric(substr(current.regulator.zt,start=3,stop=nchar(current.regulator.zt)))
zts.numeric >= current.zt.numeric
zts.numeric
current.regulator.zt <- "ZT02"
current.zt.numeric <- as.numeric(substr(current.regulator.zt,start=3,stop=nchar(current.regulator.zt)))
zts.numeric >= current.zt.numeric
which(zts.numeric >= current.zt.numeric)
which(zts.numeric >= current.zt.numeric)[1]
next.zt <- zts[which(zts.numeric >= current.zt.numeric)[1]]
next.zt
previous.zt <- zts[which(zts.numeric >= current.zt.numeric)[1] - 1]
previous.zt
current.regulator.zt
source('~/Dropbox/github_repos/ATTRACTOR/network/add_effect_sign.R', echo=TRUE)
zts.to.consider <- function(zt.point)
{
zts <- c("ZT00","ZT04","ZT08","ZT12","ZT16","ZT20")
zts.numeric <- seq(from=0,to=20,by=4)
if(zt.point %in% zts)
{
return(c(zt.point, zts[which(zts == zt.point) + 1]))
} else
{
current.zt.numeric <- as.numeric(substr(zt.point,start=3,stop=nchar(current.regulator.zt)))
next.zt <- zts[which(zts.numeric >= current.zt.numeric)[1]]
previous.zt <- zts[which(zts.numeric >= current.zt.numeric)[1] - 1]
return(c(previous.zt, next.zt))
}
}
zts.to.consider(zt.point = "ZT00")
zts.to.consider(zt.point = "ZT02")
zts.to.consider(zt.point = "ZT04")
zts.to.consider(zt.point = "ZT015")
zts.to.consider(zt.point = "ZT15")
j <- 1
gene.regulators[j] != 0
current.regulator.zt <- strsplit(gene.regulators.names[j],split="_")[[1]][2]
zts.to.consider(zt.point = current.regulator.zt)
zts.to.check <- zts.to.consider(zt.point = current.regulator.zt)
gene.expression.profile[zts.to.check[1]]
zts.to.check[1]
gene.expression.profile
